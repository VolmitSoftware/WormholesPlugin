com.volmit.wormholes.Info -> com.volmit.wormholes.src.Lorem:
    java.lang.String TAG -> Lorem
    java.lang.String PERM_RELOAD -> ipsum
    java.lang.String PERM_LIST -> dolor
    java.lang.String PERM_CREATE -> sit
    java.lang.String PERM_DESTROY -> amet
    java.lang.String PERM_BUILD -> consectetur
    java.lang.String PERM_CONFIGURE -> adipiscing
    java.lang.String PERM_USE -> elit
    java.lang.String HR -> Morbi
    java.lang.String HRN -> pulvinar
    void <init>() -> <init>
    java.lang.String hr() -> Lorem
    java.lang.String hrn(java.lang.String) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.Settings -> com.volmit.wormholes.src.ipsum:
    boolean ENABLE_PROJECTIONS -> vulputate
    boolean ALLOW_ENTITIES -> dictum
    boolean ENABLE_APERTURE -> Vestibulum
    int MAX_PORTAL_SIZE -> in
    int APERTURE_MAX_SPEED -> purus
    int PROJECTION_CHANGE_THROTTLE -> non
    int PROJECTION_SAMPLE_RADIUS -> mi
    int PROJECTION_MAX_SPEED -> euismod
    int CHUNK_SEND_RATE -> Pellentesque
    int CHUNK_SEND_MAX -> at
    int CHUNK_MAX_CHANGE -> iaculis
    int NETWORK_POPULATE_MAPPING_INTERVAL -> urna
    int NETWORK_MAX_PACKET_SIZE -> Proin
    int NETWORK_COMPRESSION_LEVEL -> ac
    java.util.ArrayList ALLOW_ENTITIY_TYPES -> enim
    java.util.ArrayList APERTURE_ENTITIY_TYPES -> posuere
    int NETWORK_PUSH_THRESHOLD -> molestie
    int NETWORK_FLUSH_THRESHOLD -> odio
    int NETWORK_POLL_THRESHOLD -> a
    boolean BUNGEECORD_SEND_ONLY -> facilisis
    void <init>() -> <init>
    com.volmit.wormholes.util.DataCluster getConfig() -> ipsum
    void setConfig(com.volmit.wormholes.util.DataCluster) -> Lorem
    com.volmit.wormholes.util.DataCluster getExperimentalConfig() -> dolor
    void setExperimentalConfig(com.volmit.wormholes.util.DataCluster) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.Status -> com.volmit.wormholes.src.dolor:
    int packetBytesPerSecond -> In
    double projectionTime -> hac
    int permutationsPerSecond -> habitasse
    int pps -> platea
    boolean fdq -> dictumst
    com.volmit.wormholes.util.Average avgBPS -> Nam
    java.lang.String inf -> metus
    int lightFault -> nisl
    int lightFaulted -> magna
    void <init>() -> <init>
    void sample() -> sit
    void <clinit>() -> <clinit>
com.volmit.wormholes.WAPI -> com.volmit.wormholes.src.sit:
    void <init>() -> <init>
    java.util.List getPortals() -> amet
    java.util.List getLocalPortals() -> consectetur
    java.util.List getRemotePortals() -> adipiscing
    com.volmit.wormholes.portal.Portal getPortalAt(org.bukkit.Location) -> Lorem
    com.volmit.wormholes.portal.Portal getPortalLookingAt(org.bukkit.entity.Player) -> Lorem
    java.util.List getPortalAreasAt(org.bukkit.Location) -> ipsum
    java.util.List getPortalCloseAreaAt(org.bukkit.Location) -> dolor
    com.volmit.wormholes.portal.Portal getPortalByKey(com.volmit.wormholes.portal.PortalKey) -> Lorem
    boolean hasBungeecordConnection() -> elit
    java.lang.String getServerName() -> getServerName
    void fxShockPortal(com.volmit.wormholes.portal.LocalPortal) -> Lorem
    void fxShockAllPortal(com.volmit.wormholes.portal.LocalPortal) -> ipsum
com.volmit.wormholes.Wormholes -> com.volmit.wormholes.src.amet:
    com.volmit.wormholes.Wormholes instance -> tortor
    com.volmit.wormholes.network.VortexBus bus -> tempus
    com.volmit.wormholes.service.MutexService host -> sem
    com.volmit.wormholes.provider.PortalProvider provider -> sed
    com.volmit.wormholes.service.PortalRegistry registry -> volutpat
    com.volmit.wormholes.service.ApertureService aperture -> rhoncus
    com.volmit.wormholes.service.ProjectionService projector -> sapien
    com.volmit.wormholes.service.TimingsService timings -> orci
    com.volmit.wormholes.service.EntityService entity -> ligula
    com.volmit.wormholes.service.IOService io -> Sed
    com.volmit.wormholes.service.EffectService fx -> ultrices
    com.volmit.wormholes.util.SubGroup sub -> imperdiet
    void <init>() -> <init>
    void onStart() -> onStart
    void onStop() -> Morbi
    void onTick() -> pulvinar
    void doReload() -> vulputate
    void buildSubs() -> dictum
    void onConstruct() -> Vestibulum
    boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
com.volmit.wormholes.Wormholes$1 -> com.volmit.wormholes.src.consectetur:
    com.volmit.wormholes.Wormholes this$0 -> turpis
    void <init>(com.volmit.wormholes.Wormholes,java.lang.String,java.lang.String,java.lang.String[]) -> <init>
    void list(org.bukkit.command.CommandSender,java.lang.String[]) -> Lorem
    void cs(org.bukkit.command.CommandSender,java.lang.String[]) -> ipsum
    void cp(org.bukkit.entity.Player,java.lang.String[]) -> Lorem
com.volmit.wormholes.Wormholes$2 -> com.volmit.wormholes.src.adipiscing:
    com.volmit.wormholes.Wormholes this$0 -> turpis
    void <init>(com.volmit.wormholes.Wormholes,java.lang.String,java.lang.String,java.lang.String[]) -> <init>
    void list(org.bukkit.command.CommandSender) -> Lorem
    void cs(org.bukkit.command.CommandSender,java.lang.String[]) -> ipsum
    void cp(org.bukkit.entity.Player,java.lang.String[]) -> Lorem
com.volmit.wormholes.Wormholes$3 -> com.volmit.wormholes.src.elit:
    com.volmit.wormholes.Wormholes this$0 -> turpis
    void <init>(com.volmit.wormholes.Wormholes,java.lang.String,java.lang.String,java.lang.String[]) -> <init>
    void cs(org.bukkit.command.CommandSender,java.lang.String[]) -> ipsum
    void cp(org.bukkit.entity.Player,java.lang.String[]) -> Lorem
com.volmit.wormholes.Wormholes$4 -> com.volmit.wormholes.src.Morbi:
    com.volmit.wormholes.Wormholes this$0 -> turpis
    void <init>(com.volmit.wormholes.Wormholes,java.lang.String,java.lang.String,java.lang.String[]) -> <init>
    void go(org.bukkit.command.CommandSender) -> ipsum
    void cs(org.bukkit.command.CommandSender,java.lang.String[]) -> ipsum
    void cp(org.bukkit.entity.Player,java.lang.String[]) -> Lorem
com.volmit.wormholes.WormholesBungeecord -> com.volmit.wormholes.src.pulvinar:
    void <init>() -> <init>
    void onEnable() -> onEnable
    void onDisable() -> onDisable
com.volmit.wormholes.aperture.Aperture -> com.volmit.wormholes.src.vulputate:
    void <init>(com.volmit.wormholes.aperture.EntityHider$Policy) -> <init>
com.volmit.wormholes.aperture.AperturePlane -> com.volmit.wormholes.src.dictum:
    com.volmit.wormholes.util.GMap instanceMap -> Nullam
    com.volmit.wormholes.util.GMap instanceVa -> vehicula
    void <init>() -> <init>
    void clear() -> clear
    byte[] compress() -> in
    void addCompressed(byte[]) -> Lorem
    com.volmit.wormholes.util.GMap remap(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Direction) -> Lorem
    com.volmit.wormholes.util.GMap remapLook(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Direction) -> ipsum
    void sample(com.volmit.wormholes.portal.LocalPortal) -> dolor
    int size() -> size
com.volmit.wormholes.aperture.BlacklistAperture -> com.volmit.wormholes.src.Vestibulum:
    void <init>() -> <init>
com.volmit.wormholes.aperture.EntityHider -> com.volmit.wormholes.src.in:
    com.google.common.collect.Table observerEntityMap -> porta
    com.comphenix.protocol.PacketType[] ENTITY_PACKETS -> ultricies
    com.comphenix.protocol.ProtocolManager manager -> vestibulum
    org.bukkit.event.Listener bukkitListener -> felis
    com.comphenix.protocol.events.PacketAdapter protocolListener -> nec
    com.volmit.wormholes.aperture.EntityHider$Policy policy -> tristique
    void <init>(org.bukkit.plugin.Plugin,com.volmit.wormholes.aperture.EntityHider$Policy) -> <init>
    boolean setVisibility(org.bukkit.entity.Player,int,boolean) -> Lorem
    boolean setMembership(org.bukkit.entity.Player,int,boolean) -> ipsum
    boolean getMembership(org.bukkit.entity.Player,int) -> Lorem
    boolean isVisible(org.bukkit.entity.Player,int) -> ipsum
    void removeEntity(org.bukkit.entity.Entity,boolean) -> Lorem
    void removePlayer(org.bukkit.entity.Player) -> removePlayer
    org.bukkit.event.Listener constructBukkit() -> purus
    com.comphenix.protocol.events.PacketAdapter constructProtocol(org.bukkit.plugin.Plugin) -> Lorem
    boolean toggleEntity(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> Lorem
    boolean showEntity(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> ipsum
    boolean hideEntity(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> dolor
    boolean canSee(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> sit
    void validate(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> amet
    com.volmit.wormholes.aperture.EntityHider$Policy getPolicy() -> non
    void close() -> close
    void <clinit>() -> <clinit>
com.volmit.wormholes.aperture.EntityHider$1 -> com.volmit.wormholes.src.purus:
    com.volmit.wormholes.aperture.EntityHider this$0 -> lacinia
    void <init>(com.volmit.wormholes.aperture.EntityHider) -> <init>
    void onEntityDeath(org.bukkit.event.entity.EntityDeathEvent) -> Lorem
    void onChunkUnload(org.bukkit.event.world.ChunkUnloadEvent) -> Lorem
    void onPlayerQuit(org.bukkit.event.player.PlayerQuitEvent) -> Lorem
com.volmit.wormholes.aperture.EntityHider$2 -> com.volmit.wormholes.src.non:
    com.volmit.wormholes.aperture.EntityHider this$0 -> lacinia
    void <init>(com.volmit.wormholes.aperture.EntityHider,org.bukkit.plugin.Plugin,com.comphenix.protocol.PacketType[]) -> <init>
    void onPacketSending(com.comphenix.protocol.events.PacketEvent) -> onPacketSending
com.volmit.wormholes.aperture.EntityHider$3 -> com.volmit.wormholes.src.mi:
    int[] $SwitchMap$com$volmit$wormholes$aperture$EntityHider$Policy -> Duis
    void <clinit>() -> <clinit>
com.volmit.wormholes.aperture.EntityHider$Policy -> com.volmit.wormholes.src.euismod:
    com.volmit.wormholes.aperture.EntityHider$Policy WHITELIST -> tempor
    com.volmit.wormholes.aperture.EntityHider$Policy BLACKLIST -> eget
    com.volmit.wormholes.aperture.EntityHider$Policy[] $VALUES -> semper
    com.volmit.wormholes.aperture.EntityHider$Policy[] values() -> values
    com.volmit.wormholes.aperture.EntityHider$Policy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.aperture.RemoteEntity -> com.volmit.wormholes.src.Pellentesque:
    int id -> id
    int aid -> aliquam
    org.bukkit.entity.EntityType remoteType -> lectus
    void <init>(int,org.bukkit.entity.EntityType,int) -> <init>
    int getRemoteId() -> mi
    org.bukkit.entity.EntityType getRemoteType() -> euismod
    java.lang.String getName() -> getName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int getActualId() -> Pellentesque
com.volmit.wormholes.aperture.RemoteInstance -> com.volmit.wormholes.src.at:
    int getRemoteId() -> mi
    org.bukkit.entity.EntityType getRemoteType() -> euismod
    java.lang.String getName() -> getName
    int getActualId() -> Pellentesque
    com.volmit.wormholes.aperture.RemoteInstance create(org.bukkit.entity.Entity) -> Lorem
com.volmit.wormholes.aperture.RemotePlayer -> com.volmit.wormholes.src.iaculis:
    java.lang.String name -> name
    java.util.UUID uuid -> consequat
    void <init>(int,java.lang.String,java.util.UUID,int) -> <init>
    java.lang.String getName() -> getName
    java.util.UUID getUuid() -> getUuid
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.aperture.VEntity -> com.volmit.wormholes.src.urna:
    org.bukkit.entity.EntityType type -> neque
    int id -> id
    org.bukkit.Location location -> sagittis
    org.bukkit.Location last -> lorem
    org.bukkit.entity.Player viewer -> vel
    java.util.UUID uuid -> consequat
    float yaw -> yaw
    float pit -> Quisque
    float lya -> congue
    float lpi -> vitae
    void <init>(org.bukkit.entity.Player,org.bukkit.entity.EntityType,int,java.util.UUID,org.bukkit.Location) -> <init>
    void prelativeMove(double,double,double) -> Lorem
    void prelativeMoveLook(double,double,double,float,float) -> Lorem
    void pteleport(double,double,double,float,float) -> ipsum
    void plook(float,float) -> Lorem
    void despawn() -> at
    void spawn() -> iaculis
    void send(com.volmit.wormholes.util.AbstractPacket) -> Lorem
    org.bukkit.entity.EntityType getType() -> getType
    int getId() -> getId
    void move(double,double,double,float,float) -> dolor
    void look(float,float) -> ipsum
    void teleport(double,double,double,float,float) -> sit
    void flush() -> flush
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    org.bukkit.Location getLocation() -> getLocation
    org.bukkit.Location getLast() -> urna
    org.bukkit.entity.Player getViewer() -> Proin
    java.util.UUID getUuid() -> getUuid
com.volmit.wormholes.aperture.WhitelistAperture -> com.volmit.wormholes.src.Proin:
    void <init>() -> <init>
com.volmit.wormholes.config.Experimental -> com.volmit.wormholes.src.ac:
com.volmit.wormholes.config.Permissable -> com.volmit.wormholes.src.enim:
    boolean canReload -> ornare
    boolean canCreate -> Integer
    boolean canDestroy -> commodo
    boolean canList -> ante
    boolean canUse -> cursus
    boolean canBuild -> canBuild
    boolean canConfigure -> suscipit
    org.bukkit.command.CommandSender p -> Mauris
    void <init>(org.bukkit.command.CommandSender) -> <init>
    boolean has(java.lang.String[]) -> Lorem
    boolean canReload() -> ac
    boolean canCreate() -> enim
    boolean canDestroy() -> posuere
    boolean canList() -> molestie
    boolean canUse() -> odio
    boolean canBuild() -> canBuild
    boolean canConfigure() -> a
    org.bukkit.command.CommandSender getP() -> facilisis
com.volmit.wormholes.event.PortalEvent -> com.volmit.wormholes.src.posuere:
    com.volmit.wormholes.portal.Portal portal -> mollis
    void <init>(com.volmit.wormholes.portal.Portal) -> <init>
    com.volmit.wormholes.portal.Portal getPortal() -> In
com.volmit.wormholes.event.PortalPlayerEvent -> com.volmit.wormholes.src.molestie:
    org.bukkit.entity.Player player -> player
    void <init>(com.volmit.wormholes.portal.Portal,org.bukkit.entity.Player) -> <init>
    org.bukkit.entity.Player getPlayer() -> getPlayer
com.volmit.wormholes.event.WormholeCreateEvent -> com.volmit.wormholes.src.odio:
    void <init>(com.volmit.wormholes.portal.Portal) -> <init>
com.volmit.wormholes.event.WormholeLinkEvent -> com.volmit.wormholes.src.a:
    com.volmit.wormholes.portal.Portal linked -> convallis
    void <init>(com.volmit.wormholes.portal.Portal,com.volmit.wormholes.portal.Portal) -> <init>
    com.volmit.wormholes.portal.Portal getLinked() -> hac
com.volmit.wormholes.event.WormholePushEntityEvent -> com.volmit.wormholes.src.facilisis:
    org.bukkit.entity.Entity entity -> entity
    void <init>(com.volmit.wormholes.portal.Portal,org.bukkit.entity.Entity) -> <init>
    org.bukkit.entity.Entity getEntity() -> getEntity
com.volmit.wormholes.event.WormholeUnlinkEvent -> com.volmit.wormholes.src.In:
    void <init>(com.volmit.wormholes.portal.Portal) -> <init>
com.volmit.wormholes.exception.DuplicatePortalKeyException -> com.volmit.wormholes.src.hac:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.exception.InvalidPortalKeyException -> com.volmit.wormholes.src.habitasse:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.exception.InvalidPortalPositionException -> com.volmit.wormholes.src.platea:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.exception.PortalException -> com.volmit.wormholes.src.dictumst:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.network.BaseBus -> com.volmit.wormholes.src.Nam:
    com.volmit.wormholes.util.GList inbox -> viverra
    com.volmit.wormholes.util.GList outbox -> lacus
    void <init>() -> <init>
    com.volmit.wormholes.util.GList getInbox() -> habitasse
    com.volmit.wormholes.util.GList getOutbox() -> platea
    void inbox(com.volmit.wormholes.network.Transmission) -> Lorem
    void outbox(com.volmit.wormholes.network.Transmission) -> ipsum
    void read(com.volmit.wormholes.network.Transmission) -> dolor
    void cancel(com.volmit.wormholes.network.Transmission) -> sit
com.volmit.wormholes.network.CL -> com.volmit.wormholes.src.metus:
    com.volmit.wormholes.network.CL L1 -> eu
    com.volmit.wormholes.network.CL L2 -> Phasellus
    com.volmit.wormholes.network.CL L3 -> accumsan
    com.volmit.wormholes.network.CL L4 -> egestas
    com.volmit.wormholes.network.CL[] $VALUES -> Praesent
    com.volmit.wormholes.network.CL[] values() -> values
    com.volmit.wormholes.network.CL valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String get() -> get
    void <clinit>() -> <clinit>
com.volmit.wormholes.network.LocalBus -> com.volmit.wormholes.src.nisl:
    void <init>() -> <init>
    void flush() -> flush
com.volmit.wormholes.network.RemoteBus -> com.volmit.wormholes.src.magna:
    void <init>() -> <init>
    void flush() -> flush
    void sendTransmission(com.volmit.wormholes.network.Transmission) -> amet
    void onPluginMessageReceived(java.lang.String,org.bukkit.entity.Player,byte[]) -> onPluginMessageReceived
    void remoteForceSend(com.volmit.wormholes.network.Transmission) -> consectetur
com.volmit.wormholes.network.Transmission -> com.volmit.wormholes.src.tortor:
    void <init>(byte[]) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void send() -> send
    void setId(long) -> Lorem
    void setSource(java.lang.String) -> setSource
    void setDestination(java.lang.String) -> ipsum
    void setType(java.lang.String) -> setType
    long getId() -> getId
    java.lang.String getSource() -> getSource
    java.lang.String getDestination() -> dictumst
    java.lang.String getType() -> getType
    com.volmit.wormholes.network.Transmission createResponse() -> Nam
    void forceSend() -> metus
com.volmit.wormholes.network.TransmissionBus -> com.volmit.wormholes.src.tempus:
    com.volmit.wormholes.util.GList getInbox() -> habitasse
    com.volmit.wormholes.util.GList getOutbox() -> platea
    void inbox(com.volmit.wormholes.network.Transmission) -> Lorem
    void outbox(com.volmit.wormholes.network.Transmission) -> ipsum
    void read(com.volmit.wormholes.network.Transmission) -> dolor
    void cancel(com.volmit.wormholes.network.Transmission) -> sit
    void flush() -> flush
com.volmit.wormholes.network.VortexBus -> com.volmit.wormholes.src.sem:
    com.volmit.wormholes.network.LocalBus l -> eros
    com.volmit.wormholes.network.RemoteBus r -> et
    java.lang.String serverName -> serverName
    com.volmit.wormholes.util.GList servers -> sodales
    java.lang.Boolean online -> scelerisque
    java.lang.Long throttle -> velit
    void <init>() -> <init>
    com.volmit.wormholes.util.GList getInbox() -> habitasse
    com.volmit.wormholes.util.GList getOutbox() -> platea
    void inbox(com.volmit.wormholes.network.Transmission) -> Lorem
    void outbox(com.volmit.wormholes.network.Transmission) -> ipsum
    void read(com.volmit.wormholes.network.Transmission) -> dolor
    void cancel(com.volmit.wormholes.network.Transmission) -> sit
    void flush() -> flush
    void requestName() -> nisl
    void requestServers() -> magna
    void onPluginMessageReceived(java.lang.String,org.bukkit.entity.Player,byte[]) -> onPluginMessageReceived
    com.volmit.wormholes.network.LocalBus getL() -> tortor
    com.volmit.wormholes.network.RemoteBus getR() -> tempus
    java.lang.String getServerName() -> getServerName
    com.volmit.wormholes.util.GList getServers() -> sem
    java.lang.Boolean isOnline() -> sed
    java.lang.Long getThrottle() -> volutpat
    void forceFlush(com.volmit.wormholes.network.Transmission) -> adipiscing
com.volmit.wormholes.portal.LocalPortal -> com.volmit.wormholes.src.sed:
    com.volmit.wormholes.portal.PortalIdentity identity -> Donec
    com.volmit.wormholes.portal.PortalPosition position -> quam
    com.volmit.wormholes.projection.ProjectionPlane plane -> malesuada
    java.lang.String server -> quis
    java.lang.Boolean hasBeenValid -> ullamcorper
    java.lang.Boolean hasHadWormhole -> aliquet
    com.volmit.wormholes.aperture.AperturePlane apature -> nulla
    java.lang.Boolean saved -> Vivamus
    com.volmit.wormholes.portal.PortalSettings settings -> tellus
    void <init>(com.volmit.wormholes.portal.PortalIdentity,com.volmit.wormholes.portal.PortalPosition) -> <init>
    void update() -> update
    void reversePolarity() -> rhoncus
    com.volmit.wormholes.util.Direction getThrowDirection(org.bukkit.Location) -> sit
    boolean isPlayerLookingAt(org.bukkit.entity.Player) -> ipsum
    com.volmit.wormholes.util.GList getPlayersLookingAt() -> sapien
    com.volmit.wormholes.portal.PortalIdentity getIdentity() -> orci
    com.volmit.wormholes.portal.PortalPosition getPosition() -> ligula
    com.volmit.wormholes.portal.PortalKey getKey() -> Sed
    boolean hasWormhole() -> ultrices
    boolean isWormholeMutex() -> imperdiet
    com.volmit.wormholes.wormhole.Wormhole getWormhole() -> turpis
    com.volmit.wormholes.service.MutexService getService() -> Nullam
    com.volmit.wormholes.util.DataCluster toData() -> vehicula
    void fromData(com.volmit.wormholes.util.DataCluster) -> dolor
    java.lang.String getServer() -> getServer
    com.volmit.wormholes.projection.ProjectionPlane getProjectionPlane() -> porta
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean hasValidIshKey() -> ultricies
    boolean hasValidKey() -> vestibulum
    com.volmit.wormholes.projection.ProjectionPlane getPlane() -> felis
    java.lang.Boolean getHasBeenValid() -> nec
    com.volmit.wormholes.aperture.AperturePlane getApature() -> tristique
    void destroy() -> destroy
    java.lang.Boolean getHasHadWormhole() -> lacinia
    java.lang.Boolean getSaved() -> Duis
    com.volmit.wormholes.portal.PortalSettings getSettings() -> tempor
    com.volmit.wormholes.portal.PortalPosition access$002(com.volmit.wormholes.portal.LocalPortal,com.volmit.wormholes.portal.PortalPosition) -> Lorem
com.volmit.wormholes.portal.LocalPortal$1 -> com.volmit.wormholes.src.volutpat:
    com.volmit.wormholes.portal.LocalPortal this$0 -> leo
    void <init>(com.volmit.wormholes.portal.LocalPortal) -> <init>
    void run() -> run
com.volmit.wormholes.portal.LocalPortal$2 -> com.volmit.wormholes.src.rhoncus:
    boolean[] val$b -> tincidunt
    com.volmit.wormholes.portal.LocalPortal this$0 -> leo
    void <init>(com.volmit.wormholes.portal.LocalPortal,org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,boolean[]) -> <init>
    void onTrace(org.bukkit.Location) -> amet
com.volmit.wormholes.portal.LocalPortal$3 -> com.volmit.wormholes.src.sapien:
    com.volmit.wormholes.util.GList val$players -> luctus
    org.bukkit.entity.Player val$i -> Maecenas
    com.volmit.wormholes.portal.LocalPortal this$0 -> leo
    void <init>(com.volmit.wormholes.portal.LocalPortal,org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,com.volmit.wormholes.util.GList,org.bukkit.entity.Player) -> <init>
    void onTrace(org.bukkit.Location) -> amet
com.volmit.wormholes.portal.Portal -> com.volmit.wormholes.src.orci:
    void update() -> update
    com.volmit.wormholes.portal.PortalIdentity getIdentity() -> orci
    com.volmit.wormholes.portal.PortalPosition getPosition() -> ligula
    boolean hasValidKey() -> vestibulum
    com.volmit.wormholes.portal.PortalKey getKey() -> Sed
    boolean hasWormhole() -> ultrices
    boolean isWormholeMutex() -> imperdiet
    com.volmit.wormholes.wormhole.Wormhole getWormhole() -> turpis
    com.volmit.wormholes.service.MutexService getService() -> Nullam
    com.volmit.wormholes.util.DataCluster toData() -> vehicula
    void fromData(com.volmit.wormholes.util.DataCluster) -> dolor
    java.lang.String getServer() -> getServer
    com.volmit.wormholes.projection.ProjectionPlane getProjectionPlane() -> porta
    com.volmit.wormholes.aperture.AperturePlane getApature() -> tristique
com.volmit.wormholes.portal.PortalIdentity -> com.volmit.wormholes.src.ligula:
    com.volmit.wormholes.util.Axis axis -> est
    com.volmit.wormholes.util.Direction front -> hendrerit
    com.volmit.wormholes.util.Direction back -> Etiam
    com.volmit.wormholes.util.Direction up -> diam
    com.volmit.wormholes.util.Direction down -> dignissim
    com.volmit.wormholes.util.Direction left -> arcu
    com.volmit.wormholes.util.Direction right -> varius
    com.volmit.wormholes.portal.PortalKey key -> placerat
    void <init>(com.volmit.wormholes.util.Direction,com.volmit.wormholes.portal.PortalKey) -> <init>
    java.lang.String toString() -> toString
    com.volmit.wormholes.util.Axis getAx() -> eget
    com.volmit.wormholes.util.Direction getFront() -> semper
    com.volmit.wormholes.util.Direction getBack() -> aliquam
    com.volmit.wormholes.util.Direction getUp() -> lectus
    com.volmit.wormholes.util.Direction getDown() -> consequat
    com.volmit.wormholes.util.Direction getLeft() -> neque
    com.volmit.wormholes.util.Direction getRight() -> sagittis
    com.volmit.wormholes.util.Axis getAxis() -> lorem
    com.volmit.wormholes.portal.PortalKey getKey() -> Sed
    void setKey(com.volmit.wormholes.portal.PortalKey) -> ipsum
com.volmit.wormholes.portal.PortalKey -> com.volmit.wormholes.src.Sed:
    org.bukkit.DyeColor u -> Nunc
    org.bukkit.DyeColor d -> Ut
    org.bukkit.DyeColor l -> eleifend
    org.bukkit.DyeColor r -> nibh
    void <init>(byte[]) -> <init>
    void <init>(org.bukkit.DyeColor,org.bukkit.DyeColor,org.bukkit.DyeColor,org.bukkit.DyeColor) -> <init>
    java.lang.String getSName() -> vel
    com.volmit.wormholes.portal.PortalKey fromSName(java.lang.String) -> dolor
    org.bukkit.DyeColor getU() -> Quisque
    void setU(org.bukkit.DyeColor) -> Lorem
    org.bukkit.DyeColor getD() -> congue
    void setD(org.bukkit.DyeColor) -> ipsum
    org.bukkit.DyeColor getL() -> vitae
    void setL(org.bukkit.DyeColor) -> dolor
    org.bukkit.DyeColor getR() -> ornare
    void setR(org.bukkit.DyeColor) -> sit
    byte[] toData() -> Integer
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.portal.PortalPosition -> com.volmit.wormholes.src.ultrices:
    com.volmit.wormholes.util.Cuboid pane -> faucibus
    com.volmit.wormholes.util.Cuboid ipane -> Class
    com.volmit.wormholes.util.Cuboid area -> aptent
    com.volmit.wormholes.util.Cuboid frameUp -> taciti
    com.volmit.wormholes.util.Cuboid frameDown -> sociosqu
    com.volmit.wormholes.util.Cuboid frameLeft -> ad
    com.volmit.wormholes.util.Cuboid frameRight -> litora
    com.volmit.wormholes.util.Cuboid iarea -> torquent
    com.volmit.wormholes.util.GList frame -> per
    com.volmit.wormholes.util.GList keyset -> conubia
    org.bukkit.Location centerUp -> nostra
    org.bukkit.Location centerDown -> inceptos
    org.bukkit.Location centerLeft -> himenaeos
    org.bukkit.Location centerRight -> Cras
    org.bukkit.Location center -> pellentesque
    org.bukkit.Location cornerUL -> ut
    org.bukkit.Location cornerUR -> finibus
    org.bukkit.Location cornerDL -> fermentum
    org.bukkit.Location cornerDR -> augue
    org.bukkit.Location corneriUL -> erat
    org.bukkit.Location corneriUR -> Aenean
    org.bukkit.Location corneriDL -> blandit
    org.bukkit.Location corneriDR -> risus
    com.volmit.wormholes.portal.PortalIdentity identity -> Donec
    com.volmit.wormholes.projection.BoundingBox boundingBox -> Fusce
    void <init>(com.volmit.wormholes.portal.PortalIdentity,com.volmit.wormholes.util.Cuboid) -> <init>
    boolean intersects(org.bukkit.Location,org.bukkit.Location) -> Lorem
    org.bukkit.block.Block getRandomKeyBlock() -> commodo
    boolean intersects(org.bukkit.Location,org.bukkit.util.Vector) -> Lorem
    boolean isInsidePortal(org.bukkit.Location) -> consectetur
    com.volmit.wormholes.util.Cuboid getSideArea(org.bukkit.Location) -> adipiscing
    org.bukkit.Location ul() -> ante
    org.bukkit.Location ur() -> cursus
    org.bukkit.Location bl() -> suscipit
    org.bukkit.Location br() -> Mauris
    org.bukkit.Location uli() -> mollis
    org.bukkit.Location uri() -> convallis
    org.bukkit.Location bli() -> viverra
    org.bukkit.Location bri() -> lacus
    com.volmit.wormholes.util.Cuboid getOPane() -> eu
    com.volmit.wormholes.util.Cuboid getPane() -> Phasellus
    com.volmit.wormholes.util.Cuboid getArea() -> accumsan
    com.volmit.wormholes.util.Cuboid getFrameUp() -> egestas
    com.volmit.wormholes.util.Cuboid getFrameDown() -> Praesent
    com.volmit.wormholes.util.Cuboid getFrameLeft() -> eros
    com.volmit.wormholes.util.Cuboid getFrameRight() -> et
    com.volmit.wormholes.util.GList getFrame() -> sodales
    org.bukkit.Location getCenterUp() -> scelerisque
    org.bukkit.Location getCenterDown() -> velit
    org.bukkit.Location getCenterLeft() -> Donec
    org.bukkit.Location getCenterRight() -> quam
    org.bukkit.Location getCenter() -> getCenter
    org.bukkit.Location getCornerUL() -> malesuada
    org.bukkit.Location getCornerUR() -> quis
    org.bukkit.Location getCornerDL() -> ullamcorper
    org.bukkit.Location getCornerDR() -> aliquet
    com.volmit.wormholes.portal.PortalIdentity getIdentity() -> orci
    com.volmit.wormholes.projection.BoundingBox getBoundingBox() -> nulla
    com.volmit.wormholes.util.GList getKeyBlocks() -> Vivamus
    com.volmit.wormholes.util.Cuboid getIpane() -> tellus
    com.volmit.wormholes.util.GList getKeyset() -> leo
    org.bukkit.Location getCorneriUL() -> tincidunt
    org.bukkit.Location getCorneriUR() -> luctus
    org.bukkit.Location getCorneriDL() -> Maecenas
    org.bukkit.Location getCorneriDR() -> est
    com.volmit.wormholes.util.Cuboid getIarea() -> hendrerit
com.volmit.wormholes.portal.PortalPosition$1 -> com.volmit.wormholes.src.imperdiet:
    boolean[] val$traces -> maximus
    com.volmit.wormholes.portal.PortalPosition this$0 -> ex
    void <init>(com.volmit.wormholes.portal.PortalPosition,org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,boolean[]) -> <init>
    void onTrace(org.bukkit.Location) -> amet
com.volmit.wormholes.portal.PortalSettings -> com.volmit.wormholes.src.turpis:
    boolean project -> porttitor
    boolean aparture -> nisi
    java.lang.String customName -> justo
    boolean hasCustomName -> Suspendisse
    boolean allowEntities -> elementum
    void <init>() -> <init>
    boolean isProject() -> Etiam
    boolean isAparture() -> diam
    java.lang.String getCustomName() -> getCustomName
    boolean isHasCustomName() -> dignissim
    boolean isAllowEntities() -> arcu
    void setProject(boolean) -> Lorem
    void setAparture(boolean) -> ipsum
    void setCustomName(java.lang.String) -> setCustomName
    void setHasCustomName(boolean) -> dolor
    void setAllowEntities(boolean) -> sit
com.volmit.wormholes.portal.RemotePortal -> com.volmit.wormholes.src.Nullam:
    java.lang.String server -> quis
    com.volmit.wormholes.portal.PortalIdentity identity -> Donec
    void <init>(java.lang.String,com.volmit.wormholes.portal.PortalIdentity) -> <init>
    void update() -> update
    com.volmit.wormholes.portal.PortalIdentity getIdentity() -> orci
    com.volmit.wormholes.portal.PortalPosition getPosition() -> ligula
    com.volmit.wormholes.portal.PortalKey getKey() -> Sed
    boolean hasWormhole() -> ultrices
    boolean isWormholeMutex() -> imperdiet
    com.volmit.wormholes.wormhole.Wormhole getWormhole() -> turpis
    com.volmit.wormholes.service.MutexService getService() -> Nullam
    com.volmit.wormholes.util.DataCluster toData() -> vehicula
    void fromData(com.volmit.wormholes.util.DataCluster) -> dolor
    java.lang.String getServer() -> getServer
    com.volmit.wormholes.projection.ProjectionPlane getProjectionPlane() -> porta
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean hasValidKey() -> vestibulum
    com.volmit.wormholes.aperture.AperturePlane getApature() -> tristique
com.volmit.wormholes.projection.ArrivalVector -> com.volmit.wormholes.src.vehicula:
    org.bukkit.util.Vector velocity -> mattis
    org.bukkit.util.Vector direction -> primis
    org.bukkit.util.Vector offset -> cubilia
    void <init>(org.bukkit.util.Vector,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    org.bukkit.util.Vector getVelocity() -> getVelocity
    void setVelocity(org.bukkit.util.Vector) -> setVelocity
    org.bukkit.util.Vector getDirection() -> getDirection
    void setDirection(org.bukkit.util.Vector) -> setDirection
    org.bukkit.util.Vector getOffset() -> varius
    void setOffset(org.bukkit.util.Vector) -> Lorem
    java.lang.String toString() -> toString
    void fromString(java.lang.String) -> sit
com.volmit.wormholes.projection.BaseViewportRenderer -> com.volmit.wormholes.src.porta:
    com.volmit.wormholes.projection.Viewport viewport -> Curae
    int stage -> habitant
    void <init>(com.volmit.wormholes.projection.Viewport,int) -> <init>
    org.bukkit.entity.Player getPlayer() -> getPlayer
    com.volmit.wormholes.projection.Viewport getViewport() -> placerat
    int getStage() -> Nunc
    int getMaxStage() -> Ut
    com.volmit.wormholes.projection.ProjectionSet getProjectionSet() -> eleifend
    com.volmit.wormholes.projection.ProjectionSet getRenderedStages() -> nibh
    com.volmit.wormholes.projection.ProjectionSet getNonRenderedStages() -> faucibus
    com.volmit.wormholes.util.Cuboid getProjectionStage(int) -> Lorem
    boolean isComplete() -> isComplete
com.volmit.wormholes.projection.BoundingBox -> com.volmit.wormholes.src.ultricies:
    com.volmit.wormholes.util.GList inside -> morbi
    com.volmit.wormholes.util.GList entering -> senectus
    com.volmit.wormholes.util.GList exiting -> netus
    com.volmit.wormholes.util.Cuboid cuboid -> fames
    void <init>(com.volmit.wormholes.util.Cuboid) -> <init>
    void flush() -> flush
    boolean isInside(org.bukkit.entity.Entity) -> ipsum
    boolean isEntering(org.bukkit.entity.Entity) -> dolor
    boolean isEnteringOrInside(org.bukkit.entity.Entity) -> sit
    boolean isExiting(org.bukkit.entity.Entity) -> amet
    com.volmit.wormholes.util.GList getInside() -> Class
    com.volmit.wormholes.util.GList getEntering() -> aptent
    com.volmit.wormholes.util.GList getExiting() -> taciti
    com.volmit.wormholes.util.Cuboid getCuboid() -> sociosqu
com.volmit.wormholes.projection.MBC -> com.volmit.wormholes.src.vestibulum:
    com.volmit.wormholes.util.MaterialBlock mb -> pharetra
    org.bukkit.util.Vector v -> potenti
    void <init>(long) -> <init>
    java.lang.String toString() -> toString
    void <init>(com.volmit.wormholes.util.MaterialBlock,org.bukkit.util.Vector) -> <init>
    long toLong() -> ad
    void fromLong(long) -> ipsum
    com.volmit.wormholes.util.MaterialBlock getMb() -> litora
    org.bukkit.util.Vector getV() -> torquent
    void setMb(com.volmit.wormholes.util.MaterialBlock) -> Lorem
    void setV(org.bukkit.util.Vector) -> ipsum
com.volmit.wormholes.projection.NulledViewport -> com.volmit.wormholes.src.felis:
    void <init>(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> <init>
    void rebuild() -> per
    boolean contains(org.bukkit.Location) -> elit
com.volmit.wormholes.projection.PartialRenderer -> com.volmit.wormholes.src.nec:
    com.volmit.wormholes.projection.ProjectionSet queue -> pretium
    com.volmit.wormholes.projection.ProjectionSet rendered -> dui
    com.volmit.wormholes.projection.Viewport view -> massa
    void <init>(com.volmit.wormholes.projection.Viewport) -> <init>
    boolean isComplete() -> isComplete
    com.volmit.wormholes.util.Cuboid next() -> conubia
    com.volmit.wormholes.projection.ProjectionSet getQueue() -> nostra
    com.volmit.wormholes.projection.ProjectionSet getRendered() -> inceptos
    com.volmit.wormholes.projection.Viewport getView() -> himenaeos
com.volmit.wormholes.projection.ProjectionPlane -> com.volmit.wormholes.src.tristique:
    com.volmit.wormholes.util.GMap mapping -> gravida
    com.volmit.wormholes.util.GMap remapCache -> fringilla
    com.volmit.wormholes.util.GMap ormapCache -> Nulla
    void <init>() -> <init>
    com.volmit.wormholes.util.GMap getMapping() -> Cras
    boolean hasContent() -> pellentesque
    org.bukkit.util.Vector ovap(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Direction,org.bukkit.util.Vector) -> Lorem
    com.volmit.wormholes.util.GMap omap(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Direction) -> dolor
    com.volmit.wormholes.util.GMap remap(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Direction) -> Lorem
    void addSuperCompressed(byte[]) -> ipsum
    com.volmit.wormholes.util.GList getSuperCompressedByteCull(int) -> ipsum
    com.volmit.wormholes.util.GList getSuperCompressed(int) -> dolor
    void blockChange(org.bukkit.util.Vector,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    void sample(org.bukkit.Location,int,boolean) -> Lorem
    com.volmit.wormholes.util.GMap getRemapCache() -> ut
    com.volmit.wormholes.util.GMap getOrmapCache() -> finibus
com.volmit.wormholes.projection.ProjectionSet -> com.volmit.wormholes.src.lacinia:
    com.volmit.wormholes.util.GList cuboids -> facilisi
    void <init>() -> <init>
    void <init>(com.volmit.wormholes.util.GList) -> <init>
    com.volmit.wormholes.util.Cuboid pop() -> fermentum
    void remove(int) -> remove
    void keep(int) -> sit
    com.volmit.wormholes.util.Cuboid get(int) -> amet
    int size() -> size
    void add(com.volmit.wormholes.util.GList) -> Lorem
    void add(com.volmit.wormholes.util.Cuboid) -> Lorem
    com.volmit.wormholes.util.GList get() -> augue
    com.volmit.wormholes.util.GList getBlocks() -> erat
    com.volmit.wormholes.util.GList getEntities() -> Aenean
    boolean contains(org.bukkit.Location) -> elit
    int hashCode() -> hashCode
    com.volmit.wormholes.projection.ProjectionSet copy() -> blandit
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
com.volmit.wormholes.projection.QueuedChunk -> com.volmit.wormholes.src.Duis:
    int bytes -> libero
    int dist -> condimentum
    int lf -> interdum
    void run() -> run
    void <init>(int,int,int) -> <init>
    int getBytes() -> getBytes
    int getDist() -> risus
    int getLf() -> Fusce
com.volmit.wormholes.projection.RasteredChunk -> com.volmit.wormholes.src.tempor:
    int x -> x
    int z -> z
    com.comphenix.protocol.wrappers.MultiBlockChangeInfo[][][] mbi -> dapibus
    org.bukkit.World world -> world
    void <init>(int,int,org.bukkit.World) -> <init>
    void flush() -> flush
    void put(int,int,int,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    void project(org.bukkit.entity.Player) -> dolor
com.volmit.wormholes.projection.RasteredChunk$1 -> com.volmit.wormholes.src.eget:
    org.bukkit.entity.Player val$p -> sollicitudin
    com.volmit.wormholes.util.WrapperPlayServerMultiBlockChange val$w -> Aliquam
    com.volmit.wormholes.projection.RasteredChunk this$0 -> auctor
    void <init>(com.volmit.wormholes.projection.RasteredChunk,int,int,int,org.bukkit.entity.Player,com.volmit.wormholes.util.WrapperPlayServerMultiBlockChange) -> <init>
    void run() -> run
com.volmit.wormholes.projection.RasteredPlayer -> com.volmit.wormholes.src.semper:
    com.volmit.wormholes.util.GMap queuedLayer -> Curabitur
    com.volmit.wormholes.util.GMap ghostLayer -> feugiat
    org.bukkit.entity.Player p -> efficitur
    void <init>(org.bukkit.entity.Player) -> <init>
    void queue(org.bukkit.Location,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    void flush() -> flush
    void prepareChunks(com.volmit.wormholes.util.GMap) -> Lorem
    void dequeueAll() -> maximus
    boolean isQueued(org.bukkit.Location) -> Morbi
    int queueSize() -> ex
com.volmit.wormholes.projection.RasteredServer -> com.volmit.wormholes.src.aliquam:
    com.volmit.wormholes.util.GMap projections -> laoreet
    void <init>() -> <init>
    void queue(org.bukkit.Location,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    void flush() -> flush
    boolean canFlush() -> porttitor
com.volmit.wormholes.projection.RasteredSystem -> com.volmit.wormholes.src.lectus:
    com.volmit.wormholes.util.GMap rasteredPlayers -> nunc
    boolean flushing -> venenatis
    com.volmit.wormholes.util.GMap queueSend -> rutrum
    void <init>() -> <init>
    void dequeueAll() -> maximus
    void dequeue(org.bukkit.entity.Player,org.bukkit.Location) -> Lorem
    boolean isQueued(org.bukkit.entity.Player,org.bukkit.Location) -> ipsum
    void queue(org.bukkit.entity.Player,org.bukkit.Location,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    com.volmit.wormholes.projection.RasteredPlayer get(org.bukkit.entity.Player) -> sit
    void flushRasterQueue() -> nisi
    void runNext(com.volmit.wormholes.util.GList) -> ipsum
    void queueRaster(org.bukkit.entity.Player,com.volmit.wormholes.projection.QueuedChunk) -> Lorem
    void flush() -> flush
com.volmit.wormholes.projection.RasteredWorld -> com.volmit.wormholes.src.consequat:
    com.volmit.wormholes.util.GMap chunks -> mauris
    org.bukkit.World world -> world
    void <init>(org.bukkit.World) -> <init>
    void flush() -> flush
    boolean hasChunks() -> justo
    void queue(org.bukkit.Location,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    void createChunkIfNull(int,int) -> Lorem
com.volmit.wormholes.projection.RenderMesh -> com.volmit.wormholes.src.neque:
    com.volmit.wormholes.util.GMap set -> lobortis
    void <init>() -> <init>
    com.volmit.wormholes.projection.PartialRenderer getRenderer(org.bukkit.entity.Player,com.volmit.wormholes.portal.LocalPortal,com.volmit.wormholes.projection.Viewport) -> Lorem
    void removePortal(com.volmit.wormholes.portal.LocalPortal) -> sit
com.volmit.wormholes.projection.RenderSet -> com.volmit.wormholes.src.sagittis:
    com.volmit.wormholes.portal.LocalPortal portal -> bibendum
    com.volmit.wormholes.util.GMap renderers -> Orci
    void <init>(com.volmit.wormholes.portal.LocalPortal) -> <init>
    com.volmit.wormholes.portal.LocalPortal getPortal() -> Suspendisse
    com.volmit.wormholes.util.GMap getRenderers() -> elementum
    com.volmit.wormholes.projection.PartialRenderer getRenderer(com.volmit.wormholes.projection.Viewport,org.bukkit.entity.Player) -> Lorem
    void update() -> update
com.volmit.wormholes.projection.Viewport -> com.volmit.wormholes.src.lorem:
    org.bukkit.entity.Player p -> efficitur
    com.volmit.wormholes.portal.Portal portal -> mollis
    com.volmit.wormholes.projection.ProjectionSet set -> natoque
    void <init>(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> <init>
    void wipe() -> mattis
    void rebuild() -> per
    com.volmit.wormholes.util.GList getEntities() -> Aenean
    boolean contains(org.bukkit.Location) -> elit
    org.bukkit.Location getIris() -> primis
    org.bukkit.entity.Player getP() -> cubilia
    com.volmit.wormholes.portal.Portal getPortal() -> In
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    com.volmit.wormholes.projection.ProjectionSet getProjectionSet() -> eleifend
com.volmit.wormholes.projection.ViewportRenderer -> com.volmit.wormholes.src.vel:
    org.bukkit.entity.Player getPlayer() -> getPlayer
    com.volmit.wormholes.projection.Viewport getViewport() -> placerat
    int getStage() -> Nunc
    int getMaxStage() -> Ut
    com.volmit.wormholes.projection.ProjectionSet getProjectionSet() -> eleifend
    com.volmit.wormholes.projection.ProjectionSet getRenderedStages() -> nibh
    com.volmit.wormholes.projection.ProjectionSet getNonRenderedStages() -> faucibus
    com.volmit.wormholes.util.Cuboid getProjectionStage(int) -> Lorem
    boolean isComplete() -> isComplete
com.volmit.wormholes.provider.AutomagicalProvider -> com.volmit.wormholes.src.Quisque:
    void <init>() -> <init>
    void onFlush() -> Curae
    void on(org.bukkit.event.player.PlayerInteractEvent) -> Lorem
    void ona(org.bukkit.event.player.PlayerInteractEvent) -> ipsum
com.volmit.wormholes.provider.AutomagicalProvider$1 -> com.volmit.wormholes.src.congue:
    com.volmit.wormholes.util.Direction val$md -> penatibus
    com.volmit.wormholes.util.Cuboid val$cx -> magnis
    org.bukkit.event.player.PlayerInteractEvent val$e -> dis
    com.volmit.wormholes.provider.AutomagicalProvider this$0 -> parturient
    void <init>(com.volmit.wormholes.provider.AutomagicalProvider,com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Cuboid,org.bukkit.event.player.PlayerInteractEvent) -> <init>
    void run() -> run
com.volmit.wormholes.provider.BaseProvider -> com.volmit.wormholes.src.vitae:
    com.volmit.wormholes.projection.RasteredSystem rasterer -> montes
    com.volmit.wormholes.util.GList moved -> nascetur
    com.volmit.wormholes.util.GList conf -> ridiculus
    long lastms -> mus
    com.volmit.wormholes.util.GList debug -> Interdum
    void <init>() -> <init>
    void dedebug(org.bukkit.entity.Player) -> amet
    void debug(org.bukkit.entity.Player) -> consectetur
    void errorMessage(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> Lorem
    boolean isDebugging(org.bukkit.entity.Player) -> adipiscing
    void flush() -> flush
    void onFlush() -> Curae
    com.volmit.wormholes.util.GList getBase(int) -> consectetur
    com.volmit.wormholes.util.GList getBaseSqrt(int) -> adipiscing
    com.volmit.wormholes.portal.PortalKey buildKey(com.volmit.wormholes.portal.PortalPosition) -> Lorem
    void wipe(com.volmit.wormholes.portal.LocalPortal) -> amet
    void forceWipe(com.volmit.wormholes.portal.LocalPortal) -> consectetur
    void save(com.volmit.wormholes.portal.LocalPortal) -> adipiscing
    void loadAllPortals() -> habitant
    boolean configure(com.volmit.wormholes.portal.LocalPortal,org.bukkit.entity.Player) -> Lorem
    void dfs() -> morbi
    void dfd() -> senectus
    com.volmit.wormholes.portal.LocalPortal createPortal(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Cuboid) -> Lorem
    com.volmit.wormholes.portal.LocalPortal createPortal(com.volmit.wormholes.portal.PortalIdentity,com.volmit.wormholes.portal.PortalPosition) -> Lorem
    void destroyPortal(com.volmit.wormholes.portal.LocalPortal) -> elit
    com.volmit.wormholes.projection.RasteredSystem getRasterer() -> netus
    com.volmit.wormholes.projection.Viewport getViewport(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> Lorem
    boolean isNear(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> ipsum
    boolean canSee(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> dolor
    void movePlayer(org.bukkit.entity.Player) -> elit
    boolean hasMoved(org.bukkit.entity.Player) -> Morbi
    com.volmit.wormholes.util.GMap getViewport(com.volmit.wormholes.portal.Portal) -> Lorem
    com.volmit.wormholes.util.GList access$000(com.volmit.wormholes.provider.BaseProvider) -> Lorem
    long access$100(com.volmit.wormholes.provider.BaseProvider) -> ipsum
    long access$102(com.volmit.wormholes.provider.BaseProvider,long) -> Lorem
com.volmit.wormholes.provider.BaseProvider$1 -> com.volmit.wormholes.src.ornare:
    org.bukkit.entity.Player val$p -> sollicitudin
    com.volmit.wormholes.portal.LocalPortal val$l -> aggregate
    com.volmit.wormholes.provider.BaseProvider this$0 -> architect
    void <init>(com.volmit.wormholes.provider.BaseProvider,java.lang.Integer,org.bukkit.entity.Player,com.volmit.wormholes.portal.LocalPortal) -> <init>
    void run() -> run
com.volmit.wormholes.provider.BaseProvider$1$1 -> com.volmit.wormholes.src.Integer:
    com.volmit.wormholes.provider.BaseProvider$1 this$1 -> benchmark
    void <init>(com.volmit.wormholes.provider.BaseProvider$1,org.bukkit.entity.Player,boolean) -> <init>
    void onUpdate() -> fames
    void onSelect(java.lang.String,int) -> Lorem
    void onOpen() -> pharetra
    java.lang.String onEnable(java.lang.String) -> amet
    java.lang.String onDisable(java.lang.String) -> consectetur
    void onClose() -> potenti
    void onClick(com.volmit.wormholes.util.Click,org.bukkit.entity.Player,java.lang.String,int,com.volmit.wormholes.util.Hud) -> Lorem
com.volmit.wormholes.provider.BaseProvider$1$1$1 -> com.volmit.wormholes.src.commodo:
    com.volmit.wormholes.provider.BaseProvider$1$1 this$2 -> brand
    void <init>(com.volmit.wormholes.provider.BaseProvider$1$1,java.lang.Integer) -> <init>
    void run() -> run
com.volmit.wormholes.provider.BaseProvider$1$1$2 -> com.volmit.wormholes.src.ante:
    org.bukkit.entity.Player val$p -> sollicitudin
    com.volmit.wormholes.provider.BaseProvider$1$1 this$2 -> brand
    void <init>(com.volmit.wormholes.provider.BaseProvider$1$1,org.bukkit.entity.Player,boolean,org.bukkit.entity.Player) -> <init>
    void onUpdate() -> fames
    void onSelect(java.lang.String,int) -> Lorem
    void onOpen() -> pharetra
    java.lang.String onEnable(java.lang.String) -> amet
    java.lang.String onDisable(java.lang.String) -> consectetur
    void onClose() -> potenti
    void onClick(com.volmit.wormholes.util.Click,org.bukkit.entity.Player,java.lang.String,int,com.volmit.wormholes.util.Hud) -> Lorem
com.volmit.wormholes.provider.PortalProvider -> com.volmit.wormholes.src.cursus:
    void flush() -> flush
    void loadAllPortals() -> habitant
    void save(com.volmit.wormholes.portal.LocalPortal) -> adipiscing
    com.volmit.wormholes.portal.LocalPortal createPortal(com.volmit.wormholes.portal.PortalIdentity,com.volmit.wormholes.portal.PortalPosition) -> Lorem
    boolean hasMoved(org.bukkit.entity.Player) -> Morbi
    void movePlayer(org.bukkit.entity.Player) -> elit
    void destroyPortal(com.volmit.wormholes.portal.LocalPortal) -> elit
    com.volmit.wormholes.projection.RasteredSystem getRasterer() -> netus
    com.volmit.wormholes.projection.Viewport getViewport(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> Lorem
    boolean isNear(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> ipsum
    boolean canSee(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> dolor
    com.volmit.wormholes.util.GMap getViewport(com.volmit.wormholes.portal.Portal) -> Lorem
    com.volmit.wormholes.portal.PortalKey buildKey(com.volmit.wormholes.portal.PortalPosition) -> Lorem
    void wipe(com.volmit.wormholes.portal.LocalPortal) -> amet
    void dfs() -> morbi
    void dfd() -> senectus
com.volmit.wormholes.service.ApertureService -> com.volmit.wormholes.src.suscipit:
    com.volmit.wormholes.aperture.BlacklistAperture b -> cultivate
    com.volmit.wormholes.util.GMap remoteApaturePlanes -> deliver
    com.volmit.wormholes.util.GMap blacklistQueue -> deploy
    com.volmit.wormholes.util.GMap blacklisted -> disintermediate
    void <init>() -> <init>
    void flush() -> flush
    void layer3Stream(byte[]) -> dolor
    void hideEntity(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> consectetur
    void showEntity(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> adipiscing
    void showAll(org.bukkit.entity.Player) -> pulvinar
    com.volmit.wormholes.util.GList getHidden(org.bukkit.entity.Player) -> vulputate
    com.volmit.wormholes.aperture.BlacklistAperture getB() -> pretium
    com.volmit.wormholes.util.GMap getRemoteApaturePlanes() -> dui
    com.volmit.wormholes.util.GMap getBlacklistQueue() -> massa
    com.volmit.wormholes.util.GMap getBlacklisted() -> gravida
com.volmit.wormholes.service.EffectService -> com.volmit.wormholes.src.Mauris:
    void <init>() -> <init>
    void strikePortal(com.volmit.wormholes.portal.LocalPortal) -> Morbi
    void strike(com.volmit.wormholes.portal.LocalPortal) -> pulvinar
    void strikeAll(com.volmit.wormholes.portal.LocalPortal) -> vulputate
    void push(org.bukkit.entity.Entity,org.bukkit.util.Vector,com.volmit.wormholes.portal.LocalPortal) -> Lorem
    void throwBack(org.bukkit.entity.Entity,org.bukkit.util.Vector,com.volmit.wormholes.portal.LocalPortal) -> ipsum
    org.bukkit.util.Vector throwBackVector(org.bukkit.entity.Entity,com.volmit.wormholes.portal.LocalPortal) -> Lorem
    void ambient(com.volmit.wormholes.portal.LocalPortal) -> dictum
    void rise(com.volmit.wormholes.portal.LocalPortal) -> Vestibulum
    void riseNew(com.volmit.wormholes.portal.LocalPortal) -> in
    void phaseDeny(com.volmit.wormholes.portal.LocalPortal,org.bukkit.Location) -> Lorem
    void phase(com.volmit.wormholes.portal.LocalPortal,org.bukkit.Location) -> ipsum
    void visualize(com.volmit.wormholes.portal.LocalPortal) -> purus
    void created(com.volmit.wormholes.portal.LocalPortal) -> non
    void destroyed(com.volmit.wormholes.portal.LocalPortal) -> mi
com.volmit.wormholes.service.EffectService$1 -> com.volmit.wormholes.src.mollis:
    com.volmit.wormholes.portal.LocalPortal val$p -> drive
    com.volmit.wormholes.service.EffectService this$0 -> e
    void <init>(com.volmit.wormholes.service.EffectService,java.lang.Integer,com.volmit.wormholes.portal.LocalPortal) -> <init>
    void run() -> run
com.volmit.wormholes.service.EffectService$2 -> com.volmit.wormholes.src.convallis:
    org.bukkit.block.Block val$i -> enable
    com.volmit.wormholes.portal.LocalPortal val$p -> drive
    com.volmit.wormholes.service.EffectService this$0 -> e
    void <init>(com.volmit.wormholes.service.EffectService,java.lang.Integer,org.bukkit.block.Block,com.volmit.wormholes.portal.LocalPortal) -> <init>
    void run() -> run
com.volmit.wormholes.service.EffectService$3 -> com.volmit.wormholes.src.viverra:
    org.bukkit.util.Vector val$vx -> embrace
    org.bukkit.Location val$l -> empower
    com.volmit.wormholes.service.EffectService this$0 -> e
    void <init>(com.volmit.wormholes.service.EffectService,java.lang.Integer,org.bukkit.util.Vector,org.bukkit.Location) -> <init>
    void run() -> run
com.volmit.wormholes.service.EntityService -> com.volmit.wormholes.src.lacus:
    com.volmit.wormholes.util.GMap entities -> engage
    com.volmit.wormholes.util.GMap aentities -> engineer
    void <init>() -> <init>
    void flush() -> flush
    void set(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal,com.volmit.wormholes.aperture.RemoteInstance,org.bukkit.Location) -> Lorem
com.volmit.wormholes.service.IOService -> com.volmit.wormholes.src.eu:
    void <init>() -> <init>
    void doConfig() -> id
    void doConfigBasic() -> fringilla
    void doConfigExperimental() -> Nulla
    com.volmit.wormholes.util.DataCluster load(java.io.File) -> Lorem
    void save(com.volmit.wormholes.util.DataCluster,java.io.File) -> Lorem
com.volmit.wormholes.service.MutexService -> com.volmit.wormholes.src.Phasellus:
    com.volmit.wormholes.util.GList insideThrottle -> enhance
    com.volmit.wormholes.util.GMap pendingPulls -> envisioneer
    java.lang.Integer broadcastInterval -> evolve
    com.volmit.wormholes.util.GMap waiting -> expedite
    com.volmit.wormholes.util.GMap arrivals -> exploit
    void <init>() -> <init>
    void sendArrival(com.volmit.wormholes.portal.RemotePortal,org.bukkit.entity.Player,com.volmit.wormholes.projection.ArrivalVector) -> Lorem
    com.volmit.wormholes.projection.ArrivalVector getArrival(com.volmit.wormholes.portal.LocalPortal,org.bukkit.entity.Player) -> ipsum
    boolean hasArrival(com.volmit.wormholes.portal.LocalPortal,org.bukkit.entity.Player) -> dolor
    void setArrival(com.volmit.wormholes.portal.LocalPortal,java.util.UUID,com.volmit.wormholes.projection.ArrivalVector) -> Lorem
    void setPending(java.util.UUID,com.volmit.wormholes.portal.Portal,org.bukkit.util.Vector,org.bukkit.util.Vector,org.bukkit.util.Vector) -> Lorem
    void addThrottle(org.bukkit.entity.Entity) -> consectetur
    void on(org.bukkit.event.player.PlayerItemHeldEvent) -> Lorem
    void removeThrottle(org.bukkit.entity.Entity) -> adipiscing
    boolean isThrottled(org.bukkit.entity.Entity) -> elit
    void addLocalPortal(com.volmit.wormholes.portal.Portal) -> ipsum
    void removeLocalPortal(com.volmit.wormholes.portal.Portal) -> dolor
    void removeLocalPortalReverse(com.volmit.wormholes.portal.Portal) -> sit
    com.volmit.wormholes.portal.Portal[] getPortals(com.volmit.wormholes.portal.PortalKey) -> dolor
    com.volmit.wormholes.portal.Portal getPortal(com.volmit.wormholes.portal.PortalKey,com.volmit.wormholes.portal.LocalPortal) -> Lorem
    void on(org.bukkit.event.world.ChunkUnloadEvent) -> ipsum
    void on(org.bukkit.event.player.PlayerMoveEvent) -> Lorem
    void handleArrivalIntent(org.bukkit.entity.Player) -> dictum
    boolean hasLink(com.volmit.wormholes.portal.LocalPortal) -> euismod
    boolean isLinkMutex(com.volmit.wormholes.portal.LocalPortal) -> Pellentesque
    boolean hasWormhole(com.volmit.wormholes.portal.LocalPortal) -> at
    boolean isMutexWormhole(com.volmit.wormholes.portal.LocalPortal) -> iaculis
    com.volmit.wormholes.wormhole.Wormhole getWormhole(com.volmit.wormholes.portal.LocalPortal) -> urna
    boolean isPositionValid(com.volmit.wormholes.portal.PortalPosition) -> ipsum
    boolean isKeyValid(com.volmit.wormholes.portal.PortalKey) -> sit
    boolean isKeyValidAlready(com.volmit.wormholes.portal.PortalKey) -> amet
    void flush() -> flush
    void dequeue(com.volmit.wormholes.portal.Portal) -> amet
    void updateThrottles() -> facilisi
    void broadcastPortals() -> libero
    void beginStream(java.lang.String,java.lang.String,java.lang.String,com.volmit.wormholes.portal.LocalPortal) -> Lorem
    void layer2StreamRequest(com.volmit.wormholes.portal.Portal) -> consectetur
    void layer2Stream(byte[]) -> sit
    void sendPlayerThrough(org.bukkit.entity.Player,java.util.UUID,com.volmit.wormholes.portal.LocalPortal,com.volmit.wormholes.portal.Portal,org.bukkit.util.Vector,org.bukkit.util.Vector,org.bukkit.util.Vector,java.lang.Runnable) -> Lorem
    void updatePortals() -> condimentum
    void on(org.bukkit.event.player.PlayerJoinEvent) -> Lorem
    com.volmit.wormholes.util.GList getPortals() -> interdum
    com.volmit.wormholes.util.GList getLocalPortals() -> dapibus
    com.volmit.wormholes.util.GList getInsideThrottle() -> sollicitudin
    java.lang.Integer getBroadcastInterval() -> Aliquam
    com.volmit.wormholes.util.GMap getMutexPortals() -> auctor
    com.volmit.wormholes.util.GMap getPendingPulls() -> Curabitur
    void dequeueAll() -> maximus
    void on(org.bukkit.event.block.BlockBreakEvent) -> Lorem
    void blockChange(org.bukkit.Location,com.volmit.wormholes.portal.Portal) -> Lorem
    void sendBlockChange(org.bukkit.util.Vector,com.volmit.wormholes.util.MaterialBlock,com.volmit.wormholes.portal.Portal) -> Lorem
    void on(org.bukkit.event.block.BlockPlaceEvent) -> Lorem
    boolean canBuild(org.bukkit.entity.Player) -> Vestibulum
    boolean canDestroy(org.bukkit.entity.Player) -> in
    void updateEverything(java.lang.Runnable) -> Lorem
    void globalReload() -> feugiat
    com.volmit.wormholes.util.GMap access$000(com.volmit.wormholes.service.MutexService) -> Lorem
com.volmit.wormholes.service.MutexService$1 -> com.volmit.wormholes.src.accumsan:
    com.volmit.wormholes.portal.LocalPortal val$lp -> extend
    java.lang.String val$as -> facilitate
    java.lang.String val$to -> generate
    com.volmit.wormholes.service.MutexService this$0 -> grow
    void <init>(com.volmit.wormholes.service.MutexService,com.volmit.wormholes.portal.LocalPortal,java.lang.String,java.lang.String) -> <init>
    void async() -> efficitur
com.volmit.wormholes.service.MutexService$1$1 -> com.volmit.wormholes.src.egestas:
    java.lang.Byte[] val$i -> harness
    com.volmit.wormholes.service.MutexService$1 this$1 -> implement
    void <init>(com.volmit.wormholes.service.MutexService$1,java.lang.Byte[]) -> <init>
    void async() -> efficitur
com.volmit.wormholes.service.MutexService$2 -> com.volmit.wormholes.src.Praesent:
    byte[] val$msgbytes -> incentivize
    com.volmit.wormholes.service.MutexService this$0 -> grow
    void <init>(com.volmit.wormholes.service.MutexService,byte[]) -> <init>
    void async() -> efficitur
com.volmit.wormholes.service.MutexService$3 -> com.volmit.wormholes.src.eros:
    org.bukkit.entity.Player val$p -> sollicitudin
    java.lang.Runnable val$r -> incubate
    com.volmit.wormholes.portal.Portal val$to -> innovate
    java.util.UUID val$id -> integrate
    org.bukkit.util.Vector val$velocity -> iterate
    org.bukkit.util.Vector val$direction -> leverage
    org.bukkit.util.Vector val$entry -> matrix
    com.volmit.wormholes.util.FinalInteger val$cd -> maximize
    com.volmit.wormholes.portal.LocalPortal val$source -> mesh
    com.volmit.wormholes.service.MutexService this$0 -> grow
    void <init>(com.volmit.wormholes.service.MutexService,int,org.bukkit.entity.Player,java.lang.Runnable,com.volmit.wormholes.portal.Portal,java.util.UUID,org.bukkit.util.Vector,org.bukkit.util.Vector,org.bukkit.util.Vector,com.volmit.wormholes.util.FinalInteger,com.volmit.wormholes.portal.LocalPortal) -> <init>
    void run() -> run
com.volmit.wormholes.service.MutexService$4 -> com.volmit.wormholes.src.et:
    org.bukkit.event.player.PlayerJoinEvent val$e -> monetize
    org.bukkit.Location val$position -> morph
    com.volmit.wormholes.projection.ArrivalVector val$av -> optimize
    com.volmit.wormholes.service.MutexService this$0 -> grow
    void <init>(com.volmit.wormholes.service.MutexService,org.bukkit.event.player.PlayerJoinEvent,org.bukkit.Location,com.volmit.wormholes.projection.ArrivalVector) -> <init>
    void run() -> run
com.volmit.wormholes.service.MutexService$5 -> com.volmit.wormholes.src.sodales:
    com.volmit.wormholes.portal.Portal val$p -> orchestrate
    org.bukkit.Location val$l -> empower
    com.volmit.wormholes.service.MutexService this$0 -> grow
    void <init>(com.volmit.wormholes.service.MutexService,com.volmit.wormholes.portal.Portal,org.bukkit.Location) -> <init>
    void run() -> run
com.volmit.wormholes.service.PortalRegistry -> com.volmit.wormholes.src.scelerisque:
    com.volmit.wormholes.util.GList destroyQueue -> productize
    com.volmit.wormholes.util.GList localPortals -> recontextualize
    com.volmit.wormholes.util.GMap mutexPortals -> redefine
    void <init>() -> <init>
    com.volmit.wormholes.util.GList getDestroyQueue() -> laoreet
    com.volmit.wormholes.util.GList getLocalPortals() -> dapibus
    boolean hasPortalsInView(org.bukkit.Location) -> pulvinar
    com.volmit.wormholes.portal.Portal getClosestViewedPortal(org.bukkit.Location) -> vulputate
    com.volmit.wormholes.util.GList getPortalsInView(org.bukkit.Location) -> dictum
    com.volmit.wormholes.util.GList getPortalsInCloseView(org.bukkit.Location) -> Vestibulum
    com.volmit.wormholes.util.GMap getMutexPortals() -> auctor
    com.volmit.wormholes.projection.ProjectionSet getOtherLocalPortals(com.volmit.wormholes.portal.Portal) -> adipiscing
    boolean isLookingAt(org.bukkit.entity.Player,com.volmit.wormholes.portal.Portal) -> sit
    com.volmit.wormholes.portal.Portal getPortalLookingAt(org.bukkit.entity.Player) -> Lorem
com.volmit.wormholes.service.ProjectionService -> com.volmit.wormholes.src.velit:
    com.volmit.wormholes.util.GMap remotePlanes -> reintermediate
    java.lang.Boolean projecting -> reinvent
    java.lang.Long tpl -> repurpose
    com.volmit.wormholes.util.GMap lastPort -> revolutionize
    com.volmit.wormholes.projection.RenderMesh mesh -> scale
    long lms -> seize
    void <init>() -> <init>
    void flush() -> flush
    void deproject(com.volmit.wormholes.portal.LocalPortal) -> Proin
    void project(com.volmit.wormholes.portal.LocalPortal) -> ac
    void on(org.bukkit.event.player.PlayerTeleportEvent) -> Lorem
    com.volmit.wormholes.util.GMap getRemotePlanes() -> nunc
    java.lang.Boolean getProjecting() -> venenatis
    java.lang.Long getTpl() -> rutrum
    com.volmit.wormholes.util.GMap getLastPort() -> mauris
    com.volmit.wormholes.projection.RenderMesh getMesh() -> lobortis
    long access$000(com.volmit.wormholes.service.ProjectionService) -> Lorem
    long access$002(com.volmit.wormholes.service.ProjectionService,long) -> Lorem
    java.lang.Boolean access$102(com.volmit.wormholes.service.ProjectionService,java.lang.Boolean) -> Lorem
com.volmit.wormholes.service.ProjectionService$1 -> com.volmit.wormholes.src.Donec:
    com.volmit.wormholes.service.ProjectionService this$0 -> strategize
    void <init>(com.volmit.wormholes.service.ProjectionService) -> <init>
    void async() -> efficitur
com.volmit.wormholes.service.TimingsService -> com.volmit.wormholes.src.quam:
    com.volmit.wormholes.util.Timed root -> streamline
    com.volmit.wormholes.util.Timed asyn -> syndicate
    void <init>() -> <init>
com.volmit.wormholes.util.A -> com.volmit.wormholes.src.malesuada:
    void <init>() -> <init>
    void async() -> efficitur
com.volmit.wormholes.util.A$1 -> com.volmit.wormholes.src.quis:
    com.volmit.wormholes.util.A this$0 -> synergize
    void <init>(com.volmit.wormholes.util.A) -> <init>
    void run() -> run
com.volmit.wormholes.util.AbstractPacket -> com.volmit.wormholes.src.ullamcorper:
    com.comphenix.protocol.events.PacketContainer handle -> synthesize
    void <init>(com.comphenix.protocol.events.PacketContainer,com.comphenix.protocol.PacketType) -> <init>
    com.comphenix.protocol.events.PacketContainer getHandle() -> bibendum
    void sendPacket(org.bukkit.entity.Player) -> purus
    void recievePacket(org.bukkit.entity.Player) -> non
    void receivePacket(org.bukkit.entity.Player) -> mi
com.volmit.wormholes.util.Adapter -> com.volmit.wormholes.src.aliquet:
    java.lang.Object adapt(java.lang.Object) -> Lorem
    java.lang.Object onAdapt(java.lang.Object) -> ipsum
com.volmit.wormholes.util.Alphabet -> com.volmit.wormholes.src.nulla:
    com.volmit.wormholes.util.Alphabet ALPHA -> target
    com.volmit.wormholes.util.Alphabet BRAVO -> transform
    com.volmit.wormholes.util.Alphabet CHARLIE -> transition
    com.volmit.wormholes.util.Alphabet DELTA -> unleash
    com.volmit.wormholes.util.Alphabet ECHO -> utilize
    com.volmit.wormholes.util.Alphabet FOXTROT -> visualize
    com.volmit.wormholes.util.Alphabet GOLF -> whiteboard
    com.volmit.wormholes.util.Alphabet HOTEL -> B2B
    com.volmit.wormholes.util.Alphabet INDIA -> B2C
    com.volmit.wormholes.util.Alphabet JULIET -> back
    com.volmit.wormholes.util.Alphabet KILO -> end
    com.volmit.wormholes.util.Alphabet LIMA -> best
    com.volmit.wormholes.util.Alphabet MIKE -> of
    com.volmit.wormholes.util.Alphabet NOVEMBER -> breed
    com.volmit.wormholes.util.Alphabet OSCAR -> bleeding
    com.volmit.wormholes.util.Alphabet PAPA -> edge
    com.volmit.wormholes.util.Alphabet QUEBEC -> bricks
    com.volmit.wormholes.util.Alphabet ROMEO -> and
    com.volmit.wormholes.util.Alphabet SIERRA -> clicks
    com.volmit.wormholes.util.Alphabet TANGO -> mortar
    com.volmit.wormholes.util.Alphabet UNIFORM -> collaborative
    com.volmit.wormholes.util.Alphabet VICTOR -> compelling
    com.volmit.wormholes.util.Alphabet WISKEY -> cross
    com.volmit.wormholes.util.Alphabet XRAY -> platform
    com.volmit.wormholes.util.Alphabet YANKEE -> media
    com.volmit.wormholes.util.Alphabet ZULU -> customized
    com.volmit.wormholes.util.Alphabet[] $VALUES -> cutting
    com.volmit.wormholes.util.Alphabet[] values() -> values
    com.volmit.wormholes.util.Alphabet valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    char getChar() -> getChar
    java.lang.String radioTalk(java.lang.String) -> adipiscing
    com.volmit.wormholes.util.Alphabet fromChar(char) -> Lorem
    com.volmit.wormholes.util.GList getAlphabet() -> Orci
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.AmountName -> com.volmit.wormholes.src.Vivamus:
    java.lang.String singular -> distributed
    java.lang.String plural -> dot
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getSingular() -> natoque
    java.lang.String getPlural() -> penatibus
    java.lang.String forAmount(int) -> elit
    java.lang.String suffix(int) -> Morbi
com.volmit.wormholes.util.Archive -> com.volmit.wormholes.src.tellus:
    void add(java.io.File,java.io.File) -> Lorem
    void remove(java.io.File) -> remove
    void compress(java.io.File) -> ipsum
    com.volmit.wormholes.util.ArchiveType getType() -> magnis
com.volmit.wormholes.util.ArchiveType -> com.volmit.wormholes.src.leo:
    com.volmit.wormholes.util.ArchiveType ZIP -> com
    com.volmit.wormholes.util.ArchiveType[] $VALUES -> dynamic
    com.volmit.wormholes.util.ArchiveType[] values() -> values
    com.volmit.wormholes.util.ArchiveType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ArchiveUtils -> com.volmit.wormholes.src.tincidunt:
    void <init>() -> <init>
    void createZipArchive(com.volmit.wormholes.util.GMap,java.io.File) -> Lorem
    void extractZipArchive(java.io.File,java.io.File) -> ipsum
    com.volmit.wormholes.util.GList allFiles(java.io.File) -> dolor
    com.volmit.wormholes.util.GList cropFiles(java.io.File,com.volmit.wormholes.util.GList) -> Lorem
    java.io.File cropFile(java.io.File,java.io.File) -> dolor
com.volmit.wormholes.util.Area -> com.volmit.wormholes.src.luctus:
    org.bukkit.Location location -> sagittis
    java.lang.Double radius -> business
    boolean within(org.bukkit.Location,org.bukkit.Location,double) -> Lorem
    void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    com.volmit.wormholes.util.Cuboid toCuboid() -> dis
    void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    java.lang.Double distance(org.bukkit.Location) -> in
    java.lang.Double slowDistance(org.bukkit.Location) -> purus
    boolean isWithin(org.bukkit.Location) -> non
    boolean hasEntities() -> hasEntities
    org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> Lorem
    org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> Lorem
    org.bukkit.entity.Entity[] getNearbyEntities() -> parturient
    org.bukkit.entity.Player[] getNearbyPlayers() -> montes
    org.bukkit.Location getLocation() -> getLocation
    void setLocation(org.bukkit.Location) -> setLocation
    java.lang.Double getRadius() -> nascetur
    void setRadius(java.lang.Double) -> Lorem
    org.bukkit.Location random() -> ridiculus
com.volmit.wormholes.util.ArmorStandHologram -> com.volmit.wormholes.src.Maecenas:
    void <init>(org.bukkit.Location) -> <init>
com.volmit.wormholes.util.AsyncConfig -> com.volmit.wormholes.src.est:
com.volmit.wormholes.util.AsyncConfigurable -> com.volmit.wormholes.src.hendrerit:
    boolean isLoaded() -> isLoaded
com.volmit.wormholes.util.Audible -> com.volmit.wormholes.src.Etiam:
    void play(org.bukkit.entity.Player,org.bukkit.Location) -> dolor
    void play(org.bukkit.entity.Player) -> euismod
    void play(org.bukkit.Location) -> mi
    void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> Lorem
    java.lang.Float getVolume() -> mus
    void setVolume(java.lang.Float) -> Lorem
    java.lang.Float getPitch() -> Interdum
    void setPitch(java.lang.Float) -> ipsum
    com.volmit.wormholes.util.Audible clone() -> aggregate
com.volmit.wormholes.util.Audio -> com.volmit.wormholes.src.diam:
    com.volmit.wormholes.util.GList audibles -> efficient
    void <init>() -> <init>
    void <init>(com.volmit.wormholes.util.GList) -> <init>
    com.volmit.wormholes.util.Audible clone() -> aggregate
    void add(com.volmit.wormholes.util.Audible) -> Lorem
    com.volmit.wormholes.util.Audio qadd(com.volmit.wormholes.util.Audible) -> ipsum
    void play(org.bukkit.entity.Player,org.bukkit.Location) -> dolor
    void play(org.bukkit.entity.Player) -> euismod
    void play(org.bukkit.Location) -> mi
    void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> Lorem
    java.lang.Float getVolume() -> mus
    void setVolume(java.lang.Float) -> Lorem
    java.lang.Float getPitch() -> Interdum
    void setPitch(java.lang.Float) -> ipsum
    java.lang.Object clone() -> clone
com.volmit.wormholes.util.AudioDistortion -> com.volmit.wormholes.src.dignissim:
    void <init>() -> <init>
    com.volmit.wormholes.util.Audible distort(com.volmit.wormholes.util.Audible) -> dolor
com.volmit.wormholes.util.Average -> com.volmit.wormholes.src.arcu:
    int limit -> limit
    com.volmit.wormholes.util.GList data -> enterprise
    double average -> extensible
    com.volmit.wormholes.util.GList getFastAverage(com.volmit.wormholes.util.GList,int) -> Lorem
    void <init>(int) -> <init>
    void reset() -> reset
    void put(double) -> Lorem
    int getLimit() -> getLimit
    void setLimit(int) -> setLimit
    com.volmit.wormholes.util.GList getData() -> architect
    void setData(com.volmit.wormholes.util.GList) -> dolor
    double getAverage() -> getAverage
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.util.Axis -> com.volmit.wormholes.src.varius:
    com.volmit.wormholes.util.Axis X -> frictionless
    com.volmit.wormholes.util.Axis Y -> front
    com.volmit.wormholes.util.Axis Z -> global
    int x -> x
    int y -> y
    int z -> z
    com.volmit.wormholes.util.Axis[] $VALUES -> granular
    com.volmit.wormholes.util.Axis[] values() -> values
    com.volmit.wormholes.util.Axis valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int) -> <init>
    org.bukkit.util.Vector positive() -> benchmark
    org.bukkit.util.Vector negative() -> brand
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Base64 -> com.volmit.wormholes.src.placerat:
    int NO_OPTIONS -> holistic
    int ENCODE -> impactful
    int DECODE -> innovative
    int GZIP -> integrated
    int DONT_GUNZIP -> interactive
    int DO_BREAK_LINES -> intuitive
    int URL_SAFE -> killer
    int ORDERED -> ORDERED
    int MAX_LINE_LENGTH -> leading
    byte EQUALS_SIGN -> magnetic
    byte NEW_LINE -> mission
    java.lang.String PREFERRED_ENCODING -> critical
    byte WHITE_SPACE_ENC -> next
    byte EQUALS_SIGN_ENC -> generation
    byte[] _STANDARD_ALPHABET -> one
    byte[] _STANDARD_DECODABET -> source
    byte[] _URL_SAFE_ALPHABET -> out
    byte[] _URL_SAFE_DECODABET -> the
    byte[] _ORDERED_ALPHABET -> box
    byte[] _ORDERED_DECODABET -> plug
    java.lang.String mx -> play
    boolean $assertionsDisabled -> proactive
    byte[] getAlphabet(int) -> pulvinar
    byte[] getDecodabet(int) -> vulputate
    void <init>() -> <init>
    byte[] encode3to4(byte[],byte[],int,int) -> Lorem
    byte[] encode3to4(byte[],int,int,byte[],int,int) -> Lorem
    void encode(java.nio.ByteBuffer,java.nio.ByteBuffer) -> Lorem
    void encode(java.nio.ByteBuffer,java.nio.CharBuffer) -> Lorem
    java.lang.String encodeObject(java.io.Serializable) -> Lorem
    java.lang.String encodeObject(java.io.Serializable,int) -> Lorem
    java.lang.String encodeBytes(byte[]) -> amet
    java.lang.String encodeBytes(byte[],int) -> Lorem
    java.lang.String encodeBytes(byte[],int,int) -> Lorem
    java.lang.String encodeBytes(byte[],int,int,int) -> Lorem
    byte[] encodeBytesToBytes(byte[]) -> consectetur
    byte[] encodeBytesToBytes(byte[],int,int,int) -> ipsum
    int decode4to3(byte[],int,byte[],int,int) -> Lorem
    byte[] decode(byte[]) -> decode
    byte[] decode(byte[],int,int,int) -> dolor
    byte[] decode(java.lang.String) -> decode
    byte[] decode(java.lang.String,int) -> ipsum
    java.lang.Object decodeToObject(java.lang.String) -> elit
    java.lang.Object decodeToObject(java.lang.String,int,java.lang.ClassLoader) -> Lorem
    void encodeToFile(byte[],java.lang.String) -> Lorem
    void decodeToFile(java.lang.String,java.lang.String) -> Lorem
    byte[] decodeFromFile(java.lang.String) -> Morbi
    java.lang.String encodeFromFile(java.lang.String) -> pulvinar
    void encodeFileToFile(java.lang.String,java.lang.String) -> ipsum
    void decodeFileToFile(java.lang.String,java.lang.String) -> dolor
    void ex(java.io.File) -> sit
    java.lang.String readFile(java.lang.String) -> readFile
    byte[] access$000(int) -> dictum
    byte[] access$100(byte[],int,int,byte[],int,int) -> ipsum
    int access$200(byte[],int,byte[],int,int) -> ipsum
    byte[] access$300(byte[],byte[],int,int) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Base64$1 -> com.volmit.wormholes.src.Nunc:
    java.lang.ClassLoader val$loader -> real
    void <init>(java.io.InputStream,java.lang.ClassLoader) -> <init>
    java.lang.Class resolveClass(java.io.ObjectStreamClass) -> resolveClass
com.volmit.wormholes.util.Base64$InputStream -> com.volmit.wormholes.src.Ut:
    boolean encode -> revolutionary
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> rich
    int numSigBytes -> robust
    int lineLength -> lineLength
    boolean breakLines -> scalable
    int options -> seamless
    byte[] decodabet -> sexy
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.io.InputStream,int) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
com.volmit.wormholes.util.Base64$OutputStream -> com.volmit.wormholes.src.eleifend:
    boolean encode -> revolutionary
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> rich
    int lineLength -> lineLength
    boolean breakLines -> scalable
    byte[] b4 -> sticky
    boolean suspendEncoding -> strategic
    int options -> seamless
    byte[] decodabet -> sexy
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,int) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> cultivate
    void close() -> close
    void suspendEncoding() -> deliver
    void resumeEncoding() -> deploy
com.volmit.wormholes.util.BaseHud -> com.volmit.wormholes.src.nibh:
    org.bukkit.entity.Player player -> player
    com.volmit.wormholes.util.GList content -> synergistic
    boolean open -> open
    com.volmit.wormholes.util.Hologram holo -> transparent
    com.volmit.wormholes.util.CNum selection -> turn
    int maxPage -> ubiquitous
    int startRange -> user
    boolean listening -> centric
    com.volmit.wormholes.util.GMap preListeners -> added
    int index -> index
    boolean hasTitle -> vertical
    void <init>(org.bukkit.entity.Player) -> <init>
    void open() -> open
    void on(org.bukkit.event.player.PlayerInteractEvent) -> Lorem
    void on(com.volmit.wormholes.util.PlayerScrollEvent) -> Lorem
    void update() -> update
    org.bukkit.Location getBaseLocation() -> disintermediate
    void close() -> close
    void setContents(com.volmit.wormholes.util.GList) -> sit
    com.volmit.wormholes.util.GList getContents() -> drive
    java.lang.String getSelection() -> e
    int getSelectionRow() -> enable
    void onUpdateInternal() -> embrace
    com.volmit.wormholes.util.GList getContent() -> empower
    void setContent(com.volmit.wormholes.util.GList) -> amet
    int getMaxPage() -> getMaxPage
    void setMaxPage(int) -> setMaxPage
    org.bukkit.entity.Player getPlayer() -> getPlayer
    boolean isOpen() -> isOpen
    com.volmit.wormholes.util.Hologram getHolo() -> engage
    int getStartRange() -> engineer
    void registerPreListener(java.lang.String,java.lang.Runnable) -> Lorem
    void unregisterPreListener(java.lang.String) -> vulputate
    boolean isListening() -> enhance
    void setListening(boolean) -> amet
    int getIndex() -> getIndex
    void setIndex(int) -> setIndex
    com.volmit.wormholes.util.GMap getPreListeners() -> envisioneer
    boolean isHasTitle() -> evolve
    void setHasTitle(boolean) -> consectetur
    void setPlayer(org.bukkit.entity.Player) -> setPlayer
    void setOpen(boolean) -> setOpen
    void setHolo(com.volmit.wormholes.util.Hologram) -> Lorem
    void setSelection(com.volmit.wormholes.util.CNum) -> Lorem
    void setStartRange(int) -> Vestibulum
    void setPreListeners(com.volmit.wormholes.util.GMap) -> ipsum
com.volmit.wormholes.util.BaseHud$1 -> com.volmit.wormholes.src.faucibus:
    com.volmit.wormholes.util.BaseHud this$0 -> viral
    void <init>(com.volmit.wormholes.util.BaseHud,int) -> <init>
    void run() -> run
com.volmit.wormholes.util.BooleanTag -> com.volmit.wormholes.src.Class:
    boolean value -> value
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.Boolean getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.BorderDirection -> com.volmit.wormholes.src.aptent:
    com.volmit.wormholes.util.BorderDirection TOP -> virtual
    com.volmit.wormholes.util.BorderDirection BOTTOM -> visionary
    com.volmit.wormholes.util.BorderDirection LEFT -> web
    com.volmit.wormholes.util.BorderDirection RIGHT -> enabled
    com.volmit.wormholes.util.BorderDirection[] $VALUES -> wireless
    com.volmit.wormholes.util.BorderDirection[] values() -> values
    com.volmit.wormholes.util.BorderDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.BoundPhysicalObject -> com.volmit.wormholes.src.taciti:
    org.bukkit.entity.Entity e -> class
    void <init>(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> <init>
    void influenceForce(org.bukkit.util.Vector) -> dolor
    org.bukkit.entity.Entity getEntity() -> getEntity
com.volmit.wormholes.util.ByteArrayTag -> com.volmit.wormholes.src.sociosqu:
    byte[] value -> value
    void <init>(java.lang.String,byte[]) -> <init>
    byte[] getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.ByteMap2D -> com.volmit.wormholes.src.ad:
    byte[][] map -> items
    int width -> width
    int height -> height
    void <init>(int,int,byte) -> <init>
    void clear(int,int,int,int,byte) -> Lorem
    void clear(byte) -> Lorem
    void set(int,int,byte) -> Lorem
    byte get(int,int) -> ipsum
    byte[][] getMap() -> expedite
    int getWidth() -> getWidth
    int getHeight() -> getHeight
com.volmit.wormholes.util.ByteReader -> com.volmit.wormholes.src.litora:
    java.io.ByteArrayInputStream bois -> applications
    java.io.DataInputStream dis -> architectures
    void <init>(byte[]) -> <init>
    java.lang.String rString() -> exploit
    byte[] rBytes() -> extend
    int rInt() -> facilitate
    byte rByte() -> generate
    short rShort() -> grow
    long rLong() -> harness
    char rChar() -> implement
    double rDouble() -> incentivize
    float rFloat() -> incubate
    boolean rBoolean() -> innovate
    void close() -> close
com.volmit.wormholes.util.ByteTag -> com.volmit.wormholes.src.torquent:
    byte value -> value
    void <init>(java.lang.String,byte) -> <init>
    java.lang.Byte getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.ByteWriter -> com.volmit.wormholes.src.per:
    java.io.ByteArrayOutputStream boas -> bandwidth
    java.io.DataOutputStream dos -> channels
    void <init>() -> <init>
    void wString(java.lang.String) -> dictum
    void wInt(int) -> in
    void wByte(byte) -> ipsum
    void wShort(short) -> Lorem
    void wLong(long) -> dolor
    void wChar(char) -> ipsum
    void wDouble(double) -> ipsum
    void wFloat(float) -> Lorem
    void wBoolean(boolean) -> adipiscing
    void wBytes(byte[]) -> adipiscing
    byte[] getData() -> getData
    void close() -> close
com.volmit.wormholes.util.C -> com.volmit.wormholes.src.conubia:
    com.volmit.wormholes.util.C BLACK -> communities
    com.volmit.wormholes.util.C DARK_BLUE -> content
    com.volmit.wormholes.util.C DARK_GREEN -> convergence
    com.volmit.wormholes.util.C DARK_AQUA -> deliverables
    com.volmit.wormholes.util.C DARK_RED -> commerce
    com.volmit.wormholes.util.C DARK_PURPLE -> markets
    com.volmit.wormholes.util.C GOLD -> services
    com.volmit.wormholes.util.C GRAY -> tailers
    com.volmit.wormholes.util.C DARK_GRAY -> experiences
    com.volmit.wormholes.util.C BLUE -> eyeballs
    com.volmit.wormholes.util.C GREEN -> functionalities
    com.volmit.wormholes.util.C AQUA -> infomediaries
    com.volmit.wormholes.util.C RED -> infrastructures
    com.volmit.wormholes.util.C LIGHT_PURPLE -> initiatives
    com.volmit.wormholes.util.C YELLOW -> interfaces
    com.volmit.wormholes.util.C WHITE -> methodologies
    com.volmit.wormholes.util.C MAGIC -> metrics
    com.volmit.wormholes.util.C BOLD -> mindshare
    com.volmit.wormholes.util.C STRIKETHROUGH -> models
    com.volmit.wormholes.util.C UNDERLINE -> networks
    com.volmit.wormholes.util.C ITALIC -> niches
    com.volmit.wormholes.util.C RESET -> paradigms
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> partnerships
    char code -> platforms
    boolean isFormat -> portals
    java.lang.String toString -> relationships
    java.util.Map BY_ID -> ROI
    java.util.Map BY_CHAR -> synergies
    java.util.Map dyeChatMap -> readiness
    java.util.Map chatHexMap -> schemas
    java.util.Map dyeHexMap -> solutions
    com.volmit.wormholes.util.C[] $VALUES -> supply
    com.volmit.wormholes.util.C[] values() -> values
    com.volmit.wormholes.util.C valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,char,int) -> <init>
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
    char getChar() -> getChar
    java.lang.String toString() -> toString
    org.bukkit.DyeColor dye() -> iterate
    java.lang.String hex() -> leverage
    boolean isFormat() -> isFormat
    boolean isColor() -> isColor
    com.volmit.wormholes.util.C getByChar(char) -> dolor
    com.volmit.wormholes.util.C getByChar(java.lang.String) -> Vestibulum
    java.lang.String stripColor(java.lang.String) -> stripColor
    com.volmit.wormholes.util.C dyeToChat(org.bukkit.DyeColor) -> amet
    org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> Lorem
    java.lang.String chatToHex(org.bukkit.ChatColor) -> ipsum
    java.lang.String dyeToHex(org.bukkit.DyeColor) -> consectetur
    org.bukkit.Color hexToColor(java.lang.String) -> in
    org.bukkit.Color rgbToColor(java.lang.String) -> purus
    java.lang.String generateColorTable() -> matrix
    org.bukkit.ChatColor chatColor() -> maximize
    java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    com.volmit.wormholes.util.C fromItemMeta(byte) -> dolor
    byte getItemMeta() -> mesh
    java.lang.String getLastColors(java.lang.String) -> getLastColors
    void <init>(java.lang.String,int,char,int,com.volmit.wormholes.util.C$1) -> <init>
    void <init>(java.lang.String,int,char,int,boolean,com.volmit.wormholes.util.C$1) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.C$1 -> com.volmit.wormholes.src.nostra:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$10 -> com.volmit.wormholes.src.inceptos:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$11 -> com.volmit.wormholes.src.himenaeos:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$12 -> com.volmit.wormholes.src.Cras:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$13 -> com.volmit.wormholes.src.pellentesque:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$14 -> com.volmit.wormholes.src.ut:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$15 -> com.volmit.wormholes.src.finibus:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$16 -> com.volmit.wormholes.src.fermentum:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$17 -> com.volmit.wormholes.src.augue:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$18 -> com.volmit.wormholes.src.erat:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$19 -> com.volmit.wormholes.src.Aenean:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$2 -> com.volmit.wormholes.src.blandit:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$20 -> com.volmit.wormholes.src.risus:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$21 -> com.volmit.wormholes.src.Fusce:
    void <init>(java.lang.String,int,char,int,boolean) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$22 -> com.volmit.wormholes.src.maximus:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$23 -> com.volmit.wormholes.src.ex:
    int[] $SwitchMap$com$volmit$wormholes$util$C -> chains
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.C$3 -> com.volmit.wormholes.src.porttitor:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$4 -> com.volmit.wormholes.src.nisi:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$5 -> com.volmit.wormholes.src.justo:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$6 -> com.volmit.wormholes.src.Suspendisse:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$7 -> com.volmit.wormholes.src.elementum:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$8 -> com.volmit.wormholes.src.mattis:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.C$9 -> com.volmit.wormholes.src.primis:
    void <init>(java.lang.String,int,char,int) -> <init>
    net.md_5.bungee.api.ChatColor asBungee() -> integrate
com.volmit.wormholes.util.CDou -> com.volmit.wormholes.src.cubilia:
    double number -> systems
    double max -> max
    void <init>(double) -> <init>
    com.volmit.wormholes.util.CDou set(double) -> dolor
    com.volmit.wormholes.util.CDou add(double) -> sit
    com.volmit.wormholes.util.CDou sub(double) -> amet
    double get() -> get
    void circ() -> monetize
com.volmit.wormholes.util.CNum -> com.volmit.wormholes.src.Curae:
    int number -> technologies
    int max -> max
    void <init>(int) -> <init>
    com.volmit.wormholes.util.CNum set(int) -> purus
    com.volmit.wormholes.util.CNum add(int) -> non
    com.volmit.wormholes.util.CNum sub(int) -> mi
    int get() -> get
    void circ() -> monetize
    int getMax() -> getMax
    void setMax(int) -> setMax
com.volmit.wormholes.util.CancellablePhantomEvent -> com.volmit.wormholes.src.habitant:
    boolean cancelled -> users
    void <init>() -> <init>
    boolean isCancelled() -> isCancelled
    void setCancelled(boolean) -> setCancelled
    void cancel() -> cancel
    void uncancel() -> morph
com.volmit.wormholes.util.ChunkPacketProcessor -> com.volmit.wormholes.src.morbi:
    int BYTES_PER_NIBBLE_PART -> vortals
    int CHUNK_SEGMENTS -> obfuscate
    int NIBBLES_REQUIRED -> star
    int BLOCK_ID_LENGHT -> see
    int DATA_LENGHT -> definition
    int BIOME_ARRAY_LENGTH -> show
    int chunkX -> chunkX
    int chunkZ -> chunkZ
    int chunkMask -> verb
    int extraMask -> confuse
    int chunkSectionNumber -> baffle
    int extraSectionNumber -> Relevance
    boolean hasContinous -> A
    int startIndex -> startIndex
    int size -> size
    byte[] data -> data
    org.bukkit.World world -> world
    void <init>() -> <init>
    com.volmit.wormholes.util.ChunkPacketProcessor fromMapPacket(com.comphenix.protocol.events.PacketContainer,org.bukkit.World) -> Lorem
    void process(com.volmit.wormholes.util.ChunkPacketProcessor$ChunkletProcessor) -> Lorem
    int getSkylightCount() -> optimize
    int getOffset(int) -> euismod
    void translate(com.volmit.wormholes.util.ChunkPacketProcessor$ChunkletProcessor) -> ipsum
    boolean isChunkLoaded(org.bukkit.World,int,int) -> Lorem
com.volmit.wormholes.util.ChunkPacketProcessor$1 -> com.volmit.wormholes.src.senectus:
com.volmit.wormholes.util.ChunkPacketProcessor$ChunkOffsets -> com.volmit.wormholes.src.netus:
    int blockIdOffset -> ZComplexity
    int dataOffset -> Length
    int lightOffset -> lists
    int skylightOffset -> blocks
    int extraOffset -> Common
    void <init>(int,int,int,int,int) -> <init>
    void incrementIdIndex() -> orchestrate
    void incrementExtraIndex() -> productize
    int getBlockIdOffset() -> recontextualize
    int getDataOffset() -> redefine
    int getLightOffset() -> reintermediate
    int getSkylightOffset() -> reinvent
    boolean hasSkylightOffset() -> repurpose
    int getExtraOffset() -> revolutionize
    boolean hasExtraOffset() -> scale
    void <init>(int,int,int,int,int,com.volmit.wormholes.util.ChunkPacketProcessor$1) -> <init>
    void access$100(com.volmit.wormholes.util.ChunkPacketProcessor$ChunkOffsets) -> Lorem
    void access$200(com.volmit.wormholes.util.ChunkPacketProcessor$ChunkOffsets) -> ipsum
com.volmit.wormholes.util.ChunkPacketProcessor$ChunkletProcessor -> com.volmit.wormholes.src.fames:
    void processChunklet(org.bukkit.Location,byte[],com.volmit.wormholes.util.ChunkPacketProcessor$ChunkOffsets) -> Lorem
    void processBiomeArray(org.bukkit.Location,byte[],int) -> Lorem
com.volmit.wormholes.util.Chunklet -> com.volmit.wormholes.src.pharetra:
    int x -> x
    int z -> z
    org.bukkit.World world -> world
    void <init>(int,int,org.bukkit.World) -> <init>
    com.volmit.wormholes.util.GList inThisChunk() -> seize
    void <init>(org.bukkit.Location) -> <init>
    com.volmit.wormholes.util.GList getPlayers() -> strategize
    com.volmit.wormholes.util.GList getEntities() -> Aenean
    org.bukkit.Chunk getChunk() -> getChunk
    boolean contains(org.bukkit.Location) -> elit
    boolean contains(org.bukkit.entity.Player) -> Pellentesque
    boolean contains(org.bukkit.Chunk) -> Lorem
    org.bukkit.Location getMin() -> streamline
    org.bukkit.Location getMax() -> syndicate
    java.util.Iterator iterator() -> iterator
    com.volmit.wormholes.util.Chunklet getRelative(com.volmit.wormholes.util.Direction) -> Lorem
    com.volmit.wormholes.util.GList getNeighbors() -> synergize
    com.volmit.wormholes.util.GList getCircle(int) -> Pellentesque
    boolean equals(java.lang.Object) -> equals
    com.volmit.wormholes.util.GList getBorder(int,com.volmit.wormholes.util.Direction) -> Lorem
    int getX() -> getX
    void setX(int) -> setX
    int getZ() -> getZ
    void setZ(int) -> setZ
    org.bukkit.World getWorld() -> getWorld
    void setWorld(org.bukkit.World) -> setWorld
com.volmit.wormholes.util.ChunkletMesh -> com.volmit.wormholes.src.potenti:
    org.bukkit.World world -> world
    com.volmit.wormholes.util.GMap chunklets -> Informal
    com.volmit.wormholes.util.GList all -> Synonyms
    void <init>(org.bukkit.World) -> <init>
    void rebuildReferences() -> synthesize
    com.volmit.wormholes.util.GList getChunklets() -> target
    boolean contains(org.bukkit.Location) -> elit
    boolean contains(org.bukkit.entity.Player) -> Pellentesque
    boolean contains(org.bukkit.entity.Entity) -> Morbi
    com.volmit.wormholes.util.GList getPlayers() -> strategize
    com.volmit.wormholes.util.GList getEntities() -> Aenean
    void add(com.volmit.wormholes.util.Chunklet) -> Lorem
com.volmit.wormholes.util.Click -> com.volmit.wormholes.src.pretium:
    com.volmit.wormholes.util.Click LEFT -> for
    com.volmit.wormholes.util.Click RIGHT -> b
    com.volmit.wormholes.util.Click MIDDLE -> c
    com.volmit.wormholes.util.Click SHIFT_LEFT -> d
    com.volmit.wormholes.util.Click SHIFT_RIGHT -> g
    com.volmit.wormholes.util.Click[] $VALUES -> h
    com.volmit.wormholes.util.Click[] values() -> values
    com.volmit.wormholes.util.Click valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.volmit.wormholes.util.Click fromClickType(org.bukkit.event.inventory.ClickType) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Click$1 -> com.volmit.wormholes.src.dui:
    int[] $SwitchMap$org$bukkit$event$inventory$ClickType -> j
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ClustAsyncAlreadyLoadingException -> com.volmit.wormholes.src.massa:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
com.volmit.wormholes.util.ClustAsyncException -> com.volmit.wormholes.src.gravida:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
com.volmit.wormholes.util.ClustException -> com.volmit.wormholes.src.id:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
com.volmit.wormholes.util.Cluster -> com.volmit.wormholes.src.fringilla:
    long serialVersionUID -> serialVersionUID
    com.volmit.wormholes.util.DataCluster$ClusterType type -> k
    java.lang.Double value -> l
    void <init>(com.volmit.wormholes.util.DataCluster$ClusterType,java.lang.Double) -> <init>
    com.volmit.wormholes.util.DataCluster$ClusterType getType() -> transform
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.util.ClusterBoolean -> com.volmit.wormholes.src.Nulla:
    long serialVersionUID -> serialVersionUID
    void <init>(boolean) -> <init>
    boolean get() -> get
    void set(boolean) -> set
com.volmit.wormholes.util.ClusterDouble -> com.volmit.wormholes.src.facilisi:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Double) -> <init>
    double get() -> get
    void set(double) -> set
com.volmit.wormholes.util.ClusterInteger -> com.volmit.wormholes.src.libero:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Integer) -> <init>
    int get() -> get
    void set(int) -> set
com.volmit.wormholes.util.ClusterLong -> com.volmit.wormholes.src.condimentum:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.Long) -> <init>
    long get() -> get
    void set(long) -> set
com.volmit.wormholes.util.ClusterString -> com.volmit.wormholes.src.interdum:
    long serialVersionUID -> serialVersionUID
    java.lang.String string -> string
    void <init>(java.lang.String) -> <init>
    java.lang.String get() -> get
    void set(java.lang.String) -> set
com.volmit.wormholes.util.ClusterStringList -> com.volmit.wormholes.src.dapibus:
    long serialVersionUID -> serialVersionUID
    java.util.List strings -> m
    void <init>(java.util.List) -> <init>
    java.util.List get() -> transition
    void set(java.util.List) -> Lorem
com.volmit.wormholes.util.ColdLoad -> com.volmit.wormholes.src.sollicitudin:
com.volmit.wormholes.util.ColoredParticleEffect -> com.volmit.wormholes.src.Aliquam:
    org.bukkit.Color color -> n
    boolean alpha -> o
    void <init>(org.bukkit.Color) -> <init>
    com.volmit.wormholes.util.GList getEffects() -> unleash
    void play(org.bukkit.Location) -> mi
    void addEffect(com.volmit.wormholes.util.VisualEffect) -> Lorem
    org.bukkit.Color getColor() -> getColor
    void setColor(org.bukkit.Color) -> setColor
    boolean isAlpha() -> utilize
    void setAlpha(boolean) -> elit
com.volmit.wormholes.util.ColoredString -> com.volmit.wormholes.src.auctor:
    com.volmit.wormholes.util.C c -> p
    java.lang.String s -> q
    void <init>(com.volmit.wormholes.util.C,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    com.volmit.wormholes.util.C getC() -> visualize
    void setC(com.volmit.wormholes.util.C) -> Lorem
    java.lang.String getS() -> whiteboard
    void setS(java.lang.String) -> non
com.volmit.wormholes.util.Comment -> com.volmit.wormholes.src.Curabitur:
    java.lang.String value() -> value
com.volmit.wormholes.util.CompoundTag -> com.volmit.wormholes.src.feugiat:
    java.util.Map value -> r
    void <init>(java.lang.String,java.util.Map) -> <init>
    java.util.Map getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.Config -> com.volmit.wormholes.src.efficitur:
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
com.volmit.wormholes.util.Configurable -> com.volmit.wormholes.src.laoreet:
    void onNewConfig() -> B2B
    void onReadConfig() -> B2C
    com.volmit.wormholes.util.DataCluster getConfiguration() -> end
    java.lang.String getCodeName() -> best
com.volmit.wormholes.util.ConfigurableController -> com.volmit.wormholes.src.nunc:
    java.lang.String codeName -> s
    com.volmit.wormholes.util.DataCluster cc -> t
    void <init>(com.volmit.wormholes.util.Controllable,java.lang.String) -> <init>
    void onNewConfig() -> B2B
    void onReadConfig() -> B2C
    com.volmit.wormholes.util.DataCluster getConfiguration() -> end
    java.lang.String getCodeName() -> best
    void onStart() -> onStart
    void onStop() -> Morbi
com.volmit.wormholes.util.ConfigurableObject -> com.volmit.wormholes.src.venenatis:
    java.lang.String codeName -> s
    com.volmit.wormholes.util.DataCluster cc -> t
    void <init>(java.lang.String) -> <init>
    void onNewConfig() -> B2B
    void onReadConfig() -> B2C
    com.volmit.wormholes.util.DataCluster getConfiguration() -> end
    java.lang.String getCodeName() -> best
com.volmit.wormholes.util.ConfigurationHandler -> com.volmit.wormholes.src.rutrum:
    void <init>() -> <init>
    void toFields(com.volmit.wormholes.util.Configurable) -> Lorem
    void fromFields(com.volmit.wormholes.util.Configurable) -> ipsum
    boolean isValidType(java.lang.Class) -> ipsum
    void read(java.io.File,com.volmit.wormholes.util.Configurable) -> Lorem
    void compatRead(java.io.File,com.volmit.wormholes.util.Configurable) -> ipsum
    void fastRead(java.io.File,com.volmit.wormholes.util.Configurable) -> dolor
    void fastWrite(java.io.File,com.volmit.wormholes.util.Configurable) -> sit
    void save(java.io.File,com.volmit.wormholes.util.Configurable) -> amet
    void savenc(java.io.File,com.volmit.wormholes.util.Configurable) -> consectetur
com.volmit.wormholes.util.ConfigurationHandler$1 -> com.volmit.wormholes.src.mauris:
    com.volmit.wormholes.util.Configurable val$c -> u
    void <init>(com.volmit.wormholes.util.Configurable) -> <init>
    void run() -> run
com.volmit.wormholes.util.ConfigurationHandler$2 -> com.volmit.wormholes.src.lobortis:
    com.volmit.wormholes.util.Configurable val$c -> u
    java.io.File val$config -> v
    void <init>(com.volmit.wormholes.util.Configurable,java.io.File) -> <init>
    void sync() -> sync
com.volmit.wormholes.util.ConfigurationHandler$2$1 -> com.volmit.wormholes.src.bibendum:
    com.volmit.wormholes.util.ConfigurationHandler$2 this$0 -> w
    void <init>(com.volmit.wormholes.util.ConfigurationHandler$2) -> <init>
    void async() -> efficitur
com.volmit.wormholes.util.ConfigurationHandler$3 -> com.volmit.wormholes.src.Orci:
    com.volmit.wormholes.util.Configurable val$c -> u
    java.io.File val$config -> v
    void <init>(com.volmit.wormholes.util.Configurable,java.io.File) -> <init>
    void sync() -> sync
com.volmit.wormholes.util.ConfigurationHandler$3$1 -> com.volmit.wormholes.src.natoque:
    com.volmit.wormholes.util.ConfigurationHandler$3 this$0 -> B
    void <init>(com.volmit.wormholes.util.ConfigurationHandler$3) -> <init>
    void async() -> efficitur
com.volmit.wormholes.util.Controllable -> com.volmit.wormholes.src.penatibus:
    void tick() -> tick
    void start() -> start
    void stop() -> stop
    com.volmit.wormholes.util.Controllable getParent() -> of
    com.volmit.wormholes.util.GList getChildren() -> breed
    java.lang.String getName() -> getName
    boolean isRoot() -> isRoot
    boolean isActive() -> isActive
    void register(com.volmit.wormholes.util.Controllable) -> Lorem
    boolean isTicked() -> bleeding
    double getTickRate() -> edge
    com.volmit.wormholes.util.TickHandler getTickHandler() -> bricks
com.volmit.wormholes.util.ControllablePlugin -> com.volmit.wormholes.src.magnis:
    com.volmit.wormholes.util.Controller base -> C
    void <init>() -> <init>
    void onLoad() -> onLoad
    void onEnable() -> onEnable
    void destroyOldThreads() -> and
    void readCurrentTick() -> clicks
    void setupTicker() -> mortar
    void onStart() -> onStart
    void onStop() -> Morbi
    void onTick() -> pulvinar
    void onDisable() -> onDisable
    void tick() -> tick
    void onConstruct() -> Vestibulum
    void start() -> start
    void stop() -> stop
    com.volmit.wormholes.util.Controllable getParent() -> of
    com.volmit.wormholes.util.GList getChildren() -> breed
    boolean isRoot() -> isRoot
    boolean isActive() -> isActive
    void register(com.volmit.wormholes.util.Controllable) -> Lorem
    boolean isTicked() -> bleeding
    double getTickRate() -> edge
    com.volmit.wormholes.util.TickHandler getTickHandler() -> bricks
    void preStart() -> collaborative
    boolean findTicked() -> compelling
    double findTickValue() -> cross
    com.volmit.wormholes.util.TickHandler findTickHandle() -> platform
com.volmit.wormholes.util.ControllablePlugin$1 -> com.volmit.wormholes.src.dis:
    com.volmit.wormholes.util.ControllablePlugin this$0 -> D
    void <init>(com.volmit.wormholes.util.ControllablePlugin,com.volmit.wormholes.util.Controllable) -> <init>
    void onStop() -> Morbi
    void onStart() -> onStart
    void onTick() -> pulvinar
com.volmit.wormholes.util.ControllablePlugin$2 -> com.volmit.wormholes.src.parturient:
    com.volmit.wormholes.util.ControllablePlugin this$0 -> D
    void <init>(com.volmit.wormholes.util.ControllablePlugin) -> <init>
    void run() -> run
com.volmit.wormholes.util.Controller -> com.volmit.wormholes.src.montes:
    com.volmit.wormholes.util.Controllable parent -> E
    com.volmit.wormholes.util.GList children -> F
    java.lang.String name -> name
    boolean active -> active
    boolean root -> G
    boolean ticked -> H
    double tickRate -> I
    com.volmit.wormholes.util.TickHandler tickHandle -> J
    com.volmit.wormholes.util.Task task -> K
    com.volmit.wormholes.util.D d -> L
    void <init>(com.volmit.wormholes.util.Controllable) -> <init>
    void i(java.lang.String[]) -> ipsum
    void s(java.lang.String[]) -> dolor
    void f(java.lang.String[]) -> sit
    void w(java.lang.String[]) -> amet
    void v(java.lang.String[]) -> consectetur
    void o(java.lang.String[]) -> adipiscing
    void loadCluster(com.volmit.wormholes.util.Configurable) -> dolor
    void saveCluster(com.volmit.wormholes.util.Configurable) -> sit
    void saveCluster(com.volmit.wormholes.util.Configurable,java.lang.String) -> Lorem
    void loadCluster(com.volmit.wormholes.util.Configurable,java.lang.String) -> ipsum
    void preStart() -> collaborative
    boolean findTicked() -> compelling
    double findTickValue() -> cross
    com.volmit.wormholes.util.TickHandler findTickHandle() -> platform
    boolean findAutoRegister() -> media
    void activate() -> activate
    void deactivate() -> deactivate
    void tick() -> tick
    void start() -> start
    void stop() -> stop
    void onTick() -> pulvinar
    void onStart() -> onStart
    void onStop() -> Morbi
    com.volmit.wormholes.util.Controllable getParent() -> of
    com.volmit.wormholes.util.GList getChildren() -> breed
    java.lang.String getName() -> getName
    boolean isRoot() -> isRoot
    boolean isActive() -> isActive
    void register(com.volmit.wormholes.util.Controllable) -> Lorem
    boolean isTicked() -> bleeding
    double getTickRate() -> edge
    com.volmit.wormholes.util.TickHandler getTickHandler() -> bricks
com.volmit.wormholes.util.Controller$1 -> com.volmit.wormholes.src.nascetur:
    java.io.File val$abase -> M
    com.volmit.wormholes.util.Configurable val$c -> u
    com.volmit.wormholes.util.Controller this$0 -> N
    void <init>(com.volmit.wormholes.util.Controller,java.io.File,com.volmit.wormholes.util.Configurable) -> <init>
    void async() -> efficitur
com.volmit.wormholes.util.Controller$2 -> com.volmit.wormholes.src.ridiculus:
    java.io.File val$b -> O
    com.volmit.wormholes.util.Configurable val$c -> u
    com.volmit.wormholes.util.Controller this$0 -> N
    void <init>(com.volmit.wormholes.util.Controller,java.io.File,com.volmit.wormholes.util.Configurable) -> <init>
    void sync() -> sync
com.volmit.wormholes.util.Controller$3 -> com.volmit.wormholes.src.mus:
    com.volmit.wormholes.util.Controller this$0 -> N
    void <init>(com.volmit.wormholes.util.Controller,int) -> <init>
    void run() -> run
com.volmit.wormholes.util.Controller$4 -> com.volmit.wormholes.src.Interdum:
    com.volmit.wormholes.util.Controller this$0 -> N
    void <init>(com.volmit.wormholes.util.Controller,int) -> <init>
    void run() -> run
com.volmit.wormholes.util.Controller$5 -> com.volmit.wormholes.src.aggregate:
    int[] $SwitchMap$com$volmit$wormholes$util$TickHandler -> P
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Cuboid -> com.volmit.wormholes.src.architect:
    java.lang.String worldName -> Q
    int x1 -> R
    int y1 -> S
    int z1 -> T
    int x2 -> U
    int y2 -> V
    int z2 -> W
    void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    int depth(com.volmit.wormholes.util.Axis) -> Lorem
    void set(org.bukkit.Location,org.bukkit.Location) -> ipsum
    boolean hasPlayers() -> customized
    com.volmit.wormholes.util.GList getPlayers() -> strategize
    com.volmit.wormholes.util.GList getEntities() -> Aenean
    void <init>(org.bukkit.Location) -> <init>
    com.volmit.wormholes.util.Cuboid e(com.volmit.wormholes.util.Direction,int) -> Lorem
    com.volmit.wormholes.util.Cuboid e(com.volmit.wormholes.util.Axis,int) -> Lorem
    void <init>(com.volmit.wormholes.util.Cuboid) -> <init>
    void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    void <init>(java.util.Map) -> <init>
    java.util.Map serialize() -> serialize
    com.volmit.wormholes.util.Cuboid flatten(int) -> at
    org.bukkit.Location getLowerNE() -> cutting
    org.bukkit.Location getUpperSW() -> distributed
    org.bukkit.Location getCenter() -> getCenter
    org.bukkit.World getWorld() -> getWorld
    int getSizeX() -> dot
    int getSizeY() -> com
    int getSizeZ() -> dynamic
    com.volmit.wormholes.util.Dimension getDimension() -> business
    int getLowerX() -> efficient
    int getLowerY() -> enterprise
    int getLowerZ() -> extensible
    int getUpperX() -> frictionless
    int getUpperY() -> front
    int getUpperZ() -> global
    org.bukkit.block.Block[] corners() -> granular
    com.volmit.wormholes.util.Cuboid expand(com.volmit.wormholes.util.Cuboid$CuboidDirection,int) -> Lorem
    com.volmit.wormholes.util.Cuboid shift(com.volmit.wormholes.util.Cuboid$CuboidDirection,int) -> ipsum
    com.volmit.wormholes.util.Cuboid outset(com.volmit.wormholes.util.Cuboid$CuboidDirection,int) -> dolor
    com.volmit.wormholes.util.Cuboid inset(com.volmit.wormholes.util.Cuboid$CuboidDirection,int) -> sit
    boolean contains(int,int,int) -> Lorem
    boolean contains(org.bukkit.block.Block) -> Lorem
    boolean contains(org.bukkit.Location) -> elit
    int volume() -> holistic
    byte averageLightLevel() -> impactful
    com.volmit.wormholes.util.Cuboid contract() -> innovative
    com.volmit.wormholes.util.Cuboid contract(com.volmit.wormholes.util.Cuboid$CuboidDirection) -> Lorem
    com.volmit.wormholes.util.Cuboid getFace(com.volmit.wormholes.util.Cuboid$CuboidDirection) -> ipsum
    boolean containsOnly(org.bukkit.Material) -> Lorem
    com.volmit.wormholes.util.Cuboid getBoundingCuboid(com.volmit.wormholes.util.Cuboid) -> ipsum
    org.bukkit.block.Block getRelativeBlock(int,int,int) -> ipsum
    org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> Lorem
    java.util.List getChunks() -> integrated
    void fill(int,byte) -> Lorem
    java.util.Iterator iterator() -> iterator
    com.volmit.wormholes.util.Cuboid clone() -> interactive
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Object clone() -> clone
com.volmit.wormholes.util.Cuboid$1 -> com.volmit.wormholes.src.benchmark:
    com.volmit.wormholes.util.Cuboid this$0 -> X
    void <init>(com.volmit.wormholes.util.Cuboid) -> <init>
    org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> pulvinar
    java.lang.Object onAdapt(java.lang.Object) -> ipsum
com.volmit.wormholes.util.Cuboid$2 -> com.volmit.wormholes.src.brand:
    int[] $SwitchMap$com$volmit$wormholes$util$Axis -> Y
    int[] $SwitchMap$com$volmit$wormholes$util$Cuboid$CuboidDirection -> Z
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Cuboid$CuboidDirection -> com.volmit.wormholes.src.cultivate:
    com.volmit.wormholes.util.Cuboid$CuboidDirection North -> aa
    com.volmit.wormholes.util.Cuboid$CuboidDirection East -> ab
    com.volmit.wormholes.util.Cuboid$CuboidDirection South -> ae
    com.volmit.wormholes.util.Cuboid$CuboidDirection West -> af
    com.volmit.wormholes.util.Cuboid$CuboidDirection Up -> ag
    com.volmit.wormholes.util.Cuboid$CuboidDirection Down -> ah
    com.volmit.wormholes.util.Cuboid$CuboidDirection Horizontal -> ai
    com.volmit.wormholes.util.Cuboid$CuboidDirection Vertical -> aj
    com.volmit.wormholes.util.Cuboid$CuboidDirection Both -> ak
    com.volmit.wormholes.util.Cuboid$CuboidDirection Unknown -> al
    com.volmit.wormholes.util.Cuboid$CuboidDirection[] $VALUES -> am
    com.volmit.wormholes.util.Cuboid$CuboidDirection[] values() -> values
    com.volmit.wormholes.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.volmit.wormholes.util.Cuboid$CuboidDirection opposite() -> intuitive
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Cuboid$CuboidIterator -> com.volmit.wormholes.src.deliver:
    org.bukkit.World w -> an
    int baseX -> ao
    int baseY -> ap
    int baseZ -> aq
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> ar
    int sizeY -> as
    int sizeZ -> au
    com.volmit.wormholes.util.Cuboid this$0 -> X
    void <init>(com.volmit.wormholes.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    boolean hasNext() -> hasNext
    org.bukkit.block.Block next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
com.volmit.wormholes.util.CuboidException -> com.volmit.wormholes.src.deploy:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.util.CustomGZIPOutputStream -> com.volmit.wormholes.src.disintermediate:
    void <init>(java.io.OutputStream) -> <init>
    void setLevel(int) -> setLevel
com.volmit.wormholes.util.D -> com.volmit.wormholes.src.drive:
    boolean rdebug -> av
    boolean fool -> aw
    java.lang.String name -> name
    com.volmit.wormholes.util.GList listeners -> ax
    com.volmit.wormholes.util.GList queue -> ay
    com.volmit.wormholes.util.GList globalListeners -> az
    java.lang.Boolean silent -> aA
    void d(java.lang.Object,java.lang.String) -> Lorem
    void d(java.lang.Class,java.lang.String) -> Lorem
    void <init>(java.lang.String) -> <init>
    com.volmit.wormholes.util.GList getListeners() -> killer
    com.volmit.wormholes.util.GList getGlobalListeners() -> leading
    void log(com.volmit.wormholes.util.D$DispatchType,java.lang.String,java.lang.String[]) -> Lorem
    void flush() -> flush
    void info(java.lang.String[]) -> elit
    void i(java.lang.String[]) -> ipsum
    void success(java.lang.String[]) -> Morbi
    void s(java.lang.String[]) -> dolor
    void failure(java.lang.String[]) -> pulvinar
    void f(java.lang.String[]) -> sit
    void warning(java.lang.String[]) -> vulputate
    void w(java.lang.String[]) -> amet
    void verbose(java.lang.String[]) -> dictum
    void v(java.lang.String[]) -> consectetur
    void overbose(java.lang.String[]) -> Vestibulum
    void o(java.lang.String[]) -> adipiscing
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.Boolean isSilent() -> magnetic
    void setSilent(java.lang.Boolean) -> Lorem
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.D$DispatchType -> com.volmit.wormholes.src.e:
    com.volmit.wormholes.util.D$DispatchType INFO -> aB
    com.volmit.wormholes.util.D$DispatchType SUCCESS -> aC
    com.volmit.wormholes.util.D$DispatchType FAILURE -> aD
    com.volmit.wormholes.util.D$DispatchType WARNING -> aE
    com.volmit.wormholes.util.D$DispatchType VERBOSE -> aF
    com.volmit.wormholes.util.D$DispatchType OVERBOSE -> aG
    com.volmit.wormholes.util.D$DispatchType[] $VALUES -> aH
    com.volmit.wormholes.util.D$DispatchType[] values() -> values
    com.volmit.wormholes.util.D$DispatchType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.DBoolean -> com.volmit.wormholes.src.enable:
    java.lang.Boolean integer -> aI
    void <init>() -> <init>
    void <init>(java.lang.Boolean) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Boolean get() -> critical
com.volmit.wormholes.util.DByte -> com.volmit.wormholes.src.embrace:
    java.lang.Byte integer -> aJ
    void <init>() -> <init>
    void <init>(java.lang.Byte) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Byte get() -> generation
com.volmit.wormholes.util.DBytes -> com.volmit.wormholes.src.empower:
    byte[] integer -> aK
    void <init>() -> <init>
    void <init>(byte[]) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    byte[] get() -> get
com.volmit.wormholes.util.DChar -> com.volmit.wormholes.src.engage:
    java.lang.Character integer -> aL
    void <init>() -> <init>
    void <init>(java.lang.Character) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Character get() -> one
com.volmit.wormholes.util.DDouble -> com.volmit.wormholes.src.engineer:
    java.lang.Double integer -> aM
    void <init>() -> <init>
    void <init>(java.lang.Double) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Double get() -> source
com.volmit.wormholes.util.DFloat -> com.volmit.wormholes.src.enhance:
    java.lang.Float integer -> aN
    void <init>() -> <init>
    void <init>(java.lang.Float) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Float get() -> out
com.volmit.wormholes.util.DInteger -> com.volmit.wormholes.src.envisioneer:
    java.lang.Integer integer -> aO
    void <init>() -> <init>
    void <init>(java.lang.Integer) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Integer get() -> the
com.volmit.wormholes.util.DLong -> com.volmit.wormholes.src.evolve:
    java.lang.Long integer -> aP
    void <init>() -> <init>
    void <init>(java.lang.Long) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Long get() -> box
com.volmit.wormholes.util.DOP -> com.volmit.wormholes.src.expedite:
    java.lang.String type -> type
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
    java.lang.String getType() -> getType
com.volmit.wormholes.util.DShort -> com.volmit.wormholes.src.exploit:
    java.lang.Short integer -> aQ
    void <init>() -> <init>
    void <init>(java.lang.Short) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.Short get() -> plug
com.volmit.wormholes.util.DString -> com.volmit.wormholes.src.extend:
    java.lang.String string -> string
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    java.lang.String get() -> get
com.volmit.wormholes.util.DStringList -> com.volmit.wormholes.src.facilitate:
    com.volmit.wormholes.util.GList string -> aR
    void <init>() -> <init>
    void <init>(com.volmit.wormholes.util.GList) -> <init>
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    com.volmit.wormholes.util.GList get() -> augue
com.volmit.wormholes.util.DataCluster -> com.volmit.wormholes.src.generate:
    java.util.Map data -> data
    java.util.Map comments -> aS
    long perm -> aT
    long permX -> aU
    long totalSize -> aV
    long totalNodes -> aW
    long totalClusters -> aX
    long bytes -> aY
    long nodes -> aZ
    void <init>() -> <init>
    void <init>(com.volmit.wormholes.util.JSONObject) -> <init>
    void fromDataPack(com.volmit.wormholes.util.DataPack) -> Lorem
    com.volmit.wormholes.util.DataPack toDataPack() -> play
    void <init>(org.bukkit.configuration.file.FileConfiguration) -> <init>
    void <init>(byte[]) -> <init>
    void addYaml(org.bukkit.configuration.file.FileConfiguration) -> Lorem
    void <init>(java.util.Map) -> <init>
    void comment(java.lang.String,java.lang.String) -> sit
    byte[] compress() -> in
    void addCompressed(byte[]) -> Lorem
    com.volmit.wormholes.util.JSONObject toJSON() -> proactive
    com.volmit.wormholes.util.GMap makeNodes() -> real
    void addJson(com.volmit.wormholes.util.JSONObject) -> Lorem
    void clear() -> clear
    long byteSize() -> time
    long byteSize(java.lang.String) -> mi
    boolean hasComment(java.lang.String) -> euismod
    java.lang.String getComment(java.lang.String) -> Pellentesque
    java.util.List getComments(java.lang.String) -> at
    com.volmit.wormholes.util.GSet getRoots() -> revolutionary
    com.volmit.wormholes.util.GSet getRoots(java.lang.String) -> iaculis
    com.volmit.wormholes.util.DataCluster crop(java.lang.String) -> urna
    int size() -> size
    com.volmit.wormholes.util.GList keys() -> rich
    com.volmit.wormholes.util.GList toLines(boolean) -> Morbi
    org.bukkit.configuration.file.FileConfiguration toYaml() -> robust
    boolean isString(java.lang.String) -> isString
    boolean isStringList(java.lang.String) -> Proin
    boolean isInteger(java.lang.String) -> ac
    boolean isDouble(java.lang.String) -> isDouble
    boolean isLong(java.lang.String) -> isLong
    boolean isBoolean(java.lang.String) -> isBoolean
    boolean contains(java.lang.String,com.volmit.wormholes.util.DataCluster$ClusterType) -> Lorem
    void trySet(java.lang.String,java.lang.Object,java.lang.String) -> Lorem
    void trySet(java.lang.String,java.lang.Object) -> Lorem
    void set(java.lang.String,int) -> dolor
    void set(java.lang.String,long) -> Lorem
    void set(java.lang.String,double) -> Lorem
    void set(java.lang.String,boolean) -> Lorem
    void set(java.lang.String,java.lang.String) -> set
    void set(java.lang.String,java.util.List) -> Lorem
    void set(java.lang.String,com.volmit.wormholes.util.MetaObject) -> Lorem
    com.volmit.wormholes.util.MetaObject getObject(java.lang.String,java.lang.Class) -> Lorem
    void set(java.lang.String,java.lang.Enum) -> Lorem
    java.lang.Enum getEnum(java.lang.String,java.lang.Class) -> ipsum
    void set(java.lang.String,int,java.lang.String) -> Lorem
    void set(java.lang.String,long,java.lang.String) -> Lorem
    void set(java.lang.String,double,java.lang.String) -> Lorem
    void set(java.lang.String,boolean,java.lang.String) -> Lorem
    void set(java.lang.String,java.lang.String,java.lang.String) -> Lorem
    void set(java.lang.String,java.util.List,java.lang.String) -> Lorem
    java.lang.Boolean getBoolean(java.lang.String) -> getBoolean
    void add(com.volmit.wormholes.util.DataCluster,java.lang.String) -> Lorem
    void add(com.volmit.wormholes.util.DataCluster) -> sit
    java.lang.Long getLong(java.lang.String) -> getLong
    java.lang.Integer getInt(java.lang.String) -> enim
    java.lang.Double getDouble(java.lang.String) -> getDouble
    java.lang.String getString(java.lang.String) -> getString
    java.util.List getStringList(java.lang.String) -> getStringList
    boolean contains(java.lang.String) -> contains
    void remove(java.lang.String) -> remove
    java.lang.Object getAbstract(java.lang.String) -> posuere
    com.volmit.wormholes.util.Cluster get(java.lang.String) -> molestie
    com.volmit.wormholes.util.DataCluster$ClusterType getType(java.lang.String) -> odio
    java.util.Map getData() -> getData
    void setData(java.util.Map) -> setData
    com.volmit.wormholes.util.DataCluster copy() -> scalable
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.DataCluster$ClusterType -> com.volmit.wormholes.src.grow:
    com.volmit.wormholes.util.DataCluster$ClusterType INTEGER -> ba
    com.volmit.wormholes.util.DataCluster$ClusterType DOUBLE -> bb
    com.volmit.wormholes.util.DataCluster$ClusterType BOOLEAN -> bc
    com.volmit.wormholes.util.DataCluster$ClusterType STRING -> bd
    com.volmit.wormholes.util.DataCluster$ClusterType STRING_LIST -> be
    com.volmit.wormholes.util.DataCluster$ClusterType LONG -> bf
    com.volmit.wormholes.util.DataCluster$ClusterType[] $VALUES -> bg
    com.volmit.wormholes.util.DataCluster$ClusterType[] values() -> values
    com.volmit.wormholes.util.DataCluster$ClusterType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.DataController -> com.volmit.wormholes.src.harness:
    com.volmit.wormholes.util.GMap cache -> bh
    void <init>(com.volmit.wormholes.util.Controllable) -> <init>
    com.volmit.wormholes.util.Configurable get(java.lang.Object) -> dolor
    void load(java.lang.Object) -> sit
    void save(java.lang.Object) -> save
    com.volmit.wormholes.util.Configurable onLoad(java.lang.Object) -> amet
    void onSave(java.lang.Object) -> consectetur
    void saveAll() -> saveAll
    boolean contains(java.lang.Object) -> contains
    com.volmit.wormholes.util.GMap getCache() -> seamless
    java.lang.Object onLoad(java.lang.Object) -> adipiscing
    java.lang.Object get(java.lang.Object) -> get
com.volmit.wormholes.util.DataEntity -> com.volmit.wormholes.src.implement:
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
com.volmit.wormholes.util.DataFile -> com.volmit.wormholes.src.incentivize:
    void <init>() -> <init>
    void load(java.io.File) -> load
    void save(java.io.File) -> save
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
com.volmit.wormholes.util.DataHandle -> com.volmit.wormholes.src.incubate:
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    byte[] compress(byte[]) -> Morbi
    byte[] decompress(byte[]) -> pulvinar
com.volmit.wormholes.util.DataInput -> com.volmit.wormholes.src.innovate:
    void <init>() -> <init>
    void load(com.volmit.wormholes.util.DataCluster,java.io.File) -> ipsum
com.volmit.wormholes.util.DataInputtable -> com.volmit.wormholes.src.integrate:
    void load(com.volmit.wormholes.util.DataCluster,java.io.File) -> ipsum
com.volmit.wormholes.util.DataOutput -> com.volmit.wormholes.src.iterate:
    void <init>() -> <init>
    void save(com.volmit.wormholes.util.DataCluster,java.io.File) -> Lorem
com.volmit.wormholes.util.DataOutputtable -> com.volmit.wormholes.src.leverage:
    void save(com.volmit.wormholes.util.DataCluster,java.io.File) -> Lorem
com.volmit.wormholes.util.DataPack -> com.volmit.wormholes.src.matrix:
    com.volmit.wormholes.util.GList entities -> bi
    void <init>() -> <init>
    void put(com.volmit.wormholes.util.DataHandle) -> Lorem
    byte[] toData() -> Integer
    void fromData(byte[]) -> elit
    byte getDataType() -> mission
    com.volmit.wormholes.util.GList getEntities() -> Aenean
    java.lang.String toString() -> toString
com.volmit.wormholes.util.Database -> com.volmit.wormholes.src.maximize:
    java.sql.Connection connection -> bj
    void <init>() -> <init>
    java.sql.Connection openConnection() -> sexy
    boolean checkConnection() -> sticky
    java.sql.Connection getConnection() -> getConnection
    boolean closeConnection() -> strategic
    java.sql.ResultSet querySQL(java.lang.String) -> a
    int updateSQL(java.lang.String) -> facilisis
com.volmit.wormholes.util.DatabaseConnection -> com.volmit.wormholes.src.mesh:
    java.lang.String address -> address
    int port -> port
    java.lang.String database -> database
    java.lang.String username -> username
    java.lang.String password -> password
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String getAddress() -> getAddress
    void setAddress(java.lang.String) -> setAddress
    int getPort() -> getPort
    void setPort(int) -> setPort
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    java.lang.String getDatabase() -> getDatabase
    void setDatabase(java.lang.String) -> In
com.volmit.wormholes.util.Depend -> com.volmit.wormholes.src.monetize:
    com.volmit.wormholes.util.Depend VAULT -> bk
    com.volmit.wormholes.util.Depend FAWE -> bl
    com.volmit.wormholes.util.Depend WORLDEDIT -> bm
    com.volmit.wormholes.util.Depend PROTOLIB -> bn
    com.volmit.wormholes.util.Depend CITIZENS -> bo
    java.lang.String name -> name
    com.volmit.wormholes.util.Depend[] $VALUES -> bp
    com.volmit.wormholes.util.Depend[] values() -> values
    com.volmit.wormholes.util.Depend valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    boolean exists() -> exists
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Dialog -> com.volmit.wormholes.src.morph:
    com.volmit.wormholes.util.Dialog setCancellable(boolean) -> pulvinar
    void onCancelled(org.bukkit.entity.Player,com.volmit.wormholes.util.Window,com.volmit.wormholes.util.Dialog) -> Lorem
com.volmit.wormholes.util.Dimension -> com.volmit.wormholes.src.optimize:
    int width -> width
    int height -> height
    int depth -> depth
    void <init>(int,int,int) -> <init>
    void <init>(int,int) -> <init>
    com.volmit.wormholes.util.DimensionFace getPane() -> synergistic
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getDepth() -> getDepth
com.volmit.wormholes.util.DimensionFace -> com.volmit.wormholes.src.orchestrate:
    com.volmit.wormholes.util.DimensionFace X -> bq
    com.volmit.wormholes.util.DimensionFace Y -> br
    com.volmit.wormholes.util.DimensionFace Z -> bs
    com.volmit.wormholes.util.DimensionFace[] $VALUES -> bt
    com.volmit.wormholes.util.DimensionFace[] values() -> values
    com.volmit.wormholes.util.DimensionFace valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Direction -> com.volmit.wormholes.src.productize:
    com.volmit.wormholes.util.Direction U -> bu
    com.volmit.wormholes.util.Direction D -> bv
    com.volmit.wormholes.util.Direction N -> bw
    com.volmit.wormholes.util.Direction S -> bx
    com.volmit.wormholes.util.Direction E -> by
    com.volmit.wormholes.util.Direction W -> bz
    com.volmit.wormholes.util.GMap permute -> bA
    int x -> x
    int y -> y
    int z -> z
    com.volmit.wormholes.util.Cuboid$CuboidDirection f -> bB
    com.volmit.wormholes.util.Direction[] $VALUES -> bC
    com.volmit.wormholes.util.Direction[] values() -> values
    com.volmit.wormholes.util.Direction valueOf(java.lang.String) -> valueOf
    boolean isVertical() -> isVertical
    com.volmit.wormholes.util.Direction closest(org.bukkit.util.Vector,com.volmit.wormholes.util.Direction[]) -> Lorem
    org.bukkit.util.Vector toVector() -> toVector
    boolean isCrooked(com.volmit.wormholes.util.Direction) -> ipsum
    void <init>(java.lang.String,int,int,int,int,com.volmit.wormholes.util.Cuboid$CuboidDirection) -> <init>
    org.bukkit.util.Vector angle(org.bukkit.util.Vector,com.volmit.wormholes.util.Direction) -> Lorem
    com.volmit.wormholes.util.Direction reverse() -> transparent
    int x() -> turn
    int y() -> key
    int z() -> z
    com.volmit.wormholes.util.Cuboid$CuboidDirection f() -> ubiquitous
    com.volmit.wormholes.util.GList news() -> user
    com.volmit.wormholes.util.Direction getDirection(org.bukkit.util.Vector) -> amet
    com.volmit.wormholes.util.GList udnews() -> centric
    com.volmit.wormholes.util.Direction fromByte(byte) -> sit
    byte byteValue() -> byteValue
    void calculatePermutations() -> added
    com.volmit.wormholes.util.Axis getAxis() -> lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Direction$1 -> com.volmit.wormholes.src.recontextualize:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$10 -> com.volmit.wormholes.src.redefine:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$11 -> com.volmit.wormholes.src.reintermediate:
    int[] $SwitchMap$com$volmit$wormholes$util$Direction -> bD
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Direction$2 -> com.volmit.wormholes.src.reinvent:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$3 -> com.volmit.wormholes.src.repurpose:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$4 -> com.volmit.wormholes.src.revolutionize:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$5 -> com.volmit.wormholes.src.scale:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$6 -> com.volmit.wormholes.src.seize:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$7 -> com.volmit.wormholes.src.strategize:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$8 -> com.volmit.wormholes.src.streamline:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.Direction$9 -> com.volmit.wormholes.src.syndicate:
    void <init>(java.lang.String) -> <init>
    org.bukkit.util.Vector op(org.bukkit.util.Vector) -> sit
com.volmit.wormholes.util.DoubleTag -> com.volmit.wormholes.src.synergize:
    double value -> value
    void <init>(java.lang.String,double) -> <init>
    java.lang.Double getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.Element -> com.volmit.wormholes.src.synthesize:
    com.volmit.wormholes.util.Element addText(java.lang.String) -> hac
    org.bukkit.Material getType() -> getType
    com.volmit.wormholes.util.Element setType(org.bukkit.Material) -> ipsum
    java.lang.Byte getMetadata() -> vertical
    com.volmit.wormholes.util.Element setMetadata(java.lang.Byte) -> Lorem
    java.lang.String getTitle() -> getTitle
    com.volmit.wormholes.util.Element setTitle(java.lang.String) -> habitasse
    com.volmit.wormholes.util.GList getText() -> viral
    com.volmit.wormholes.util.Element setText(com.volmit.wormholes.util.GList) -> consectetur
    java.lang.Short getDurability() -> virtual
    com.volmit.wormholes.util.Element setDurability(java.lang.Short) -> Lorem
    com.volmit.wormholes.util.Slot getSlot() -> visionary
    com.volmit.wormholes.util.Element setSlot(com.volmit.wormholes.util.Slot) -> Lorem
    java.lang.Integer getCount() -> getCount
    com.volmit.wormholes.util.Element setCount(java.lang.Integer) -> Lorem
    com.volmit.wormholes.util.Element copy() -> web
    com.volmit.wormholes.util.Element setStack(org.bukkit.inventory.ItemStack) -> Lorem
    org.bukkit.inventory.ItemStack getStack() -> enabled
    void onClick(org.bukkit.entity.Player,com.volmit.wormholes.util.Click,com.volmit.wormholes.util.Window) -> Lorem
    void setGlowing(boolean) -> setGlowing
    boolean isGlowing() -> isGlowing
    java.util.UUID getId() -> getId
com.volmit.wormholes.util.EndTag -> com.volmit.wormholes.src.target:
    void <init>() -> <init>
    java.lang.Object getValue() -> getValue
    java.lang.String toString() -> toString
com.volmit.wormholes.util.EntityHologram -> com.volmit.wormholes.src.transform:
    org.bukkit.entity.Entity base -> bE
    org.bukkit.entity.Player exc -> bF
    void <init>(org.bukkit.entity.Entity) -> <init>
    org.bukkit.entity.Entity getHandle() -> wireless
    java.lang.String getDisplay() -> getDisplay
    void setDisplay(java.lang.String) -> setDisplay
    void setLocation(org.bukkit.Location) -> setLocation
    void setTextLocation(org.bukkit.Location) -> euismod
    void destroy() -> destroy
    org.bukkit.Location getLocation() -> getLocation
    void setExclusive(org.bukkit.entity.Player) -> at
    org.bukkit.entity.Player getExclusive() -> world
com.volmit.wormholes.util.EntityHud -> com.volmit.wormholes.src.transition:
    org.bukkit.entity.Entity track -> bG
    double maxDist -> bH
    void <init>(org.bukkit.entity.Player,org.bukkit.entity.Entity,double) -> <init>
    void <init>(org.bukkit.entity.Player,org.bukkit.entity.Entity) -> <init>
    org.bukkit.Location getBaseLocation() -> disintermediate
    void onUpdateInternal() -> embrace
com.volmit.wormholes.util.Execution -> com.volmit.wormholes.src.unleash:
    void <init>() -> <init>
com.volmit.wormholes.util.ExecutiveIterator -> com.volmit.wormholes.src.utilize:
    java.util.Iterator it -> bI
    java.lang.Boolean cancelled -> bJ
    java.lang.Object repeated -> bK
    java.lang.Integer size -> bL
    void <init>(java.util.List) -> <init>
    void <init>(java.util.Iterator) -> <init>
    void onIterate(java.lang.Object) -> elit
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    int size() -> size
    boolean isCancelled() -> isCancelled
    void cancel() -> cancel
com.volmit.wormholes.util.ExecutivePool -> com.volmit.wormholes.src.visualize:
    com.volmit.wormholes.util.GList tasks -> bM
    com.volmit.wormholes.util.Task task -> K
    void <init>(java.lang.Double,java.lang.Integer) -> <init>
    boolean isIdle() -> class
    void add(com.volmit.wormholes.util.ExecutiveIterator) -> Lorem
    int size() -> size
    void cancel() -> cancel
    boolean isRunning() -> isRunning
    com.volmit.wormholes.util.GList access$000(com.volmit.wormholes.util.ExecutivePool) -> Lorem
com.volmit.wormholes.util.ExecutivePool$1 -> com.volmit.wormholes.src.whiteboard:
    java.lang.Double val$limit -> bN
    com.volmit.wormholes.util.ExecutivePool this$0 -> bO
    void <init>(com.volmit.wormholes.util.ExecutivePool,int,java.lang.Double) -> <init>
    void run() -> run
com.volmit.wormholes.util.ExecutiveRunnable -> com.volmit.wormholes.src.B2B:
    java.lang.Object next -> bP
    java.lang.Boolean cancelled -> bJ
    java.lang.Boolean repeated -> bQ
    void <init>() -> <init>
    void run(java.lang.Object) -> Morbi
    void run() -> run
    java.lang.Object next() -> next
    void cancel() -> cancel
    boolean isCancelled() -> isCancelled
    void repeat() -> action
    boolean isRepeated() -> items
com.volmit.wormholes.util.ExecutiveTask -> com.volmit.wormholes.src.B2C:
    com.volmit.wormholes.util.ExecutiveIterator it -> bR
    java.lang.Double limit -> bS
    java.lang.Integer interval -> bT
    java.lang.Runnable finish -> bU
    com.volmit.wormholes.util.Task task -> K
    void <init>(com.volmit.wormholes.util.ExecutiveIterator,java.lang.Double,java.lang.Integer,java.lang.Runnable) -> <init>
    void cancel() -> cancel
    boolean isRunning() -> isRunning
    com.volmit.wormholes.util.ExecutiveIterator access$000(com.volmit.wormholes.util.ExecutiveTask) -> Lorem
    java.lang.Double access$100(com.volmit.wormholes.util.ExecutiveTask) -> ipsum
    java.lang.Runnable access$200(com.volmit.wormholes.util.ExecutiveTask) -> dolor
com.volmit.wormholes.util.ExecutiveTask$1 -> com.volmit.wormholes.src.back:
    com.volmit.wormholes.util.ExecutiveTask this$0 -> bV
    void <init>(com.volmit.wormholes.util.ExecutiveTask,int) -> <init>
    void run() -> run
com.volmit.wormholes.util.Explosion -> com.volmit.wormholes.src.end:
    float power -> bW
    boolean pushBlocks -> bX
    void <init>() -> <init>
    com.volmit.wormholes.util.Explosion power(float) -> ipsum
    com.volmit.wormholes.util.Explosion pushBlocks() -> applications
    void boom(org.bukkit.Location) -> Pellentesque
    void on(org.bukkit.event.entity.EntityExplodeEvent) -> Lorem
com.volmit.wormholes.util.F -> com.volmit.wormholes.src.best:
    java.text.NumberFormat NF -> bY
    java.text.DecimalFormat DF -> bZ
    java.lang.String[] NAMES -> ca
    java.math.BigInteger THOUSAND -> cb
    java.util.NavigableMap MAP -> cc
    void <init>() -> <init>
    java.lang.String b(int) -> b
    java.lang.String b(long) -> sit
    java.lang.String b(double) -> consectetur
    java.lang.String b(java.math.BigInteger) -> Lorem
    void instantiate() -> architectures
    java.lang.String color(java.lang.String) -> platea
    com.volmit.wormholes.util.GList colorSplit(java.lang.String) -> dictumst
    java.lang.String fileSize(long) -> amet
    java.lang.String memSize(long) -> consectetur
    java.lang.String stamp(long) -> adipiscing
    java.lang.String stamp() -> bandwidth
    java.lang.String ofSize(long,int) -> Lorem
    com.volmit.wormholes.util.GList wrap(java.lang.String) -> Nam
    com.volmit.wormholes.util.GList wrap(java.lang.String,int) -> sit
    java.lang.String trim(java.lang.String,int) -> amet
    java.lang.String cname(java.lang.String) -> metus
    com.volmit.wormholes.util.GList getParameters(java.lang.String,char) -> Lorem
    java.lang.String repeat(java.lang.String,int) -> repeat
    java.lang.String mem(long) -> elit
    java.lang.String memx(long) -> Morbi
    java.lang.String f(long) -> pulvinar
    java.lang.String f(int) -> iaculis
    java.lang.String f(double,int) -> Lorem
    java.lang.String fd(double,int) -> ipsum
    java.lang.String f(float,int) -> Lorem
    java.lang.String f(double) -> adipiscing
    java.lang.String f(float) -> dolor
    java.lang.String pc(double,int) -> dolor
    java.lang.String pc(float,int) -> ipsum
    java.lang.String pc(double) -> elit
    java.lang.String pc(float) -> sit
    java.lang.String pc(int,int,int) -> dolor
    java.lang.String pc(int,int) -> dolor
    java.lang.String pc(long,long,int) -> Lorem
    java.lang.String pc(long,long) -> Lorem
    java.lang.String msSeconds(long) -> vulputate
    java.lang.String msSeconds(long,int) -> ipsum
    java.lang.String nsMs(long) -> dictum
    java.lang.String nsMs(long,int) -> dolor
    java.lang.String nsMsd(long,int) -> sit
    com.volmit.wormholes.util.GList color(java.util.List) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.FM -> com.volmit.wormholes.src.of:
    void <init>() -> <init>
    void createAll(java.io.File,java.io.File) -> sit
    void parseAll(java.io.File,java.io.File) -> amet
    void create(java.io.File,java.io.File) -> consectetur
    void parse(java.io.File,java.io.File) -> adipiscing
com.volmit.wormholes.util.FOP -> com.volmit.wormholes.src.breed:
    void operate() -> channels
    void reverse() -> reverse
    void log(java.lang.String,java.lang.CharSequence[]) -> Lorem
com.volmit.wormholes.util.FU -> com.volmit.wormholes.src.bleeding:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    void <init>() -> <init>
    java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    void touch(java.io.File) -> touch
    java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    java.io.File toFile(java.net.URL) -> toFile
    java.io.File[] toFiles(java.net.URL[]) -> toFiles
    java.net.URL[] toURLs(java.io.File[]) -> toURLs
    void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    void copyFile(java.io.File,java.io.File) -> copyFile
    void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    void doCopyFile(java.io.File,java.io.File,boolean) -> Lorem
    void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    void doCopyDirectory(java.io.File,java.io.File,boolean) -> ipsum
    void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    void deleteDirectory(java.io.File) -> deleteDirectory
    void cleanDirectory(java.io.File) -> cleanDirectory
    boolean waitFor(java.io.File,int) -> waitFor
    java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    java.util.List readLines(java.io.File,java.lang.String) -> readLines
    void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    void forceDelete(java.io.File) -> forceDelete
    void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    void deleteDirectoryOnExit(java.io.File) -> amet
    void cleanDirectoryOnExit(java.io.File) -> consectetur
    void forceMkdir(java.io.File) -> forceMkdir
    long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    boolean isFileNewer(java.io.File,long) -> isFileNewer
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.FileHack -> com.volmit.wormholes.src.edge:
    com.volmit.wormholes.util.GList queue -> ay
    void <init>() -> <init>
    void queue(com.volmit.wormholes.util.FOP) -> Lorem
    void execute() -> execute
com.volmit.wormholes.util.FinalDouble -> com.volmit.wormholes.src.bricks:
    double i -> cd
    void <init>(double) -> <init>
    double get() -> get
    void set(double) -> set
    void add(double) -> add
    void sub(double) -> Morbi
com.volmit.wormholes.util.FinalFloat -> com.volmit.wormholes.src.and:
    float i -> i
    void <init>(float) -> <init>
    float get() -> get
    void set(float) -> set
    void add(float) -> add
    void sub(float) -> amet
com.volmit.wormholes.util.FinalInteger -> com.volmit.wormholes.src.clicks:
    int i -> i
    void <init>(int) -> <init>
    int get() -> get
    void set(int) -> set
    void add(int) -> add
    void sub(int) -> urna
com.volmit.wormholes.util.FinalLong -> com.volmit.wormholes.src.mortar:
    long i -> ce
    void <init>(long) -> <init>
    long get() -> get
    void set(long) -> set
    void add(long) -> add
    void sub(long) -> Vestibulum
com.volmit.wormholes.util.FinalString -> com.volmit.wormholes.src.collaborative:
    java.lang.String string -> string
    void <init>(java.lang.String) -> <init>
    java.lang.String get() -> get
    void set(java.lang.String) -> set
com.volmit.wormholes.util.FloatTag -> com.volmit.wormholes.src.compelling:
    float value -> value
    void <init>(java.lang.String,float) -> <init>
    java.lang.Float getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.Formula -> com.volmit.wormholes.src.cross:
    java.lang.String expression -> cf
    void <init>(java.lang.String) -> <init>
    double evaluate(java.lang.Double[]) -> Lorem
com.volmit.wormholes.util.ForwardedPluginMessage -> com.volmit.wormholes.src.platform:
    void <init>(org.bukkit.plugin.Plugin,java.lang.String,java.lang.String,java.io.ByteArrayOutputStream) -> <init>
    void <init>(org.bukkit.plugin.Plugin,java.lang.String,java.lang.String,byte[]) -> <init>
    void <init>(org.bukkit.plugin.Plugin,java.lang.String,java.io.ByteArrayOutputStream) -> <init>
com.volmit.wormholes.util.Frustrum -> com.volmit.wormholes.src.media:
    int ox -> cg
    int oy -> ch
    int oz -> ci
    int maxX -> cj
    int maxY -> ck
    int maxZ -> cl
    int minX -> minX
    int minY -> minY
    int minZ -> cm
    org.bukkit.World world -> world
    org.bukkit.util.Vector vMin -> cn
    org.bukkit.util.Vector vMax -> co
    org.bukkit.util.Vector vDirect -> cp
    org.bukkit.Location origin -> cq
    com.volmit.wormholes.util.Cuboid frame -> cr
    com.volmit.wormholes.util.Direction direction -> cs
    com.volmit.wormholes.util.Axis axis -> est
    void <init>(org.bukkit.World,int,int,int,int,int,int,int,int,int) -> <init>
    void <init>(org.bukkit.Location,org.bukkit.Location,org.bukkit.Location) -> <init>
    void <init>(org.bukkit.Location,com.volmit.wormholes.util.Cuboid) -> <init>
    com.volmit.wormholes.util.GList getPlayers(int) -> Proin
    com.volmit.wormholes.util.GList getEntities(int) -> ac
    com.volmit.wormholes.util.GList getBlocks(int) -> enim
    boolean w(org.bukkit.Location) -> at
    boolean w(int,int,int) -> sit
    int getOx() -> communities
    int getOy() -> content
    int getOz() -> convergence
    int getMaxX() -> deliverables
    int getMaxY() -> commerce
    int getMaxZ() -> markets
    int getMinX() -> getMinX
    int getMinY() -> getMinY
    int getMinZ() -> services
    org.bukkit.World getWorld() -> getWorld
    org.bukkit.util.Vector getvMin() -> tailers
    org.bukkit.util.Vector getvMax() -> experiences
    org.bukkit.util.Vector getvDirect() -> eyeballs
    org.bukkit.Location getOrigin() -> functionalities
    com.volmit.wormholes.util.Cuboid getFrame() -> infomediaries
    com.volmit.wormholes.util.Direction getDirection() -> infrastructures
    com.volmit.wormholes.util.Axis getAxis() -> lorem
com.volmit.wormholes.util.Frustrum$1 -> com.volmit.wormholes.src.customized:
    com.volmit.wormholes.util.Frustrum this$0 -> ct
    void <init>(com.volmit.wormholes.util.Frustrum) -> <init>
    org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> pulvinar
    java.lang.Object onAdapt(java.lang.Object) -> ipsum
com.volmit.wormholes.util.Frustrum$2 -> com.volmit.wormholes.src.cutting:
    int[] $SwitchMap$com$volmit$wormholes$util$Direction -> bD
    int[] $SwitchMap$com$volmit$wormholes$util$Axis -> Y
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.GAdapter -> com.volmit.wormholes.src.distributed:
    void <init>() -> <init>
    java.lang.Object adapt(java.lang.Object) -> Lorem
    java.lang.Object onAdapt(java.lang.Object) -> ipsum
com.volmit.wormholes.util.GBiset -> com.volmit.wormholes.src.dot:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> cu
    java.lang.Object b -> cv
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> initiatives
    void setA(java.lang.Object) -> pulvinar
    java.lang.Object getB() -> interfaces
    void setB(java.lang.Object) -> vulputate
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.util.GBook -> com.volmit.wormholes.src.com:
    com.volmit.wormholes.util.GList pages -> cw
    java.lang.String title -> title
    java.lang.String author -> author
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    java.lang.String getAuthor() -> getAuthor
    void setAuthor(java.lang.String) -> setAuthor
    void setPages(com.volmit.wormholes.util.GList) -> adipiscing
    com.volmit.wormholes.util.GBook addPage(com.volmit.wormholes.util.GPage) -> Lorem
    com.volmit.wormholes.util.GList getPages() -> methodologies
    com.volmit.wormholes.util.GList toPages() -> metrics
    org.bukkit.inventory.ItemStack toBook() -> mindshare
    com.volmit.wormholes.util.GList read(org.bukkit.inventory.ItemStack) -> ipsum
com.volmit.wormholes.util.GChunk -> com.volmit.wormholes.src.dynamic:
    long serialVersionUID -> serialVersionUID
    java.lang.Integer x -> cx
    java.lang.Integer z -> cy
    java.lang.String world -> cz
    void <init>(org.bukkit.Chunk) -> <init>
    void <init>(org.bukkit.Location) -> <init>
    void <init>(int,int,java.lang.String) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isChunk(org.bukkit.Chunk) -> ipsum
    java.lang.Integer getX() -> models
    void setX(java.lang.Integer) -> ipsum
    java.lang.Integer getZ() -> networks
    void setZ(java.lang.Integer) -> dolor
    java.lang.String getWorld() -> niches
    void setWorld(java.lang.String) -> setWorld
    org.bukkit.Chunk toChunk() -> paradigms
    java.lang.String toString() -> toString
com.volmit.wormholes.util.GFile -> com.volmit.wormholes.src.business:
    long serialVersionUID -> serialVersionUID
    void <init>(java.io.File,java.lang.String) -> <init>
    void <init>(java.net.URI) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(com.volmit.wormholes.util.GFile,java.lang.String[]) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean createNewFile() -> createNewFile
com.volmit.wormholes.util.GList -> com.volmit.wormholes.src.efficient:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.util.Set) -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(java.util.Iterator) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    void <init>(java.util.List) -> <init>
    java.lang.Object mostCommon() -> partnerships
    com.volmit.wormholes.util.GList shuffleCopy() -> platforms
    void shuffle() -> portals
    com.volmit.wormholes.util.GList split() -> relationships
    boolean hasIndex(int) -> hasIndex
    java.lang.Object pickRandom() -> ROI
    com.volmit.wormholes.util.GList stringList() -> synergies
    int last() -> last
    int getIndexOrLast(int) -> posuere
    com.volmit.wormholes.util.GList cropFrom(int) -> molestie
    com.volmit.wormholes.util.GList split(int) -> odio
    com.volmit.wormholes.util.GList cropTo(int) -> a
    com.volmit.wormholes.util.GList crop(int,int) -> sit
    com.volmit.wormholes.util.GList removeDuplicates() -> readiness
    void removeAll(java.lang.Object) -> dictum
    boolean hasDuplicates() -> schemas
    void sort() -> sort
    void push(java.lang.Object,int) -> Lorem
    void add(java.lang.Object[]) -> add
    com.volmit.wormholes.util.GList qadd(java.lang.Object) -> Vestibulum
    void add(java.util.List) -> dolor
    java.lang.String toString(java.lang.String) -> toString
    com.volmit.wormholes.util.GList reverse() -> solutions
    java.lang.String toString() -> toString
    com.volmit.wormholes.util.GList copy() -> supply
    com.volmit.wormholes.util.GList qdel(java.lang.Object) -> in
    java.lang.Object pop() -> pop
    java.lang.Object popRandom() -> chains
com.volmit.wormholes.util.GList$1 -> com.volmit.wormholes.src.to:
    com.volmit.wormholes.util.GList this$0 -> cA
    void <init>(com.volmit.wormholes.util.GList) -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.volmit.wormholes.util.GListAdapter -> com.volmit.wormholes.src.enterprise:
    void <init>() -> <init>
    java.util.List adapt(java.util.List) -> sit
    java.lang.Object onAdapt(java.lang.Object) -> ipsum
com.volmit.wormholes.util.GMCA -> com.volmit.wormholes.src.extensible:
    long serialVersionUID -> serialVersionUID
    java.lang.Integer x -> cx
    java.lang.Integer z -> cy
    java.lang.String world -> cz
    void <init>(int,int,java.lang.String) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getX() -> models
    void setX(java.lang.Integer) -> ipsum
    java.lang.Integer getZ() -> networks
    void setZ(java.lang.Integer) -> dolor
    java.lang.String getWorld() -> niches
    void setWorld(java.lang.String) -> setWorld
    java.lang.String toString() -> toString
com.volmit.wormholes.util.GMap -> com.volmit.wormholes.src.frictionless:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    com.volmit.wormholes.util.GMap copy() -> systems
    com.volmit.wormholes.util.GMap qput(java.lang.Object,java.lang.Object) -> Lorem
    com.volmit.wormholes.util.GMap flip() -> technologies
    java.lang.String toString() -> toString
    com.volmit.wormholes.util.GMap append(com.volmit.wormholes.util.GMap) -> dolor
    com.volmit.wormholes.util.GList k() -> users
    com.volmit.wormholes.util.GSet kset() -> vortals
    com.volmit.wormholes.util.GList v() -> obfuscate
    com.volmit.wormholes.util.GSet vset() -> star
    void putNVD(java.lang.Object,java.lang.Object) -> ipsum
    boolean contains(java.lang.Object) -> contains
    com.volmit.wormholes.util.GList get(com.volmit.wormholes.util.GList) -> elit
    com.volmit.wormholes.util.GMap removeDuplicateValues() -> see
    void put(com.volmit.wormholes.util.GList,com.volmit.wormholes.util.GList) -> Lorem
    com.volmit.wormholes.util.GList sortK() -> definition
    com.volmit.wormholes.util.GList sortV() -> show
com.volmit.wormholes.util.GPage -> com.volmit.wormholes.src.front:
    com.volmit.wormholes.util.GMap elements -> cB
    void <init>() -> <init>
    com.volmit.wormholes.util.GPage put(java.lang.String,java.lang.String) -> amet
    com.volmit.wormholes.util.GMap getElements() -> verb
    void setElements(com.volmit.wormholes.util.GMap) -> sit
com.volmit.wormholes.util.GQuadraset -> com.volmit.wormholes.src.global:
    java.lang.Object a -> cu
    java.lang.Object b -> cv
    java.lang.Object c -> cC
    java.lang.Object d -> cD
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> initiatives
    void setA(java.lang.Object) -> pulvinar
    java.lang.Object getB() -> interfaces
    void setB(java.lang.Object) -> vulputate
    java.lang.Object getC() -> confuse
    void setC(java.lang.Object) -> purus
    java.lang.Object getD() -> baffle
    void setD(java.lang.Object) -> non
com.volmit.wormholes.util.GSet -> com.volmit.wormholes.src.granular:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(int,float) -> <init>
    void <init>(int) -> <init>
com.volmit.wormholes.util.GSound -> com.volmit.wormholes.src.holistic:
    java.lang.String sound -> cE
    org.bukkit.Sound iSound -> cF
    java.lang.Float volume -> cG
    java.lang.Float pitch -> cH
    void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    void <init>(org.bukkit.Sound,java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    void <init>(org.bukkit.Sound) -> <init>
    void prePlay() -> Relevance
    void play(org.bukkit.entity.Player,org.bukkit.Location) -> dolor
    void play(org.bukkit.entity.Player) -> euismod
    com.volmit.wormholes.util.Audible clone() -> aggregate
    void play(org.bukkit.Location) -> mi
    void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> Lorem
    java.lang.String getSound() -> A
    void setSound(java.lang.String) -> nisl
    org.bukkit.Sound getiSound() -> ZComplexity
    void setiSound(org.bukkit.Sound) -> Lorem
    java.lang.Float getVolume() -> mus
    void setVolume(java.lang.Float) -> Lorem
    java.lang.Float getPitch() -> Interdum
    void setPitch(java.lang.Float) -> ipsum
    java.lang.Object clone() -> clone
com.volmit.wormholes.util.GText -> com.volmit.wormholes.src.impactful:
    com.volmit.wormholes.util.RTX t -> cI
    void <init>() -> <init>
    void add(java.lang.String) -> add
    void addWithHover(java.lang.String,java.lang.String) -> consectetur
    void addWithHoverCommand(java.lang.String,java.lang.String,java.lang.String) -> ipsum
    void addWithHoverSuggestCommand(java.lang.String,java.lang.String,java.lang.String) -> dolor
    void addWithHoverURL(java.lang.String,java.lang.String,java.lang.String) -> sit
    com.volmit.wormholes.util.GText pack() -> Length
    com.volmit.wormholes.util.JSONArray toJSON() -> lists
    void tellRawTo(org.bukkit.entity.Player) -> iaculis
com.volmit.wormholes.util.GTime -> com.volmit.wormholes.src.innovative:
    long serialVersionUID -> serialVersionUID
    long days -> cJ
    long hours -> cK
    long minutes -> cL
    long seconds -> cM
    long milliseconds -> cN
    void <init>(long,long,long,long,long) -> <init>
    void <init>(long) -> <init>
    void <init>(java.lang.String) -> <init>
    int getMult(java.lang.String) -> magna
    long getDays() -> blocks
    long getHours() -> Common
    long getMinutes() -> Informal
    long getSeconds() -> getSeconds
    long getMilliseconds() -> Synonyms
    long getTotalDuration() -> for
    java.lang.String shortDescription() -> b
    java.lang.String s(long) -> in
    java.lang.String to() -> to
    java.lang.String to(java.lang.String) -> tortor
    java.lang.String ago() -> c
    java.lang.String toString() -> toString
com.volmit.wormholes.util.GTriset -> com.volmit.wormholes.src.integrated:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> cu
    java.lang.Object b -> cv
    java.lang.Object c -> cC
    void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object getA() -> initiatives
    void setA(java.lang.Object) -> pulvinar
    java.lang.Object getB() -> interfaces
    void setB(java.lang.Object) -> vulputate
    java.lang.Object getC() -> confuse
    void setC(java.lang.Object) -> purus
com.volmit.wormholes.util.GVector -> com.volmit.wormholes.src.interactive:
    double x -> x
    double y -> y
    double z -> z
    int blockX -> cO
    int blockY -> cP
    int blockZ -> cQ
    void <init>(org.bukkit.util.Vector) -> <init>
    void <init>() -> <init>
    org.bukkit.util.Vector toVector() -> toVector
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    int getBlockX() -> getBlockX
    int getBlockY() -> getBlockY
    int getBlockZ() -> getBlockZ
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.util.Guis -> com.volmit.wormholes.src.intuitive:
    void <init>() -> <init>
    com.volmit.wormholes.util.GList getCentered(int,int) -> amet
    com.volmit.wormholes.util.GList sortLTR(com.volmit.wormholes.util.GList) -> Morbi
com.volmit.wormholes.util.HTTP -> com.volmit.wormholes.src.killer:
    java.lang.String CRLF -> cR
    void <init>() -> <init>
    com.volmit.wormholes.util.JSONObject toJSONObject(java.lang.String) -> tempus
    java.lang.String toString(com.volmit.wormholes.util.JSONObject) -> ipsum
com.volmit.wormholes.util.HTTPTokener -> com.volmit.wormholes.src.leading:
    void <init>(java.lang.String) -> <init>
    java.lang.String nextToken() -> nextToken
com.volmit.wormholes.util.HandledConfig -> com.volmit.wormholes.src.magnetic:
com.volmit.wormholes.util.Heaft -> com.volmit.wormholes.src.mission:
    com.volmit.wormholes.util.Heaft TINY -> cS
    com.volmit.wormholes.util.Heaft SMALL -> cT
    com.volmit.wormholes.util.Heaft NORMAL -> cU
    com.volmit.wormholes.util.Heaft BIG -> cV
    com.volmit.wormholes.util.Heaft MASSIVE -> cW
    com.volmit.wormholes.util.Heaft[] $VALUES -> cX
    com.volmit.wormholes.util.Heaft[] values() -> values
    com.volmit.wormholes.util.Heaft valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Health -> com.volmit.wormholes.src.critical:
    double hp -> cY
    void <init>(double) -> <init>
    int getFlatHearts() -> d
    double getHearts() -> f
    double getHalfHearts() -> g
    int getFlatHalfHearts() -> h
com.volmit.wormholes.util.Hologram -> com.volmit.wormholes.src.next:
    org.bukkit.entity.Entity getHandle() -> wireless
    void setExclusive(org.bukkit.entity.Player) -> at
    org.bukkit.entity.Player getExclusive() -> world
    java.lang.String getDisplay() -> getDisplay
    void setLocation(org.bukkit.Location) -> setLocation
    void setTextLocation(org.bukkit.Location) -> euismod
    void setDisplay(java.lang.String) -> setDisplay
    void destroy() -> destroy
    org.bukkit.Location getLocation() -> getLocation
com.volmit.wormholes.util.Hud -> com.volmit.wormholes.src.generation:
    void open() -> open
    void close() -> close
    void setContents(com.volmit.wormholes.util.GList) -> sit
    com.volmit.wormholes.util.GList getContents() -> drive
    java.lang.String getSelection() -> e
    int getSelectionRow() -> enable
    void onUpdate() -> fames
    void onOpen() -> pharetra
    java.lang.String onDisable(java.lang.String) -> consectetur
    java.lang.String onEnable(java.lang.String) -> amet
    void onClose() -> potenti
    void onSelect(java.lang.String,int) -> Lorem
    void onClick(com.volmit.wormholes.util.Click,org.bukkit.entity.Player,java.lang.String,int,com.volmit.wormholes.util.Hud) -> Lorem
com.volmit.wormholes.util.ICopy -> com.volmit.wormholes.src.one:
    java.io.File target -> cZ
    java.io.File destination -> da
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File,java.io.File) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IDeflate -> com.volmit.wormholes.src.open:
    java.io.File target -> cZ
    java.io.File destination -> da
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File,java.io.File) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IDelete -> com.volmit.wormholes.src.source:
    java.io.File target -> cZ
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IDirectory -> com.volmit.wormholes.src.out:
    java.io.File target -> cZ
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IEncrypt -> com.volmit.wormholes.src.the:
    java.io.File target -> cZ
    java.io.File destination -> da
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File,java.io.File) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IInflate -> com.volmit.wormholes.src.box:
    java.io.File target -> cZ
    java.io.File destination -> da
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File,java.io.File) -> <init>
    void operate() -> channels
    void add(java.io.File,java.util.jar.JarOutputStream) -> Lorem
    void reverse() -> reverse
com.volmit.wormholes.util.IModify -> com.volmit.wormholes.src.plug:
    java.io.File target -> cZ
    java.lang.String key -> key
    java.lang.Object value -> value
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File,java.lang.String,java.lang.Object) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IMove -> com.volmit.wormholes.src.play:
    java.io.File target -> cZ
    java.io.File destination -> da
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File,java.io.File) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IO -> com.volmit.wormholes.src.proactive:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    void <init>() -> <init>
    void closeQuietly(java.io.Reader) -> closeQuietly
    void closeQuietly(java.io.Writer) -> closeQuietly
    void closeQuietly(java.io.InputStream) -> closeQuietly
    void closeQuietly(java.io.OutputStream) -> closeQuietly
    byte[] toByteArray(java.io.InputStream) -> toByteArray
    byte[] toByteArray(java.io.Reader) -> toByteArray
    byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    byte[] toByteArray(java.lang.String) -> toByteArray
    char[] toCharArray(java.io.InputStream) -> toCharArray
    char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    char[] toCharArray(java.io.Reader) -> toCharArray
    java.lang.String toString(java.io.InputStream) -> toString
    java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    java.lang.String toString(java.io.Reader) -> toString
    java.lang.String toString(byte[]) -> toString
    java.lang.String toString(byte[],java.lang.String) -> toString
    java.util.List readLines(java.io.InputStream) -> readLines
    java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    java.util.List readLines(java.io.Reader) -> readLines
    java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    void write(byte[],java.io.OutputStream) -> write
    void write(byte[],java.io.Writer) -> write
    void write(byte[],java.io.Writer,java.lang.String) -> write
    void write(char[],java.io.Writer) -> write
    void write(char[],java.io.OutputStream) -> write
    void write(char[],java.io.OutputStream,java.lang.String) -> write
    void write(java.lang.String,java.io.Writer) -> write
    void write(java.lang.String,java.io.OutputStream) -> write
    void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    void write(java.lang.StringBuffer,java.io.Writer) -> write
    void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    int copy(java.io.InputStream,java.io.OutputStream) -> copy
    long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    void copy(java.io.InputStream,java.io.Writer) -> copy
    void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    int copy(java.io.Reader,java.io.Writer) -> copy
    long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    void copy(java.io.Reader,java.io.OutputStream) -> copy
    void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.IOP -> com.volmit.wormholes.src.real:
    com.volmit.wormholes.util.D d -> L
    com.volmit.wormholes.util.FileHack h -> db
    void <init>(com.volmit.wormholes.util.FileHack) -> <init>
    void queue(com.volmit.wormholes.util.FOP) -> Lorem
    void log(java.lang.String,java.lang.CharSequence[]) -> Lorem
com.volmit.wormholes.util.IPatch -> com.volmit.wormholes.src.time:
    java.io.File target -> cZ
    java.lang.String key -> key
    java.lang.String value -> value
    void <init>(com.volmit.wormholes.util.FileHack,java.io.File,java.lang.String,java.lang.String) -> <init>
    void operate() -> channels
    void reverse() -> reverse
com.volmit.wormholes.util.IntTag -> com.volmit.wormholes.src.revolutionary:
    int value -> value
    void <init>(java.lang.String,int) -> <init>
    java.lang.Integer getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.Inventories -> com.volmit.wormholes.src.rich:
    void <init>() -> <init>
    boolean hasSpace(org.bukkit.inventory.Inventory) -> Lorem
    boolean hasSpace(org.bukkit.inventory.Inventory,int) -> Lorem
    com.volmit.wormholes.util.GList getActualContents(org.bukkit.inventory.Inventory) -> ipsum
    boolean hasSpace(org.bukkit.inventory.Inventory,org.bukkit.inventory.ItemStack) -> Lorem
    int getEmptySlots(org.bukkit.inventory.Inventory) -> dolor
com.volmit.wormholes.util.Items -> com.volmit.wormholes.src.robust:
    void <init>() -> <init>
    boolean is(org.bukkit.inventory.ItemStack) -> dolor
    boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> Lorem
    boolean is(org.bukkit.inventory.ItemStack,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> Lorem
    org.bukkit.inventory.ItemStack getSkull(java.lang.String) -> sem
    boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> Lorem
    boolean hasMeta(org.bukkit.inventory.ItemStack) -> sit
    boolean hasName(org.bukkit.inventory.ItemStack) -> amet
    boolean hasLore(org.bukkit.inventory.ItemStack) -> consectetur
    boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> Lorem
    boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> Lorem
    boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> Lorem
    boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> Lorem
    boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> adipiscing
    com.volmit.wormholes.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> elit
    boolean isBroken(org.bukkit.inventory.ItemStack) -> Morbi
    boolean hasDurability(org.bukkit.inventory.ItemStack) -> pulvinar
    double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> vulputate
    void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> Lorem
    short getMaxDurability(org.bukkit.inventory.ItemStack) -> dictum
    short getDurability(org.bukkit.inventory.ItemStack) -> Vestibulum
    void setDurability(org.bukkit.inventory.ItemStack,short) -> Lorem
    void setDurability(org.bukkit.inventory.ItemStack,int) -> Lorem
    void damage(org.bukkit.inventory.ItemStack,int) -> ipsum
    boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> Lorem
com.volmit.wormholes.util.JSONArray -> com.volmit.wormholes.src.scalable:
    java.util.ArrayList myArrayList -> dc
    void <init>() -> <init>
    void <init>(com.volmit.wormholes.util.JSONTokener) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.util.Collection) -> <init>
    void <init>(java.lang.Object) -> <init>
    java.util.Iterator iterator() -> iterator
    java.lang.Object get(int) -> get
    boolean getBoolean(int) -> getBoolean
    double getDouble(int) -> getDouble
    java.lang.Enum getEnum(java.lang.Class,int) -> Lorem
    java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    java.math.BigInteger getBigInteger(int) -> facilisis
    int getInt(int) -> getInt
    com.volmit.wormholes.util.JSONArray getJSONArray(int) -> In
    com.volmit.wormholes.util.JSONObject getJSONObject(int) -> hac
    long getLong(int) -> getLong
    java.lang.String getString(int) -> getString
    boolean isNull(int) -> isNull
    java.lang.String join(java.lang.String) -> sed
    int length() -> length
    java.lang.Object opt(int) -> habitasse
    boolean optBoolean(int) -> platea
    boolean optBoolean(int,boolean) -> Lorem
    double optDouble(int) -> dictumst
    double optDouble(int,double) -> Lorem
    int optInt(int) -> Nam
    int optInt(int,int) -> consectetur
    java.lang.Enum optEnum(java.lang.Class,int) -> ipsum
    java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> Lorem
    java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> Lorem
    java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> Lorem
    com.volmit.wormholes.util.JSONArray optJSONArray(int) -> metus
    com.volmit.wormholes.util.JSONObject optJSONObject(int) -> nisl
    long optLong(int) -> magna
    long optLong(int,long) -> Lorem
    java.lang.String optString(int) -> tortor
    java.lang.String optString(int,java.lang.String) -> Lorem
    com.volmit.wormholes.util.JSONArray put(boolean) -> vulputate
    com.volmit.wormholes.util.JSONArray put(java.util.Collection) -> Lorem
    com.volmit.wormholes.util.JSONArray put(double) -> pulvinar
    com.volmit.wormholes.util.JSONArray put(int) -> tempus
    com.volmit.wormholes.util.JSONArray put(long) -> purus
    com.volmit.wormholes.util.JSONArray put(java.util.Map) -> Lorem
    com.volmit.wormholes.util.JSONArray put(java.lang.Object) -> mi
    com.volmit.wormholes.util.JSONArray put(int,boolean) -> ipsum
    com.volmit.wormholes.util.JSONArray put(int,java.util.Collection) -> Lorem
    com.volmit.wormholes.util.JSONArray put(int,double) -> ipsum
    com.volmit.wormholes.util.JSONArray put(int,int) -> adipiscing
    com.volmit.wormholes.util.JSONArray put(int,long) -> ipsum
    com.volmit.wormholes.util.JSONArray put(int,java.util.Map) -> Lorem
    com.volmit.wormholes.util.JSONArray put(int,java.lang.Object) -> Lorem
    java.lang.Object remove(int) -> remove
    boolean similar(java.lang.Object) -> euismod
    com.volmit.wormholes.util.JSONObject toJSONObject(com.volmit.wormholes.util.JSONArray) -> Lorem
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.io.Writer write(java.io.Writer) -> Lorem
    java.io.Writer write(java.io.Writer,int,int) -> Lorem
com.volmit.wormholes.util.JSONDataInput -> com.volmit.wormholes.src.seamless:
    void <init>() -> <init>
    void load(com.volmit.wormholes.util.DataCluster,java.io.File) -> ipsum
com.volmit.wormholes.util.JSONDataOutput -> com.volmit.wormholes.src.sexy:
    void <init>() -> <init>
    void save(com.volmit.wormholes.util.DataCluster,java.io.File) -> Lorem
com.volmit.wormholes.util.JSONException -> com.volmit.wormholes.src.sticky:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> dd
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    java.lang.Throwable getCause() -> getCause
com.volmit.wormholes.util.JSONML -> com.volmit.wormholes.src.strategic:
    void <init>() -> <init>
    java.lang.Object parse(com.volmit.wormholes.util.XMLTokener,boolean,com.volmit.wormholes.util.JSONArray) -> Lorem
    com.volmit.wormholes.util.JSONArray toJSONArray(java.lang.String) -> volutpat
    com.volmit.wormholes.util.JSONArray toJSONArray(com.volmit.wormholes.util.XMLTokener) -> Lorem
    com.volmit.wormholes.util.JSONObject toJSONObject(com.volmit.wormholes.util.XMLTokener) -> ipsum
    com.volmit.wormholes.util.JSONObject toJSONObject(java.lang.String) -> tempus
    java.lang.String toString(com.volmit.wormholes.util.JSONArray) -> ipsum
    java.lang.String toString(com.volmit.wormholes.util.JSONObject) -> ipsum
com.volmit.wormholes.util.JSONObject -> com.volmit.wormholes.src.synergistic:
    java.util.Map map -> map
    java.lang.Object NULL -> de
    void <init>() -> <init>
    void <init>(com.volmit.wormholes.util.JSONObject,java.lang.String[]) -> <init>
    void <init>(com.volmit.wormholes.util.JSONTokener) -> <init>
    void <init>(java.util.Map) -> <init>
    void <init>(java.lang.Object) -> <init>
    void <init>(java.lang.Object,java.lang.String[]) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.Locale) -> <init>
    com.volmit.wormholes.util.JSONObject accumulate(java.lang.String,java.lang.Object) -> ipsum
    com.volmit.wormholes.util.JSONObject append(java.lang.String,java.lang.Object) -> dolor
    java.lang.String doubleToString(double) -> vulputate
    java.lang.Object get(java.lang.String) -> get
    java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    boolean getBoolean(java.lang.String) -> getBoolean
    java.math.BigInteger getBigInteger(java.lang.String) -> rhoncus
    java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    double getDouble(java.lang.String) -> getDouble
    int getInt(java.lang.String) -> getInt
    com.volmit.wormholes.util.JSONArray getJSONArray(java.lang.String) -> sapien
    com.volmit.wormholes.util.JSONObject getJSONObject(java.lang.String) -> orci
    long getLong(java.lang.String) -> getLong
    java.lang.String[] getNames(com.volmit.wormholes.util.JSONObject) -> dolor
    java.lang.String[] getNames(java.lang.Object) -> Pellentesque
    java.lang.String getString(java.lang.String) -> getString
    boolean has(java.lang.String) -> has
    com.volmit.wormholes.util.JSONObject increment(java.lang.String) -> ligula
    boolean isNull(java.lang.String) -> isNull
    java.util.Iterator keys() -> keys
    java.util.Set keySet() -> keySet
    int length() -> length
    com.volmit.wormholes.util.JSONArray names() -> i
    java.lang.String numberToString(java.lang.Number) -> Lorem
    java.lang.Object opt(java.lang.String) -> Sed
    java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> ipsum
    java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> Lorem
    boolean optBoolean(java.lang.String) -> ultrices
    boolean optBoolean(java.lang.String,boolean) -> ipsum
    double optDouble(java.lang.String) -> imperdiet
    java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> Lorem
    java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> Lorem
    double optDouble(java.lang.String,double) -> ipsum
    int optInt(java.lang.String) -> turpis
    int optInt(java.lang.String,int) -> consectetur
    com.volmit.wormholes.util.JSONArray optJSONArray(java.lang.String) -> Nullam
    com.volmit.wormholes.util.JSONObject optJSONObject(java.lang.String) -> vehicula
    long optLong(java.lang.String) -> porta
    long optLong(java.lang.String,long) -> ipsum
    java.lang.String optString(java.lang.String) -> ultricies
    java.lang.String optString(java.lang.String,java.lang.String) -> adipiscing
    void populateMap(java.lang.Object) -> at
    com.volmit.wormholes.util.JSONObject put(java.lang.String,boolean) -> dolor
    com.volmit.wormholes.util.JSONObject put(java.lang.String,java.util.Collection) -> Lorem
    com.volmit.wormholes.util.JSONObject put(java.lang.String,double) -> dolor
    com.volmit.wormholes.util.JSONObject put(java.lang.String,int) -> adipiscing
    com.volmit.wormholes.util.JSONObject put(java.lang.String,long) -> dolor
    com.volmit.wormholes.util.JSONObject put(java.lang.String,java.util.Map) -> Lorem
    com.volmit.wormholes.util.JSONObject put(java.lang.String,java.lang.Object) -> sit
    com.volmit.wormholes.util.JSONObject putOnce(java.lang.String,java.lang.Object) -> amet
    com.volmit.wormholes.util.JSONObject putOpt(java.lang.String,java.lang.Object) -> consectetur
    java.lang.String quote(java.lang.String) -> quote
    java.io.Writer quote(java.lang.String,java.io.Writer) -> Lorem
    java.lang.Object remove(java.lang.String) -> vestibulum
    boolean similar(java.lang.Object) -> euismod
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    void testValidity(java.lang.Object) -> iaculis
    com.volmit.wormholes.util.JSONArray toJSONArray(com.volmit.wormholes.util.JSONArray) -> dolor
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.lang.String valueToString(java.lang.Object) -> valueToString
    java.lang.Object wrap(java.lang.Object) -> wrap
    java.io.Writer write(java.io.Writer) -> Lorem
    java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> Lorem
    void indent(java.io.Writer,int) -> Lorem
    java.io.Writer write(java.io.Writer,int,int) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.JSONObject$1 -> com.volmit.wormholes.src.transparent:
com.volmit.wormholes.util.JSONObject$Null -> com.volmit.wormholes.src.turn:
    void <init>() -> <init>
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void <init>(com.volmit.wormholes.util.JSONObject$1) -> <init>
com.volmit.wormholes.util.JSONString -> com.volmit.wormholes.src.key:
    java.lang.String toJSONString() -> toJSONString
com.volmit.wormholes.util.JSONStringer -> com.volmit.wormholes.src.ubiquitous:
    void <init>() -> <init>
    java.lang.String toString() -> toString
com.volmit.wormholes.util.JSONTokener -> com.volmit.wormholes.src.user:
    long character -> df
    boolean eof -> eof
    long index -> dg
    long line -> dh
    char previous -> di
    java.io.Reader reader -> reader
    boolean usePrevious -> dj
    void <init>(java.io.Reader) -> <init>
    void <init>(java.io.InputStream) -> <init>
    void <init>(java.lang.String) -> <init>
    void back() -> back
    int dehexchar(char) -> sit
    boolean end() -> j
    boolean more() -> k
    char next() -> next
    char next(char) -> amet
    java.lang.String next(int) -> sem
    char nextClean() -> l
    java.lang.String nextString(char) -> consectetur
    java.lang.String nextTo(char) -> adipiscing
    java.lang.String nextTo(java.lang.String) -> felis
    java.lang.Object nextValue() -> m
    char skipTo(char) -> elit
    com.volmit.wormholes.util.JSONException syntaxError(java.lang.String) -> nec
    java.lang.String toString() -> toString
com.volmit.wormholes.util.JSONWriter -> com.volmit.wormholes.src.centric:
    int maxdepth -> dk
    boolean comma -> dl
    char mode -> dm
    com.volmit.wormholes.util.JSONObject[] stack -> dn
    int top -> top
    java.io.Writer writer -> writer
    void <init>(java.io.Writer) -> <init>
    com.volmit.wormholes.util.JSONWriter append(java.lang.String) -> tristique
    com.volmit.wormholes.util.JSONWriter array() -> n
    com.volmit.wormholes.util.JSONWriter end(char,char) -> Lorem
    com.volmit.wormholes.util.JSONWriter endArray() -> o
    com.volmit.wormholes.util.JSONWriter endObject() -> p
    com.volmit.wormholes.util.JSONWriter key(java.lang.String) -> lacinia
    com.volmit.wormholes.util.JSONWriter object() -> q
    void pop(char) -> Morbi
    void push(com.volmit.wormholes.util.JSONObject) -> sit
    com.volmit.wormholes.util.JSONWriter value(boolean) -> dictum
    com.volmit.wormholes.util.JSONWriter value(double) -> dictum
    com.volmit.wormholes.util.JSONWriter value(long) -> non
    com.volmit.wormholes.util.JSONWriter value(java.lang.Object) -> urna
com.volmit.wormholes.util.Keyed -> com.volmit.wormholes.src.value:
    java.lang.String value() -> value
com.volmit.wormholes.util.Lang -> com.volmit.wormholes.src.added:
    java.lang.String value() -> value
com.volmit.wormholes.util.LineParticleManipulator -> com.volmit.wormholes.src.vertical:
    void <init>() -> <init>
    void play(org.bukkit.Location,org.bukkit.Location,java.lang.Double) -> Lorem
com.volmit.wormholes.util.ListTag -> com.volmit.wormholes.src.viral:
    java.lang.Class type -> type
    java.util.List value -> value
    void <init>(java.lang.String,java.lang.Class,java.util.List) -> <init>
    java.lang.Class getType() -> getType
    java.util.List getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.ListViewWindow -> com.volmit.wormholes.src.virtual:
    com.volmit.wormholes.util.GList binds -> do
    void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    com.volmit.wormholes.util.Window addElement(com.volmit.wormholes.util.Element) -> Lorem
com.volmit.wormholes.util.LongTag -> com.volmit.wormholes.src.visionary:
    long value -> value
    void <init>(java.lang.String,long) -> <init>
    java.lang.Long getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.M -> com.volmit.wormholes.src.web:
    int precision -> dp
    int modulus -> dq
    float[] sin -> dr
    void <init>() -> <init>
    double evaluate(java.lang.String) -> Duis
    boolean r(java.lang.Double) -> ipsum
    double evaluate(java.lang.String,java.lang.Double[]) -> Lorem
    org.bukkit.block.Block highestBlock(org.bukkit.Location,int,int) -> Lorem
    double tps(long,int) -> amet
    double ticksFromNS(long) -> mi
    java.lang.String toRoman(int) -> sed
    java.lang.String repeat(java.lang.String,int) -> repeat
    int rand(int,int) -> elit
    int fromRoman(java.lang.String) -> tempor
    long ns() -> r
    long ms() -> s
    double avg(com.volmit.wormholes.util.GList) -> pulvinar
    void lim(com.volmit.wormholes.util.GList,int) -> ipsum
    double distance(org.bukkit.Location,org.bukkit.Location) -> dolor
    boolean within(org.bukkit.Location,org.bukkit.Location,java.lang.Double) -> ipsum
    float sin(float) -> sin
    float cos(float) -> cos
    int max(int[]) -> max
    int min(int[]) -> min
    boolean within(int,int,int) -> amet
    float sinLookup(int) -> volutpat
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.MFADistortion -> com.volmit.wormholes.src.enabled:
    int span -> ds
    float to -> dt
    void <init>(int,float) -> <init>
    com.volmit.wormholes.util.Audible distort(com.volmit.wormholes.util.Audible) -> dolor
com.volmit.wormholes.util.MSound -> com.volmit.wormholes.src.wireless:
    com.volmit.wormholes.util.MSound AMBIENCE_CAVE -> du
    com.volmit.wormholes.util.MSound AMBIENCE_RAIN -> dv
    com.volmit.wormholes.util.MSound AMBIENCE_THUNDER -> dw
    com.volmit.wormholes.util.MSound ANVIL_BREAK -> dx
    com.volmit.wormholes.util.MSound ANVIL_LAND -> dy
    com.volmit.wormholes.util.MSound ANVIL_USE -> dz
    com.volmit.wormholes.util.MSound ARROW_HIT -> dA
    com.volmit.wormholes.util.MSound BURP -> dB
    com.volmit.wormholes.util.MSound CHEST_CLOSE -> dC
    com.volmit.wormholes.util.MSound CHEST_OPEN -> dD
    com.volmit.wormholes.util.MSound CLICK -> dE
    com.volmit.wormholes.util.MSound DOOR_CLOSE -> dF
    com.volmit.wormholes.util.MSound DOOR_OPEN -> dG
    com.volmit.wormholes.util.MSound DRINK -> dH
    com.volmit.wormholes.util.MSound EAT -> dI
    com.volmit.wormholes.util.MSound EXPLODE -> dJ
    com.volmit.wormholes.util.MSound FALL_BIG -> dK
    com.volmit.wormholes.util.MSound FALL_SMALL -> dL
    com.volmit.wormholes.util.MSound FIRE -> dM
    com.volmit.wormholes.util.MSound FIRE_IGNITE -> dN
    com.volmit.wormholes.util.MSound FIZZ -> dO
    com.volmit.wormholes.util.MSound FUSE -> dP
    com.volmit.wormholes.util.MSound GLASS -> dQ
    com.volmit.wormholes.util.MSound HURT_FLESH -> dR
    com.volmit.wormholes.util.MSound ITEM_BREAK -> dS
    com.volmit.wormholes.util.MSound ITEM_PICKUP -> dT
    com.volmit.wormholes.util.MSound LAVA -> dU
    com.volmit.wormholes.util.MSound LAVA_POP -> dV
    com.volmit.wormholes.util.MSound LEVEL_UP -> dW
    com.volmit.wormholes.util.MSound MINECART_BASE -> dX
    com.volmit.wormholes.util.MSound MINECART_INSIDE -> dY
    com.volmit.wormholes.util.MSound NOTE_BASS -> dZ
    com.volmit.wormholes.util.MSound NOTE_PIANO -> ea
    com.volmit.wormholes.util.MSound NOTE_BASS_DRUM -> eb
    com.volmit.wormholes.util.MSound NOTE_STICKS -> ec
    com.volmit.wormholes.util.MSound NOTE_BASS_GUITAR -> ed
    com.volmit.wormholes.util.MSound NOTE_SNARE_DRUM -> ee
    com.volmit.wormholes.util.MSound NOTE_PLING -> ef
    com.volmit.wormholes.util.MSound ORB_PICKUP -> eg
    com.volmit.wormholes.util.MSound PISTON_EXTEND -> eh
    com.volmit.wormholes.util.MSound PISTON_RETRACT -> ei
    com.volmit.wormholes.util.MSound PORTAL -> ej
    com.volmit.wormholes.util.MSound PORTAL_TRAVEL -> ek
    com.volmit.wormholes.util.MSound PORTAL_TRIGGER -> el
    com.volmit.wormholes.util.MSound SHOOT_ARROW -> em
    com.volmit.wormholes.util.MSound SPLASH -> en
    com.volmit.wormholes.util.MSound SPLASH2 -> eo
    com.volmit.wormholes.util.MSound STEP_GRASS -> ep
    com.volmit.wormholes.util.MSound STEP_GRAVEL -> eq
    com.volmit.wormholes.util.MSound STEP_LADDER -> er
    com.volmit.wormholes.util.MSound STEP_SAND -> es
    com.volmit.wormholes.util.MSound STEP_SNOW -> ev
    com.volmit.wormholes.util.MSound STEP_STONE -> ew
    com.volmit.wormholes.util.MSound STEP_WOOD -> ey
    com.volmit.wormholes.util.MSound STEP_WOOL -> ez
    com.volmit.wormholes.util.MSound SWIM -> eA
    com.volmit.wormholes.util.MSound WATER -> eB
    com.volmit.wormholes.util.MSound WOOD_CLICK -> eC
    com.volmit.wormholes.util.MSound BAT_DEATH -> eD
    com.volmit.wormholes.util.MSound BAT_HURT -> eE
    com.volmit.wormholes.util.MSound BAT_IDLE -> eF
    com.volmit.wormholes.util.MSound BAT_LOOP -> eG
    com.volmit.wormholes.util.MSound BAT_TAKEOFF -> eH
    com.volmit.wormholes.util.MSound BLAZE_BREATH -> eI
    com.volmit.wormholes.util.MSound BLAZE_DEATH -> eJ
    com.volmit.wormholes.util.MSound BLAZE_HIT -> eK
    com.volmit.wormholes.util.MSound CAT_HISS -> eL
    com.volmit.wormholes.util.MSound CAT_HIT -> eM
    com.volmit.wormholes.util.MSound CAT_MEOW -> eN
    com.volmit.wormholes.util.MSound CAT_PURR -> eO
    com.volmit.wormholes.util.MSound CAT_PURREOW -> eP
    com.volmit.wormholes.util.MSound CHICKEN_IDLE -> eQ
    com.volmit.wormholes.util.MSound CHICKEN_HURT -> eR
    com.volmit.wormholes.util.MSound CHICKEN_EGG_POP -> eS
    com.volmit.wormholes.util.MSound CHICKEN_WALK -> eT
    com.volmit.wormholes.util.MSound COW_IDLE -> eU
    com.volmit.wormholes.util.MSound COW_HURT -> eV
    com.volmit.wormholes.util.MSound COW_WALK -> eW
    com.volmit.wormholes.util.MSound CREEPER_HISS -> eX
    com.volmit.wormholes.util.MSound CREEPER_DEATH -> eY
    com.volmit.wormholes.util.MSound ENDERDRAGON_DEATH -> eZ
    com.volmit.wormholes.util.MSound ENDERDRAGON_GROWL -> fa
    com.volmit.wormholes.util.MSound ENDERDRAGON_HIT -> fb
    com.volmit.wormholes.util.MSound ENDERDRAGON_WINGS -> fc
    com.volmit.wormholes.util.MSound ENDERMAN_DEATH -> fd
    com.volmit.wormholes.util.MSound ENDERMAN_HIT -> fe
    com.volmit.wormholes.util.MSound ENDERMAN_IDLE -> ff
    com.volmit.wormholes.util.MSound ENDERMAN_TELEPORT -> fg
    com.volmit.wormholes.util.MSound ENDERMAN_SCREAM -> fh
    com.volmit.wormholes.util.MSound ENDERMAN_STARE -> fi
    com.volmit.wormholes.util.MSound GHAST_SCREAM -> fj
    com.volmit.wormholes.util.MSound GHAST_SCREAM2 -> fk
    com.volmit.wormholes.util.MSound GHAST_CHARGE -> fl
    com.volmit.wormholes.util.MSound GHAST_DEATH -> fm
    com.volmit.wormholes.util.MSound GHAST_FIREBALL -> fn
    com.volmit.wormholes.util.MSound GHAST_MOAN -> fo
    com.volmit.wormholes.util.MSound IRONGOLEM_DEATH -> fp
    com.volmit.wormholes.util.MSound IRONGOLEM_HIT -> fq
    com.volmit.wormholes.util.MSound IRONGOLEM_THROW -> fr
    com.volmit.wormholes.util.MSound IRONGOLEM_WALK -> fs
    com.volmit.wormholes.util.MSound MAGMACUBE_WALK -> ft
    com.volmit.wormholes.util.MSound MAGMACUBE_WALK2 -> fu
    com.volmit.wormholes.util.MSound MAGMACUBE_JUMP -> fv
    com.volmit.wormholes.util.MSound PIG_IDLE -> fw
    com.volmit.wormholes.util.MSound PIG_DEATH -> fx
    com.volmit.wormholes.util.MSound PIG_WALK -> fy
    com.volmit.wormholes.util.MSound SHEEP_IDLE -> fz
    com.volmit.wormholes.util.MSound SHEEP_SHEAR -> fA
    com.volmit.wormholes.util.MSound SHEEP_WALK -> fB
    com.volmit.wormholes.util.MSound SILVERFISH_HIT -> fC
    com.volmit.wormholes.util.MSound SILVERFISH_KILL -> fD
    com.volmit.wormholes.util.MSound SILVERFISH_IDLE -> fE
    com.volmit.wormholes.util.MSound SILVERFISH_WALK -> fF
    com.volmit.wormholes.util.MSound SKELETON_IDLE -> fG
    com.volmit.wormholes.util.MSound SKELETON_DEATH -> fH
    com.volmit.wormholes.util.MSound SKELETON_HURT -> fI
    com.volmit.wormholes.util.MSound SKELETON_WALK -> fJ
    com.volmit.wormholes.util.MSound SLIME_ATTACK -> fK
    com.volmit.wormholes.util.MSound SLIME_WALK -> fL
    com.volmit.wormholes.util.MSound SLIME_WALK2 -> fM
    com.volmit.wormholes.util.MSound SPIDER_IDLE -> fN
    com.volmit.wormholes.util.MSound SPIDER_DEATH -> fO
    com.volmit.wormholes.util.MSound SPIDER_WALK -> fP
    com.volmit.wormholes.util.MSound WITHER_DEATH -> fQ
    com.volmit.wormholes.util.MSound WITHER_HURT -> fR
    com.volmit.wormholes.util.MSound WITHER_IDLE -> fS
    com.volmit.wormholes.util.MSound WITHER_SHOOT -> fT
    com.volmit.wormholes.util.MSound WITHER_SPAWN -> fU
    com.volmit.wormholes.util.MSound WOLF_BARK -> fV
    com.volmit.wormholes.util.MSound WOLF_DEATH -> fW
    com.volmit.wormholes.util.MSound WOLF_GROWL -> fX
    com.volmit.wormholes.util.MSound WOLF_HOWL -> fY
    com.volmit.wormholes.util.MSound WOLF_HURT -> fZ
    com.volmit.wormholes.util.MSound WOLF_PANT -> ga
    com.volmit.wormholes.util.MSound WOLF_SHAKE -> gb
    com.volmit.wormholes.util.MSound WOLF_WALK -> gc
    com.volmit.wormholes.util.MSound WOLF_WHINE -> gd
    com.volmit.wormholes.util.MSound ZOMBIE_METAL -> ge
    com.volmit.wormholes.util.MSound ZOMBIE_WOOD -> gf
    com.volmit.wormholes.util.MSound ZOMBIE_WOODBREAK -> gg
    com.volmit.wormholes.util.MSound ZOMBIE_IDLE -> gh
    com.volmit.wormholes.util.MSound ZOMBIE_DEATH -> gi
    com.volmit.wormholes.util.MSound ZOMBIE_HURT -> gj
    com.volmit.wormholes.util.MSound ZOMBIE_INFECT -> gk
    com.volmit.wormholes.util.MSound ZOMBIE_UNFECT -> gl
    com.volmit.wormholes.util.MSound ZOMBIE_REMEDY -> gm
    com.volmit.wormholes.util.MSound ZOMBIE_WALK -> gn
    com.volmit.wormholes.util.MSound ZOMBIE_PIG_IDLE -> go
    com.volmit.wormholes.util.MSound ZOMBIE_PIG_ANGRY -> gp
    com.volmit.wormholes.util.MSound ZOMBIE_PIG_DEATH -> gq
    com.volmit.wormholes.util.MSound ZOMBIE_PIG_HURT -> gr
    com.volmit.wormholes.util.MSound DIG_WOOL -> gs
    com.volmit.wormholes.util.MSound DIG_GRASS -> gt
    com.volmit.wormholes.util.MSound DIG_GRAVEL -> gu
    com.volmit.wormholes.util.MSound DIG_SAND -> gv
    com.volmit.wormholes.util.MSound DIG_SNOW -> gw
    com.volmit.wormholes.util.MSound DIG_STONE -> gx
    com.volmit.wormholes.util.MSound DIG_WOOD -> gy
    com.volmit.wormholes.util.MSound FIREWORK_BLAST -> gz
    com.volmit.wormholes.util.MSound FIREWORK_BLAST2 -> gA
    com.volmit.wormholes.util.MSound FIREWORK_LARGE_BLAST -> gB
    com.volmit.wormholes.util.MSound FIREWORK_LARGE_BLAST2 -> gC
    com.volmit.wormholes.util.MSound FIREWORK_TWINKLE -> gD
    com.volmit.wormholes.util.MSound FIREWORK_TWINKLE2 -> gE
    com.volmit.wormholes.util.MSound FIREWORK_LAUNCH -> gF
    com.volmit.wormholes.util.MSound SUCCESSFUL_HIT -> gG
    com.volmit.wormholes.util.MSound HORSE_ANGRY -> gH
    com.volmit.wormholes.util.MSound HORSE_ARMOR -> gI
    com.volmit.wormholes.util.MSound HORSE_BREATHE -> gJ
    com.volmit.wormholes.util.MSound HORSE_DEATH -> gK
    com.volmit.wormholes.util.MSound HORSE_GALLOP -> gL
    com.volmit.wormholes.util.MSound HORSE_HIT -> gM
    com.volmit.wormholes.util.MSound HORSE_IDLE -> gN
    com.volmit.wormholes.util.MSound HORSE_JUMP -> gO
    com.volmit.wormholes.util.MSound HORSE_LAND -> gP
    com.volmit.wormholes.util.MSound HORSE_SADDLE -> gQ
    com.volmit.wormholes.util.MSound HORSE_SOFT -> gR
    com.volmit.wormholes.util.MSound HORSE_WOOD -> gS
    com.volmit.wormholes.util.MSound DONKEY_ANGRY -> gT
    com.volmit.wormholes.util.MSound DONKEY_DEATH -> gU
    com.volmit.wormholes.util.MSound DONKEY_HIT -> gV
    com.volmit.wormholes.util.MSound DONKEY_IDLE -> gW
    com.volmit.wormholes.util.MSound HORSE_SKELETON_DEATH -> gX
    com.volmit.wormholes.util.MSound HORSE_SKELETON_HIT -> gY
    com.volmit.wormholes.util.MSound HORSE_SKELETON_IDLE -> gZ
    com.volmit.wormholes.util.MSound HORSE_ZOMBIE_DEATH -> ha
    com.volmit.wormholes.util.MSound HORSE_ZOMBIE_HIT -> hb
    com.volmit.wormholes.util.MSound HORSE_ZOMBIE_IDLE -> hc
    com.volmit.wormholes.util.MSound VILLAGER_DEATH -> hd
    com.volmit.wormholes.util.MSound VILLAGER_HAGGLE -> he
    com.volmit.wormholes.util.MSound VILLAGER_HIT -> hf
    com.volmit.wormholes.util.MSound VILLAGER_IDLE -> hg
    com.volmit.wormholes.util.MSound VILLAGER_NO -> hh
    com.volmit.wormholes.util.MSound VILLAGER_YES -> hi
    java.lang.String pre19sound -> hj
    java.lang.String post19sound -> hk
    org.bukkit.Sound resolvedSound -> hl
    com.volmit.wormholes.util.MSound[] $VALUES -> hm
    com.volmit.wormholes.util.MSound[] values() -> values
    com.volmit.wormholes.util.MSound valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    org.bukkit.Sound bukkitSound() -> t
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.MaterialBlock -> com.volmit.wormholes.src.world:
    org.bukkit.Material material -> hn
    java.lang.Byte data -> ho
    void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    void <init>(org.bukkit.Material) -> <init>
    void <init>(org.bukkit.Location) -> <init>
    void <init>() -> <init>
    org.bukkit.Material getMaterial() -> getMaterial
    void setMaterial(org.bukkit.Material) -> setMaterial
    java.lang.Byte getData() -> u
    void setData(java.lang.Byte) -> ipsum
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.util.MessageBuilder -> com.volmit.wormholes.src.class:
    java.lang.String tag -> tag
    java.lang.String hoverText -> hp
    void <init>() -> <init>
    void <init>(com.volmit.wormholes.util.TagProvider) -> <init>
    void message(org.bukkit.command.CommandSender,java.lang.String) -> Lorem
    com.volmit.wormholes.util.MessageBuilder setTag(java.lang.String) -> eget
    com.volmit.wormholes.util.MessageBuilder setTag(java.lang.String,java.lang.String) -> elit
    java.lang.String getHoverText() -> v
    void setHoverText(java.lang.String) -> semper
    java.lang.String getTag() -> getTag
com.volmit.wormholes.util.MetaObject -> com.volmit.wormholes.src.action:
    void write(com.volmit.wormholes.util.DataCluster,java.lang.String) -> ipsum
    void read(com.volmit.wormholes.util.DataCluster,java.lang.String) -> dolor
com.volmit.wormholes.util.MultiDataHandler -> com.volmit.wormholes.src.items:
    java.lang.Object get(java.lang.Object) -> get
    void load(java.lang.Object) -> sit
    void save(java.lang.Object) -> save
    java.lang.Object onLoad(java.lang.Object) -> adipiscing
    void onSave(java.lang.Object) -> consectetur
    boolean contains(java.lang.Object) -> contains
    com.volmit.wormholes.util.GMap getCache() -> seamless
    void saveAll() -> saveAll
com.volmit.wormholes.util.NBTConstants -> com.volmit.wormholes.src.applications:
    java.nio.charset.Charset CHARSET -> CHARSET
    int TYPE_END -> TYPE_END
    int TYPE_BYTE -> TYPE_BYTE
    int TYPE_SHORT -> TYPE_SHORT
    int TYPE_INT -> TYPE_INT
    int TYPE_LONG -> TYPE_LONG
    int TYPE_FLOAT -> TYPE_FLOAT
    int TYPE_DOUBLE -> TYPE_DOUBLE
    int TYPE_BYTE_ARRAY -> TYPE_BYTE_ARRAY
    int TYPE_STRING -> TYPE_STRING
    int TYPE_LIST -> TYPE_LIST
    int TYPE_COMPOUND -> TYPE_COMPOUND
    int TYPE_BOOLEAN -> hq
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.NBTInputStream -> com.volmit.wormholes.src.architectures:
    java.io.DataInputStream is -> hr
    void <init>(java.io.InputStream) -> <init>
    com.volmit.wormholes.util.Tag readTag() -> w
    com.volmit.wormholes.util.Tag readTag(int) -> rhoncus
    com.volmit.wormholes.util.Tag readTagPayload(int,java.lang.String,int) -> Lorem
    void close() -> close
com.volmit.wormholes.util.NBTOutputStream -> com.volmit.wormholes.src.bandwidth:
    java.io.DataOutputStream os -> hs
    void <init>(java.io.OutputStream) -> <init>
    void writeTag(com.volmit.wormholes.util.Tag) -> Lorem
    void writeTagPayload(com.volmit.wormholes.util.Tag) -> ipsum
    void writeByteTagPayload(com.volmit.wormholes.util.ByteTag) -> Lorem
    void writeByteArrayTagPayload(com.volmit.wormholes.util.ByteArrayTag) -> Lorem
    void writeCompoundTagPayload(com.volmit.wormholes.util.CompoundTag) -> Lorem
    void writeListTagPayload(com.volmit.wormholes.util.ListTag) -> Lorem
    void writeStringTagPayload(com.volmit.wormholes.util.StringTag) -> Lorem
    void writeDoubleTagPayload(com.volmit.wormholes.util.DoubleTag) -> Lorem
    void writeBooleanTagPayload(com.volmit.wormholes.util.BooleanTag) -> Lorem
    void writeFloatTagPayload(com.volmit.wormholes.util.FloatTag) -> Lorem
    void writeLongTagPayload(com.volmit.wormholes.util.LongTag) -> Lorem
    void writeIntTagPayload(com.volmit.wormholes.util.IntTag) -> Lorem
    void writeShortTagPayload(com.volmit.wormholes.util.ShortTag) -> Lorem
    void writeEndTagPayload(com.volmit.wormholes.util.EndTag) -> Lorem
    void close() -> close
com.volmit.wormholes.util.NBTUtils -> com.volmit.wormholes.src.channels:
    java.lang.String getTypeName(java.lang.Class) -> getTypeName
    int getTypeCode(java.lang.Class) -> getTypeCode
    java.lang.Class getTypeClass(int) -> getTypeClass
    void <init>() -> <init>
com.volmit.wormholes.util.NMSClass -> com.volmit.wormholes.src.communities:
    boolean init -> ht
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> hu
    java.lang.Class IChatBaseComponent -> hv
    java.lang.Class ChatSerializer -> hw
    java.lang.Class PacketPlayOutPlayerInfo -> hx
    java.lang.Class PlayerInfoData -> hy
    java.lang.Class EnumPlayerInfoAction -> hz
    java.lang.Class GameProfile -> hA
    java.lang.Class EnumGamemode -> hB
    java.lang.Class TileEntitySkull -> hC
    java.lang.Class LoadingCache -> hD
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.NMSX -> com.volmit.wormholes.src.content:
    com.volmit.wormholes.util.NMSX instance -> hE
    boolean useOldMethods -> hF
    java.lang.String nmsver -> hG
    com.volmit.wormholes.util.GList colors -> hH
    void <init>() -> <init>
    java.lang.String getVersion() -> getVersion
    java.lang.Object serializeChat(java.lang.String) -> aliquam
    java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> Lorem
    void setChestState(org.bukkit.Location,boolean) -> Lorem
    java.lang.Class getCraftClass(java.lang.String) -> lectus
    java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> Lorem
    java.lang.Class getCBNMSClass(java.lang.String) -> consequat
    java.lang.Class getOBCClass(java.lang.String) -> neque
    java.lang.Object getHandle(java.lang.Object) -> Proin
    java.lang.reflect.Field getField(java.lang.Class,java.lang.String) -> getField
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    boolean ClassListEqual(java.lang.Class[],java.lang.Class[]) -> Lorem
    void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> Lorem
    void launchFirework(org.bukkit.Location,org.bukkit.Color,org.bukkit.Color,org.bukkit.FireworkEffect$Type) -> Lorem
    void launchFirework(org.bukkit.Location,org.bukkit.Color,org.bukkit.FireworkEffect$Type) -> Lorem
    void launchFirework(org.bukkit.Location,org.bukkit.Color) -> Lorem
    void playRecord(org.bukkit.entity.Player,org.bukkit.Material) -> Lorem
    void playRecord(org.bukkit.entity.Player,org.bukkit.Location,org.bukkit.Material) -> Lorem
    void launchFirework(org.bukkit.Location) -> iaculis
    void spreadParticles(org.bukkit.Location,org.bukkit.Material,int) -> Lorem
    void breakParticles(org.bukkit.Location,org.bukkit.Material,int) -> ipsum
    java.lang.Class getNMSClass(java.lang.String) -> sagittis
    java.lang.Class getPacket(java.lang.String) -> lorem
    void setWeatherDownfall(org.bukkit.entity.Player) -> urna
    void setWeatherClear(org.bukkit.entity.Player) -> Proin
    void resetWeather(org.bukkit.entity.Player) -> ac
    void setTime(org.bukkit.entity.Player,long) -> Lorem
    void resetTime(org.bukkit.entity.Player) -> enim
    org.bukkit.entity.Entity createFallingBlock(org.bukkit.Location,com.volmit.wormholes.util.MaterialBlock) -> ipsum
    org.bukkit.entity.Entity createFallingBlock(org.bukkit.Location) -> urna
    long getPlayerTime(org.bukkit.entity.Player) -> posuere
    void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> Lorem
    void clearTitle(org.bukkit.entity.Player) -> molestie
    void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> ipsum
    void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> Lorem
    java.lang.String getEntityName(org.bukkit.entity.Entity) -> vulputate
    java.lang.String getNBTV() -> x
    java.lang.String getBukkitVersion() -> getBukkitVersion
    java.lang.String nmsPackage() -> y
    java.lang.String craftPackage() -> B
    void showEnd(org.bukkit.entity.Player) -> odio
    void showDemo(org.bukkit.entity.Player) -> a
    void showBrightness(org.bukkit.entity.Player,float) -> Lorem
    void showWeather(org.bukkit.entity.Player,float) -> ipsum
    java.lang.Object getBlockPosition(org.bukkit.Location) -> Proin
    void showBlockBreakAnimation(org.bukkit.entity.Player,org.bukkit.Location,int) -> Lorem
    void showControls(org.bukkit.entity.Player) -> facilisis
    void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> Lorem
    int ping(org.bukkit.entity.Player) -> In
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.P -> com.volmit.wormholes.src.convergence:
    void <init>() -> <init>
    boolean isOnline(java.lang.String) -> vel
    org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    org.bukkit.entity.Player getAnyPlayer() -> C
    boolean isAnyOnline() -> D
    com.volmit.wormholes.util.GList inWorld(org.bukkit.World) -> Lorem
    com.volmit.wormholes.util.GList inChunk(org.bukkit.Chunk) -> dolor
    com.volmit.wormholes.util.GList inArea(org.bukkit.Location,double) -> Lorem
    com.volmit.wormholes.util.GList inArea(org.bukkit.Location,int) -> Lorem
    void disable(org.bukkit.entity.Player) -> hac
    void enable(org.bukkit.entity.Player) -> habitasse
    org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> dolor
    org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> sit
    boolean hasInventoryOpen(org.bukkit.entity.Player) -> platea
    org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> Lorem
    int getTotalExperience(org.bukkit.entity.Player) -> dictumst
    void setTotalExperience(org.bukkit.entity.Player,int) -> amet
    boolean canFindPlayer(java.lang.String) -> Quisque
    org.bukkit.entity.Player findPlayer(java.lang.String) -> congue
    com.volmit.wormholes.util.GList onlinePlayers() -> E
    org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> Nam
    void clear(org.bukkit.entity.Player) -> metus
    void clearEffects(org.bukkit.entity.Player) -> nisl
    void heal(org.bukkit.entity.Player,double) -> Lorem
    void heal(org.bukkit.entity.Player) -> magna
    void resetMaxHeath(org.bukkit.entity.Player) -> tortor
    void resetHunger(org.bukkit.entity.Player) -> tempus
    void kill(org.bukkit.entity.Player) -> sem
    com.volmit.wormholes.util.Shape getShape(org.bukkit.entity.Player) -> sed
    org.bukkit.Location getHand(org.bukkit.entity.Player) -> volutpat
    org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> Lorem
com.volmit.wormholes.util.P$1 -> com.volmit.wormholes.src.deliverables:
    void <init>() -> <init>
    org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> pulvinar
    java.lang.Object onAdapt(java.lang.Object) -> ipsum
com.volmit.wormholes.util.P$2 -> com.volmit.wormholes.src.commerce:
    java.lang.Double val$doff -> hI
    org.bukkit.entity.Player val$e -> hJ
    org.bukkit.entity.Entity[] val$result -> hK
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    void onTrace(org.bukkit.Location) -> amet
com.volmit.wormholes.util.PE -> com.volmit.wormholes.src.markets:
    com.volmit.wormholes.util.PE ABSORPTION -> hL
    com.volmit.wormholes.util.PE BLINDNESS -> hM
    com.volmit.wormholes.util.PE CONFUSION -> hN
    com.volmit.wormholes.util.PE DAMAGE_RESISTANCE -> hO
    com.volmit.wormholes.util.PE FAST_DIGGING -> hP
    com.volmit.wormholes.util.PE FIRE_RESISTANCE -> hQ
    com.volmit.wormholes.util.PE GLOWING -> hR
    com.volmit.wormholes.util.PE HARM -> hS
    com.volmit.wormholes.util.PE HEAL -> hT
    com.volmit.wormholes.util.PE HEALTH_BOOST -> hU
    com.volmit.wormholes.util.PE HUNGER -> hV
    com.volmit.wormholes.util.PE INCREASE_DAMAGE -> hW
    com.volmit.wormholes.util.PE INVISIBILITY -> hX
    com.volmit.wormholes.util.PE JUMP -> hY
    com.volmit.wormholes.util.PE LEVITATION -> hZ
    com.volmit.wormholes.util.PE LUCK -> ia
    com.volmit.wormholes.util.PE NIGHT_VISION -> ib
    com.volmit.wormholes.util.PE POISON -> ic
    com.volmit.wormholes.util.PE REGENERATION -> ie
    com.volmit.wormholes.util.PE SATURATION -> if
    com.volmit.wormholes.util.PE SLOW -> ig
    com.volmit.wormholes.util.PE SLOW_DIGGING -> ih
    com.volmit.wormholes.util.PE SPEED -> ii
    com.volmit.wormholes.util.PE UNLUCK -> ij
    com.volmit.wormholes.util.PE WATER_BREATHING -> ik
    com.volmit.wormholes.util.PE WEAKNESS -> il
    com.volmit.wormholes.util.PE WITHER -> im
    void <init>(java.util.Map) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    java.util.Map serialize() -> serialize
    boolean apply(org.bukkit.entity.LivingEntity) -> apply
    boolean equals(java.lang.Object) -> equals
    int getAmplifier() -> getAmplifier
    int getDuration() -> getDuration
    org.bukkit.potion.PotionEffectType getType() -> getType
    boolean isAmbient() -> isAmbient
    boolean hasParticles() -> hasParticles
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.volmit.wormholes.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> Lorem
    com.volmit.wormholes.util.PE d(int) -> sapien
    com.volmit.wormholes.util.PE a(int) -> orci
    org.bukkit.potion.PotionEffect c() -> F
    void c(org.bukkit.entity.LivingEntity) -> Lorem
    void crm(org.bukkit.entity.LivingEntity) -> ipsum
    void rm(org.bukkit.entity.LivingEntity) -> dolor
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.PackageType -> com.volmit.wormholes.src.services:
    com.volmit.wormholes.util.PackageType STRING -> io
    com.volmit.wormholes.util.PackageType SHORT -> ip
    com.volmit.wormholes.util.PackageType LONG -> iq
    com.volmit.wormholes.util.PackageType INTEGER -> ir
    com.volmit.wormholes.util.PackageType FLOAT -> is
    com.volmit.wormholes.util.PackageType DOUBLE -> it
    com.volmit.wormholes.util.PackageType CHAR -> iu
    com.volmit.wormholes.util.PackageType BYTES -> iv
    com.volmit.wormholes.util.PackageType BYTE -> iw
    com.volmit.wormholes.util.PackageType BOOLEAN -> ix
    com.volmit.wormholes.util.PackageType DATA_PACK -> iy
    byte type -> type
    java.lang.Class clazz -> clazz
    com.volmit.wormholes.util.PackageType[] $VALUES -> iz
    com.volmit.wormholes.util.PackageType[] values() -> values
    com.volmit.wormholes.util.PackageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,byte,java.lang.Class) -> <init>
    byte getType() -> getType
    java.lang.Class getClazz() -> getClazz
    com.volmit.wormholes.util.DataHandle getInstance() -> G
    com.volmit.wormholes.util.PackageType getType(byte) -> amet
    com.volmit.wormholes.util.DataHandle getInstance(byte) -> consectetur
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.PacketWrapper -> com.volmit.wormholes.src.tailers:
    void <init>() -> <init>
    void onEnable() -> onEnable
com.volmit.wormholes.util.ParallelPoolManager -> com.volmit.wormholes.src.experiences:
    com.volmit.wormholes.util.QueueMode mode -> iA
    com.volmit.wormholes.util.GList threads -> iB
    int next -> iC
    int threadCount -> iD
    java.util.Queue squeue -> iE
    void syncQueue(com.volmit.wormholes.util.Execution) -> Lorem
    void tickSyncQueue() -> H
    void <init>(int,com.volmit.wormholes.util.QueueMode) -> <init>
    void start() -> start
    void shutdown() -> shutdown
    void <init>(int) -> <init>
    void queue(com.volmit.wormholes.util.Execution) -> ipsum
    int getSize() -> getSize
    com.volmit.wormholes.util.ParallelThread[] getThreads() -> I
    com.volmit.wormholes.util.ParallelThread nextThread() -> J
    void createThreads(int) -> ligula
com.volmit.wormholes.util.ParallelPoolManager$1 -> com.volmit.wormholes.src.eyeballs:
    int[] $SwitchMap$com$volmit$wormholes$util$QueueMode -> iF
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ParallelThread -> com.volmit.wormholes.src.functionalities:
    java.util.Queue queue -> iG
    com.volmit.wormholes.util.ThreadInformation info -> iH
    void <init>(int) -> <init>
    void run() -> run
    void conditionallySleep(double) -> Vestibulum
    void execute(com.volmit.wormholes.util.Execution) -> dolor
    void execute() -> execute
    void queue(com.volmit.wormholes.util.Execution) -> ipsum
    java.util.Queue getQueue() -> K
    com.volmit.wormholes.util.ThreadInformation getInfo() -> L
com.volmit.wormholes.util.ParameterAdapter -> com.volmit.wormholes.src.infomediaries:
    void <init>() -> <init>
    java.lang.String adapt(java.lang.String) -> vitae
    java.lang.String onParameterRequested(java.lang.String) -> ornare
com.volmit.wormholes.util.ParticleEffect -> com.volmit.wormholes.src.infrastructures:
    com.volmit.wormholes.util.ParticleEffect EXPLOSION_NORMAL -> iI
    com.volmit.wormholes.util.ParticleEffect EXPLOSION_LARGE -> iJ
    com.volmit.wormholes.util.ParticleEffect EXPLOSION_HUGE -> iK
    com.volmit.wormholes.util.ParticleEffect FIREWORKS_SPARK -> iL
    com.volmit.wormholes.util.ParticleEffect WATER_BUBBLE -> iM
    com.volmit.wormholes.util.ParticleEffect WATER_SPLASH -> iN
    com.volmit.wormholes.util.ParticleEffect WATER_WAKE -> iO
    com.volmit.wormholes.util.ParticleEffect SUSPENDED -> iP
    com.volmit.wormholes.util.ParticleEffect SUSPENDED_DEPTH -> iQ
    com.volmit.wormholes.util.ParticleEffect CRIT -> iR
    com.volmit.wormholes.util.ParticleEffect CRIT_MAGIC -> iS
    com.volmit.wormholes.util.ParticleEffect SMOKE_NORMAL -> iT
    com.volmit.wormholes.util.ParticleEffect SMOKE_LARGE -> iU
    com.volmit.wormholes.util.ParticleEffect SPELL -> iV
    com.volmit.wormholes.util.ParticleEffect SPELL_INSTANT -> iW
    com.volmit.wormholes.util.ParticleEffect SPELL_MOB -> iX
    com.volmit.wormholes.util.ParticleEffect SPELL_MOB_AMBIENT -> iY
    com.volmit.wormholes.util.ParticleEffect SPELL_WITCH -> iZ
    com.volmit.wormholes.util.ParticleEffect DRIP_WATER -> ja
    com.volmit.wormholes.util.ParticleEffect DRIP_LAVA -> jb
    com.volmit.wormholes.util.ParticleEffect VILLAGER_ANGRY -> jc
    com.volmit.wormholes.util.ParticleEffect VILLAGER_HAPPY -> jd
    com.volmit.wormholes.util.ParticleEffect TOWN_AURA -> je
    com.volmit.wormholes.util.ParticleEffect NOTE -> jf
    com.volmit.wormholes.util.ParticleEffect PORTAL -> jg
    com.volmit.wormholes.util.ParticleEffect ENCHANTMENT_TABLE -> jh
    com.volmit.wormholes.util.ParticleEffect FLAME -> ji
    com.volmit.wormholes.util.ParticleEffect LAVA -> jj
    com.volmit.wormholes.util.ParticleEffect FOOTSTEP -> jk
    com.volmit.wormholes.util.ParticleEffect CLOUD -> jl
    com.volmit.wormholes.util.ParticleEffect REDSTONE -> jm
    com.volmit.wormholes.util.ParticleEffect SNOWBALL -> jn
    com.volmit.wormholes.util.ParticleEffect SNOW_SHOVEL -> jo
    com.volmit.wormholes.util.ParticleEffect SLIME -> jp
    com.volmit.wormholes.util.ParticleEffect HEART -> jq
    com.volmit.wormholes.util.ParticleEffect BARRIER -> jr
    com.volmit.wormholes.util.ParticleEffect ITEM_CRACK -> js
    com.volmit.wormholes.util.ParticleEffect BLOCK_CRACK -> jt
    com.volmit.wormholes.util.ParticleEffect BLOCK_DUST -> ju
    com.volmit.wormholes.util.ParticleEffect WATER_DROP -> jv
    com.volmit.wormholes.util.ParticleEffect ITEM_TAKE -> jw
    com.volmit.wormholes.util.ParticleEffect MOB_APPEARANCE -> jx
    com.volmit.wormholes.util.ParticleEffect DRAGON_BREATH -> jy
    com.volmit.wormholes.util.ParticleEffect END_ROD -> jz
    com.volmit.wormholes.util.ParticleEffect DAMAGE_INDICATOR -> jA
    com.volmit.wormholes.util.ParticleEffect SWEEP_ATTACK -> jB
    java.util.Map NAME_MAP -> jC
    java.util.Map ID_MAP -> jD
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> jE
    java.util.List properties -> jF
    com.volmit.wormholes.util.ParticleEffect[] $VALUES -> jG
    com.volmit.wormholes.util.ParticleEffect[] values() -> values
    com.volmit.wormholes.util.ParticleEffect valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String,int,int,com.volmit.wormholes.util.ParticleEffect$ParticleProperty[]) -> <init>
    java.lang.String getName() -> getName
    int getId() -> getId
    int getRequiredVersion() -> M
    boolean hasProperty(com.volmit.wormholes.util.ParticleEffect$ParticleProperty) -> Lorem
    boolean isSupported() -> isSupported
    com.volmit.wormholes.util.ParticleEffect fromName(java.lang.String) -> Integer
    com.volmit.wormholes.util.ParticleEffect fromId(int) -> Sed
    boolean isWater(org.bukkit.Location) -> ac
    boolean isLongDistance(org.bukkit.Location,java.util.List) -> Lorem
    boolean isDataCorrect(com.volmit.wormholes.util.ParticleEffect,com.volmit.wormholes.util.ParticleEffect$ParticleData) -> Lorem
    boolean isColorCorrect(com.volmit.wormholes.util.ParticleEffect,com.volmit.wormholes.util.ParticleEffect$ParticleColor) -> Lorem
    void display(float,int,org.bukkit.Location,double) -> Lorem
    void display(float,int,org.bukkit.Location,java.util.List) -> Lorem
    void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Lorem
    void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Lorem
    void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Lorem
    void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> Lorem
    void display(com.volmit.wormholes.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> Lorem
    void phantom(org.bukkit.Location,int) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ParticleEffect$1 -> com.volmit.wormholes.src.initiatives:
    int[] val$in -> jH
    org.bukkit.Location val$l -> empower
    void <init>(int,int[],org.bukkit.Location) -> <init>
    void run() -> run
com.volmit.wormholes.util.ParticleEffect$BlockData -> com.volmit.wormholes.src.interfaces:
    void <init>(org.bukkit.Material,byte) -> <init>
com.volmit.wormholes.util.ParticleEffect$ItemData -> com.volmit.wormholes.src.methodologies:
    void <init>(org.bukkit.Material,byte) -> <init>
com.volmit.wormholes.util.ParticleEffect$NoteColor -> com.volmit.wormholes.src.metrics:
    int note -> note
    void <init>(int) -> <init>
    float getValueX() -> N
    float getValueY() -> O
    float getValueZ() -> P
com.volmit.wormholes.util.ParticleEffect$OrdinaryColor -> com.volmit.wormholes.src.mindshare:
    int red -> red
    int green -> green
    int blue -> blue
    void <init>(int,int,int) -> <init>
    void <init>(org.bukkit.Color) -> <init>
    int getRed() -> getRed
    int getGreen() -> getGreen
    int getBlue() -> getBlue
    float getValueX() -> N
    float getValueY() -> O
    float getValueZ() -> P
com.volmit.wormholes.util.ParticleEffect$ParticleColor -> com.volmit.wormholes.src.models:
    void <init>() -> <init>
    float getValueX() -> N
    float getValueY() -> O
    float getValueZ() -> P
com.volmit.wormholes.util.ParticleEffect$ParticleColorException -> com.volmit.wormholes.src.networks:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.util.ParticleEffect$ParticleData -> com.volmit.wormholes.src.niches:
    org.bukkit.Material material -> hn
    byte data -> data
    int[] packetData -> jI
    void <init>(org.bukkit.Material,byte) -> <init>
    org.bukkit.Material getMaterial() -> getMaterial
    byte getData() -> getData
    int[] getPacketData() -> Q
    java.lang.String getPacketDataString() -> R
com.volmit.wormholes.util.ParticleEffect$ParticleDataException -> com.volmit.wormholes.src.paradigms:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.util.ParticleEffect$ParticlePacket -> com.volmit.wormholes.src.partnerships:
    int version -> version
    java.lang.Class enumParticle -> jJ
    java.lang.reflect.Constructor packetConstructor -> jK
    java.lang.reflect.Method getHandle -> jL
    java.lang.reflect.Field playerConnection -> jM
    java.lang.reflect.Method sendPacket -> jN
    boolean initialized -> initialized
    com.volmit.wormholes.util.ParticleEffect effect -> jO
    float offsetX -> jP
    float offsetY -> jQ
    float offsetZ -> jR
    float speed -> jS
    int amount -> jT
    boolean longDistance -> jU
    com.volmit.wormholes.util.ParticleEffect$ParticleData data -> jV
    java.lang.Object packet -> jW
    void <init>(com.volmit.wormholes.util.ParticleEffect,float,float,float,float,int,boolean,com.volmit.wormholes.util.ParticleEffect$ParticleData) -> <init>
    void <init>(com.volmit.wormholes.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,com.volmit.wormholes.util.ParticleEffect$ParticleData) -> <init>
    void <init>(com.volmit.wormholes.util.ParticleEffect,com.volmit.wormholes.util.ParticleEffect$ParticleColor,boolean) -> <init>
    void initialize() -> initialize
    int getVersion() -> getVersion
    boolean isInitialized() -> isInitialized
    void initializePacket(org.bukkit.Location) -> enim
    void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> Lorem
    void sendTo(org.bukkit.Location,java.util.List) -> ipsum
    void sendTo(org.bukkit.Location,double) -> ipsum
com.volmit.wormholes.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> com.volmit.wormholes.src.platforms:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.volmit.wormholes.util.ParticleEffect$ParticlePacket$PacketSendingException -> com.volmit.wormholes.src.portals:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.volmit.wormholes.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> com.volmit.wormholes.src.relationships:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
com.volmit.wormholes.util.ParticleEffect$ParticleProperty -> com.volmit.wormholes.src.ROI:
    com.volmit.wormholes.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> jX
    com.volmit.wormholes.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> jY
    com.volmit.wormholes.util.ParticleEffect$ParticleProperty DIRECTIONAL -> jZ
    com.volmit.wormholes.util.ParticleEffect$ParticleProperty COLORABLE -> ka
    com.volmit.wormholes.util.ParticleEffect$ParticleProperty[] $VALUES -> kb
    com.volmit.wormholes.util.ParticleEffect$ParticleProperty[] values() -> values
    com.volmit.wormholes.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ParticleEffect$ParticleVersionException -> com.volmit.wormholes.src.synergies:
    long serialVersionUID -> serialVersionUID
    void <init>(java.lang.String) -> <init>
com.volmit.wormholes.util.ParticleManipulator -> com.volmit.wormholes.src.readiness:
    void <init>() -> <init>
com.volmit.wormholes.util.PhantomDialog -> com.volmit.wormholes.src.schemas:
    boolean cancellable -> kc
    void <init>(java.lang.String,org.bukkit.entity.Player,boolean) -> <init>
    com.volmit.wormholes.util.Window close() -> S
    boolean isCancellable() -> isCancellable
    com.volmit.wormholes.util.Dialog setCancellable(boolean) -> pulvinar
    void onCancelled(org.bukkit.entity.Player,com.volmit.wormholes.util.Window,com.volmit.wormholes.util.Dialog) -> Lorem
    boolean onClick(com.volmit.wormholes.util.Element,org.bukkit.entity.Player) -> Lorem
com.volmit.wormholes.util.PhantomDialog$1 -> com.volmit.wormholes.src.solutions:
    com.volmit.wormholes.util.PhantomDialog this$0 -> kd
    void <init>(com.volmit.wormholes.util.PhantomDialog,java.lang.Integer) -> <init>
    void run() -> run
com.volmit.wormholes.util.PhantomEffect -> com.volmit.wormholes.src.supply:
    void <init>() -> <init>
    com.volmit.wormholes.util.GList getEffects() -> unleash
    void play(org.bukkit.Location) -> mi
    void addEffect(com.volmit.wormholes.util.VisualEffect) -> Lorem
com.volmit.wormholes.util.PhantomElement -> com.volmit.wormholes.src.chains:
    org.bukkit.Material type -> ke
    java.lang.Byte metadata -> kf
    java.lang.String title -> title
    com.volmit.wormholes.util.GList text -> kg
    java.lang.Short durability -> kh
    java.lang.Integer count -> ki
    com.volmit.wormholes.util.Slot slot -> kj
    org.bukkit.inventory.ItemStack stack -> kk
    boolean glowing -> glowing
    java.util.UUID id -> kl
    void <init>(org.bukkit.inventory.ItemStack,com.volmit.wormholes.util.Slot) -> <init>
    void <init>(org.bukkit.Material,java.lang.Byte,com.volmit.wormholes.util.Slot,java.lang.String,com.volmit.wormholes.util.GList,java.lang.Short,java.lang.Integer) -> <init>
    void <init>(org.bukkit.Material,com.volmit.wormholes.util.Slot,java.lang.String) -> <init>
    void <init>(org.bukkit.Material,java.lang.Byte,com.volmit.wormholes.util.Slot,java.lang.String) -> <init>
    void <init>(org.bukkit.Material,com.volmit.wormholes.util.Slot,java.lang.String,java.lang.Integer) -> <init>
    void <init>(org.bukkit.Material,com.volmit.wormholes.util.Slot,java.lang.String,java.lang.Short) -> <init>
    void <init>(org.bukkit.Material,java.lang.Byte,com.volmit.wormholes.util.Slot,java.lang.String,java.lang.Integer) -> <init>
    void <init>(org.bukkit.Material,java.lang.Byte,com.volmit.wormholes.util.Slot,java.lang.String,java.lang.Short) -> <init>
    void <init>(org.bukkit.Material,java.lang.Byte,com.volmit.wormholes.util.Slot,java.lang.String,java.lang.Short,java.lang.Integer) -> <init>
    com.volmit.wormholes.util.Element addText(java.lang.String) -> hac
    org.bukkit.Material getType() -> getType
    com.volmit.wormholes.util.Element setType(org.bukkit.Material) -> ipsum
    java.lang.Byte getMetadata() -> vertical
    com.volmit.wormholes.util.Element setMetadata(java.lang.Byte) -> Lorem
    java.lang.String getTitle() -> getTitle
    com.volmit.wormholes.util.Element setTitle(java.lang.String) -> habitasse
    com.volmit.wormholes.util.GList getText() -> viral
    com.volmit.wormholes.util.Element setText(com.volmit.wormholes.util.GList) -> consectetur
    java.lang.Short getDurability() -> virtual
    com.volmit.wormholes.util.Element setDurability(java.lang.Short) -> Lorem
    java.lang.Integer getCount() -> getCount
    com.volmit.wormholes.util.Element setCount(java.lang.Integer) -> Lorem
    com.volmit.wormholes.util.Slot getSlot() -> visionary
    com.volmit.wormholes.util.Element setSlot(com.volmit.wormholes.util.Slot) -> Lorem
    org.bukkit.inventory.ItemStack getStack() -> enabled
    com.volmit.wormholes.util.Element setStack(org.bukkit.inventory.ItemStack) -> Lorem
    com.volmit.wormholes.util.Element copy() -> web
    java.util.UUID getId() -> getId
    void onClick(org.bukkit.entity.Player,com.volmit.wormholes.util.Click,com.volmit.wormholes.util.Window) -> Lorem
    boolean equals(java.lang.Object) -> equals
    void setGlowing(boolean) -> setGlowing
    boolean isGlowing() -> isGlowing
com.volmit.wormholes.util.PhantomElement$1 -> com.volmit.wormholes.src.systems:
    com.volmit.wormholes.util.PhantomElement this$0 -> km
    void <init>(com.volmit.wormholes.util.PhantomElement,org.bukkit.Material,java.lang.Byte,com.volmit.wormholes.util.Slot,java.lang.String,com.volmit.wormholes.util.GList,java.lang.Short,java.lang.Integer) -> <init>
    void onClick(org.bukkit.entity.Player,com.volmit.wormholes.util.Click,com.volmit.wormholes.util.Window) -> Lorem
com.volmit.wormholes.util.PhantomEvent -> com.volmit.wormholes.src.technologies:
    org.bukkit.event.HandlerList handlers -> kn
    void <init>() -> <init>
    org.bukkit.event.HandlerList getHandlers() -> getHandlers
    org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.PhantomHologram -> com.volmit.wormholes.src.users:
    com.volmit.wormholes.util.GList meta -> ko
    java.lang.String text -> text
    org.bukkit.Location base -> kp
    double splitDistance -> kq
    org.bukkit.entity.Player exclusive -> kr
    void <init>(org.bukkit.Location) -> <init>
    org.bukkit.entity.Entity getHandle() -> wireless
    java.lang.String getDisplay() -> getDisplay
    void setLocation(org.bukkit.Location) -> setLocation
    void setTextLocation(org.bukkit.Location) -> euismod
    void setDisplay(java.lang.String) -> setDisplay
    void update() -> update
    void destroy() -> destroy
    org.bukkit.Location getLocation() -> getLocation
    double getSplitDistance() -> T
    void setSplitDistance(double) -> in
    void setExclusive(org.bukkit.entity.Player) -> at
    org.bukkit.entity.Player getExclusive() -> world
com.volmit.wormholes.util.PhantomSelectDialog -> com.volmit.wormholes.src.vortals:
    com.volmit.wormholes.util.GMap bindings -> ks
    void <init>(java.lang.String,org.bukkit.entity.Player,boolean) -> <init>
    com.volmit.wormholes.util.SelectDialog bind(com.volmit.wormholes.util.Element,java.lang.Object) -> Lorem
    boolean onClick(com.volmit.wormholes.util.Element,org.bukkit.entity.Player) -> Lorem
    void onSelected(java.lang.Object,com.volmit.wormholes.util.Element) -> Lorem
com.volmit.wormholes.util.PhantomSpinner -> com.volmit.wormholes.src.obfuscate:
    com.volmit.wormholes.util.ProgressSpinner s -> kt
    com.volmit.wormholes.util.ProgressSpinner c -> ku
    void <init>(com.volmit.wormholes.util.C,com.volmit.wormholes.util.C,com.volmit.wormholes.util.C) -> <init>
    java.lang.String toString() -> toString
com.volmit.wormholes.util.PhantomWindow -> com.volmit.wormholes.src.star:
    java.lang.Integer viewport -> kv
    java.lang.String title -> title
    com.volmit.wormholes.util.GList elements -> kw
    org.bukkit.inventory.Inventory inventory -> inventory
    com.volmit.wormholes.util.Element background -> kx
    boolean open -> open
    org.bukkit.entity.Player viewer -> vel
    java.util.UUID id -> kl
    void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    com.volmit.wormholes.util.Window open() -> U
    com.volmit.wormholes.util.Window close() -> S
    void update() -> update
    com.volmit.wormholes.util.Window build() -> V
    void rebuild() -> per
    boolean contains(com.volmit.wormholes.util.Slot) -> ipsum
    boolean contains(com.volmit.wormholes.util.Element) -> ipsum
    com.volmit.wormholes.util.Element getElement(com.volmit.wormholes.util.Slot) -> dolor
    com.volmit.wormholes.util.Window addElement(com.volmit.wormholes.util.Element) -> Lorem
    com.volmit.wormholes.util.Window removeElement(com.volmit.wormholes.util.Element) -> dolor
    java.lang.String getTitle() -> getTitle
    com.volmit.wormholes.util.Window setTitle(java.lang.String) -> commodo
    com.volmit.wormholes.util.GList getElements() -> W
    com.volmit.wormholes.util.Window setElements(com.volmit.wormholes.util.GList) -> vulputate
    org.bukkit.entity.Player getViewer() -> Proin
    org.bukkit.inventory.Inventory getInventory() -> getInventory
    java.util.UUID getId() -> getId
    com.volmit.wormholes.util.Element getBackground() -> X
    com.volmit.wormholes.util.Window setBackground(com.volmit.wormholes.util.Element) -> sit
    java.lang.Integer getViewport() -> Y
    com.volmit.wormholes.util.Window setViewport(java.lang.Integer) -> sit
    com.volmit.wormholes.util.Window setInventory(org.bukkit.inventory.Inventory) -> sit
    boolean isOpen() -> isOpen
    void on(org.bukkit.event.inventory.InventoryCloseEvent) -> Lorem
    void on(org.bukkit.event.inventory.InventoryDragEvent) -> Lorem
    void on(org.bukkit.event.inventory.InventoryClickEvent) -> Lorem
    boolean equals(java.lang.Object) -> equals
    boolean onClick(com.volmit.wormholes.util.Element,org.bukkit.entity.Player) -> Lorem
    void onClose(com.volmit.wormholes.util.Window,org.bukkit.entity.Player) -> Lorem
com.volmit.wormholes.util.PhantomWindow$1 -> com.volmit.wormholes.src.see:
    com.volmit.wormholes.util.PhantomWindow this$0 -> ky
    void <init>(com.volmit.wormholes.util.PhantomWindow,org.bukkit.Material,com.volmit.wormholes.util.Slot,java.lang.String) -> <init>
    void onClick(org.bukkit.entity.Player,com.volmit.wormholes.util.Click,com.volmit.wormholes.util.Window) -> Lorem
com.volmit.wormholes.util.Physical -> com.volmit.wormholes.src.definition:
    org.bukkit.Location getLocation() -> getLocation
    org.bukkit.util.Vector getVelocity() -> getVelocity
    org.bukkit.util.Vector getVolume() -> Z
    java.lang.Double getMass() -> aa
    java.lang.Double getDensity() -> ab
    void influenceGravity(com.volmit.wormholes.util.Physical) -> Lorem
    void influenceForce(org.bukkit.util.Vector) -> dolor
com.volmit.wormholes.util.PhysicalObject -> com.volmit.wormholes.src.show:
    org.bukkit.Location location -> sagittis
    org.bukkit.util.Vector velocity -> mattis
    org.bukkit.util.Vector volume -> kz
    java.lang.Double mass -> kA
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double) -> <init>
    void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    org.bukkit.Location getLocation() -> getLocation
    org.bukkit.util.Vector getVelocity() -> getVelocity
    org.bukkit.util.Vector getVolume() -> Z
    java.lang.Double getMass() -> aa
    java.lang.Double getDensity() -> ab
    void influenceGravity(com.volmit.wormholes.util.Physical) -> Lorem
    void influenceForce(org.bukkit.util.Vector) -> dolor
com.volmit.wormholes.util.PlayerDataHandler -> com.volmit.wormholes.src.verb:
    void <init>(com.volmit.wormholes.util.Controllable) -> <init>
    com.volmit.wormholes.util.Configurable onLoad(org.bukkit.entity.Player) -> rhoncus
    void onSave(org.bukkit.entity.Player) -> sapien
    void onSave(java.lang.Object) -> consectetur
    com.volmit.wormholes.util.Configurable onLoad(java.lang.Object) -> amet
    java.lang.Object onLoad(java.lang.Object) -> adipiscing
com.volmit.wormholes.util.PlayerDataSet -> com.volmit.wormholes.src.confuse:
    java.io.File folder -> folder
    void <init>(java.io.File) -> <init>
    void load(org.bukkit.entity.Player,com.volmit.wormholes.util.DataCluster) -> Lorem
    void save(org.bukkit.entity.Player,com.volmit.wormholes.util.DataCluster) -> ipsum
com.volmit.wormholes.util.PlayerEvent -> com.volmit.wormholes.src.baffle:
    org.bukkit.entity.Player player -> player
    void <init>(org.bukkit.entity.Player) -> <init>
    org.bukkit.entity.Player getPlayer() -> getPlayer
com.volmit.wormholes.util.PlayerHud -> com.volmit.wormholes.src.Relevance:
    boolean closeOnMove -> kB
    org.bukkit.Location last -> lorem
    void <init>(org.bukkit.entity.Player,boolean) -> <init>
    void <init>(org.bukkit.entity.Player) -> <init>
    org.bukkit.Location getBaseLocation() -> disintermediate
    void onUpdateInternal() -> embrace
com.volmit.wormholes.util.PlayerInventorySet -> com.volmit.wormholes.src.A:
    org.bukkit.entity.Player p -> efficitur
    org.bukkit.inventory.ItemStack[] contents -> kC
    void <init>(org.bukkit.entity.Player) -> <init>
    void pop() -> pop
    void push() -> push
com.volmit.wormholes.util.PlayerScrollEvent -> com.volmit.wormholes.src.ZComplexity:
    int from -> from
    int to -> to
    int distance -> kD
    int movement -> kE
    com.volmit.wormholes.util.ScrollDirection direction -> kF
    void <init>(org.bukkit.entity.Player,int,int) -> <init>
    int getFrom() -> ae
    int getTo() -> af
    int getDistance() -> ag
    int getMovement() -> ah
    com.volmit.wormholes.util.ScrollDirection getDirection() -> ai
com.volmit.wormholes.util.PluginMessage -> com.volmit.wormholes.src.Length:
    com.google.common.io.ByteArrayDataOutput out -> kG
    org.bukkit.entity.Player player -> player
    org.bukkit.plugin.Plugin plugin -> plugin
    void <init>(org.bukkit.plugin.Plugin,java.lang.String[]) -> <init>
    void send() -> send
com.volmit.wormholes.util.PluginUtil -> com.volmit.wormholes.src.lists:
    void <init>() -> <init>
    void enable(org.bukkit.plugin.Plugin) -> ipsum
    void enableAll() -> aj
    void disable(org.bukkit.plugin.Plugin) -> dolor
    void disableAll() -> ak
    java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> sit
    java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> Lorem
    org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> ante
    java.util.List getPluginNames(boolean) -> Vestibulum
    java.lang.String getPluginVersion(java.lang.String) -> cursus
    java.lang.String getUsages(org.bukkit.plugin.Plugin) -> amet
    java.util.List findByCommand(java.lang.String) -> suscipit
    void load(org.bukkit.plugin.Plugin) -> consectetur
    java.lang.String getPluginFileName(java.lang.String) -> Mauris
    boolean load(java.lang.String) -> load
    void reload(org.bukkit.plugin.Plugin) -> adipiscing
    void reloadAll() -> al
    void unload(org.bukkit.plugin.Plugin) -> elit
    void unloadNoGC(org.bukkit.plugin.Plugin) -> Morbi
    org.bukkit.plugin.Plugin getAnyPlugin() -> am
com.volmit.wormholes.util.Polygon -> com.volmit.wormholes.src.blocks:
    void <init>() -> <init>
com.volmit.wormholes.util.Priority -> com.volmit.wormholes.src.Common:
    com.volmit.wormholes.util.Priority LOWEST -> kH
    com.volmit.wormholes.util.Priority VERY_LOW -> kI
    com.volmit.wormholes.util.Priority LOW -> kJ
    com.volmit.wormholes.util.Priority NORMAL -> kK
    com.volmit.wormholes.util.Priority HIGH -> kL
    com.volmit.wormholes.util.Priority VERY_HIGH -> kM
    com.volmit.wormholes.util.Priority HIGHEST -> kN
    com.volmit.wormholes.util.Priority[] $VALUES -> kO
    com.volmit.wormholes.util.Priority[] values() -> values
    com.volmit.wormholes.util.Priority valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    com.volmit.wormholes.util.GList topDown() -> an
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ProgressSpinner -> com.volmit.wormholes.src.Informal:
    java.lang.String[] chars -> kP
    int index -> index
    com.volmit.wormholes.util.ProgressSpinner DEFAULT -> kQ
    com.volmit.wormholes.util.ProgressSpinner NETWORK -> kR
    com.volmit.wormholes.util.ProgressSpinner CIRCLES -> kS
    com.volmit.wormholes.util.ProgressSpinner RANDOMS -> kT
    com.volmit.wormholes.util.ProgressSpinner MERGERS -> kU
    void <init>(java.lang.String[]) -> <init>
    void <init>() -> <init>
    java.lang.String toString() -> toString
    java.lang.String[] getChars() -> ao
    int getIndex() -> getIndex
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.QueueMode -> com.volmit.wormholes.src.Synonyms:
    com.volmit.wormholes.util.QueueMode ROUND_ROBIN -> kV
    com.volmit.wormholes.util.QueueMode SMALLEST -> kW
    com.volmit.wormholes.util.QueueMode[] $VALUES -> kX
    com.volmit.wormholes.util.QueueMode[] values() -> values
    com.volmit.wormholes.util.QueueMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.RTEX -> com.volmit.wormholes.src.for:
    com.volmit.wormholes.util.GList extras -> kY
    void <init>(com.volmit.wormholes.util.ColoredString[]) -> <init>
    com.volmit.wormholes.util.JSONObject toJSON() -> proactive
com.volmit.wormholes.util.RTX -> com.volmit.wormholes.src.b:
    com.volmit.wormholes.util.JSONArray base -> kZ
    void <init>() -> <init>
    void add(com.volmit.wormholes.util.JSONObject) -> amet
    void addText(java.lang.String) -> addText
    void addText(java.lang.String,com.volmit.wormholes.util.C) -> Lorem
    void addTextHover(java.lang.String,com.volmit.wormholes.util.RTEX,com.volmit.wormholes.util.C) -> Lorem
    void addTextSuggestedCommand(java.lang.String,java.lang.String,com.volmit.wormholes.util.C) -> Lorem
    void addTextOpenURL(java.lang.String,java.lang.String,com.volmit.wormholes.util.C) -> ipsum
    void addTextFireCommand(java.lang.String,java.lang.String,com.volmit.wormholes.util.C) -> dolor
    void addTextSuggestedHoverCommand(java.lang.String,com.volmit.wormholes.util.RTEX,java.lang.String,com.volmit.wormholes.util.C) -> Lorem
    void addTextOpenHoverURL(java.lang.String,com.volmit.wormholes.util.RTEX,java.lang.String,com.volmit.wormholes.util.C) -> ipsum
    void addTextFireHoverCommand(java.lang.String,com.volmit.wormholes.util.RTEX,java.lang.String,com.volmit.wormholes.util.C) -> dolor
    com.volmit.wormholes.util.JSONArray toJSON() -> lists
    void tellRawTo(org.bukkit.entity.Player) -> iaculis
com.volmit.wormholes.util.RayTrace -> com.volmit.wormholes.src.c:
    org.bukkit.Location start -> la
    org.bukkit.util.Vector direction -> primis
    java.lang.Double maxDistance -> lb
    java.lang.Double distanceCovered -> lc
    java.lang.Double step -> ld
    java.lang.Boolean stop -> le
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    void trace() -> ap
    void stop() -> stop
    void onTrace(org.bukkit.Location) -> amet
    org.bukkit.Location getStart() -> aq
    void setStart(org.bukkit.Location) -> posuere
    org.bukkit.util.Vector getDirection() -> getDirection
    void setDirection(org.bukkit.util.Vector) -> setDirection
    java.lang.Double getMaxDistance() -> ar
    void setMaxDistance(java.lang.Double) -> dolor
    java.lang.Double getDistanceCovered() -> as
    void setDistanceCovered(java.lang.Double) -> sit
    java.lang.Double getStep() -> au
    void setStep(java.lang.Double) -> amet
com.volmit.wormholes.util.RedstonePower -> com.volmit.wormholes.src.d:
    byte power -> lf
    void <init>(byte) -> <init>
    byte getPower() -> av
    void setPower(byte) -> adipiscing
com.volmit.wormholes.util.ReflectionUtils -> com.volmit.wormholes.src.f:
    void <init>() -> <init>
    java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    java.lang.reflect.Constructor getConstructor(java.lang.String,com.volmit.wormholes.util.ReflectionUtils$PackageType,java.lang.Class[]) -> Lorem
    java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> Lorem
    java.lang.Object instantiateObject(java.lang.String,com.volmit.wormholes.util.ReflectionUtils$PackageType,java.lang.Object[]) -> Lorem
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    java.lang.reflect.Method getMethod(java.lang.String,com.volmit.wormholes.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> Lorem
    java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> Lorem
    java.lang.Object invokeMethod(java.lang.Object,java.lang.String,com.volmit.wormholes.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> Lorem
    java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> Lorem
    java.lang.reflect.Field getField(java.lang.String,com.volmit.wormholes.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Lorem
    java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> Lorem
    java.lang.Object getValue(java.lang.Object,java.lang.String,com.volmit.wormholes.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> Lorem
    java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> Lorem
    void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> Lorem
    void setValue(java.lang.Object,java.lang.String,com.volmit.wormholes.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> Lorem
    void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> Lorem
com.volmit.wormholes.util.ReflectionUtils$DataType -> com.volmit.wormholes.src.g:
    com.volmit.wormholes.util.ReflectionUtils$DataType BYTE -> lg
    com.volmit.wormholes.util.ReflectionUtils$DataType SHORT -> lh
    com.volmit.wormholes.util.ReflectionUtils$DataType INTEGER -> li
    com.volmit.wormholes.util.ReflectionUtils$DataType LONG -> lj
    com.volmit.wormholes.util.ReflectionUtils$DataType CHARACTER -> lk
    com.volmit.wormholes.util.ReflectionUtils$DataType FLOAT -> ll
    com.volmit.wormholes.util.ReflectionUtils$DataType DOUBLE -> lm
    com.volmit.wormholes.util.ReflectionUtils$DataType BOOLEAN -> ln
    java.util.Map CLASS_MAP -> lo
    java.lang.Class primitive -> lp
    java.lang.Class reference -> lq
    com.volmit.wormholes.util.ReflectionUtils$DataType[] $VALUES -> lr
    com.volmit.wormholes.util.ReflectionUtils$DataType[] values() -> values
    com.volmit.wormholes.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    java.lang.Class getPrimitive() -> aw
    java.lang.Class getReference() -> ax
    com.volmit.wormholes.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> dolor
    java.lang.Class getPrimitive(java.lang.Class) -> sit
    java.lang.Class getReference(java.lang.Class) -> amet
    java.lang.Class[] getPrimitive(java.lang.Class[]) -> Lorem
    java.lang.Class[] getReference(java.lang.Class[]) -> ipsum
    java.lang.Class[] getPrimitive(java.lang.Object[]) -> Lorem
    java.lang.Class[] getReference(java.lang.Object[]) -> ipsum
    boolean compare(java.lang.Class[],java.lang.Class[]) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ReflectionUtils$PackageType -> com.volmit.wormholes.src.h:
    com.volmit.wormholes.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> ls
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT -> lt
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> lu
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> lv
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> lw
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> lx
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> ly
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> lz
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> lA
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> lB
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> lC
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> lD
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> lE
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> lF
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> lG
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> lH
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> lI
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> lJ
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> lK
    com.volmit.wormholes.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> lL
    java.lang.String path -> path
    com.volmit.wormholes.util.ReflectionUtils$PackageType[] $VALUES -> lM
    com.volmit.wormholes.util.ReflectionUtils$PackageType[] values() -> values
    com.volmit.wormholes.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,com.volmit.wormholes.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    java.lang.String getPath() -> getPath
    java.lang.Class getClass(java.lang.String) -> getClass
    java.lang.String toString() -> toString
    java.lang.String getServerVersion() -> getServerVersion
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Registrar -> com.volmit.wormholes.src.i:
    com.volmit.wormholes.util.RegistrarType value() -> ay
com.volmit.wormholes.util.RegistrarType -> com.volmit.wormholes.src.j:
    com.volmit.wormholes.util.RegistrarType AUTO -> lN
    com.volmit.wormholes.util.RegistrarType MANUAL -> lO
    com.volmit.wormholes.util.RegistrarType[] $VALUES -> lP
    com.volmit.wormholes.util.RegistrarType[] values() -> values
    com.volmit.wormholes.util.RegistrarType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.RootedHud -> com.volmit.wormholes.src.k:
    org.bukkit.Location track -> lQ
    double maxDist -> bH
    void <init>(org.bukkit.entity.Player,org.bukkit.Location,double) -> <init>
    void <init>(org.bukkit.entity.Player,org.bukkit.Location) -> <init>
    org.bukkit.Location getBaseLocation() -> disintermediate
    void onUpdateInternal() -> embrace
com.volmit.wormholes.util.S -> com.volmit.wormholes.src.l:
    void <init>() -> <init>
    void sync() -> sync
com.volmit.wormholes.util.S$1 -> com.volmit.wormholes.src.m:
    com.volmit.wormholes.util.S this$0 -> lR
    void <init>(com.volmit.wormholes.util.S) -> <init>
    void run() -> run
com.volmit.wormholes.util.SR -> com.volmit.wormholes.src.n:
    java.lang.Object t -> lS
    boolean f -> f
    void <init>() -> <init>
    java.lang.Object get() -> get
    java.lang.Object sync() -> az
    java.lang.Object access$002(com.volmit.wormholes.util.SR,java.lang.Object) -> Lorem
    boolean access$102(com.volmit.wormholes.util.SR,boolean) -> Lorem
com.volmit.wormholes.util.SR$1 -> com.volmit.wormholes.src.o:
    com.volmit.wormholes.util.SR this$0 -> lT
    void <init>(com.volmit.wormholes.util.SR) -> <init>
    void run() -> run
com.volmit.wormholes.util.SYM -> com.volmit.wormholes.src.p:
    char QUOTE_LEFT -> lU
    char QUOTE_RIGHT -> lV
    char QUOTE_SINGLE_LEFT -> lW
    char QUOTE_SINGLE_RIGHT -> lX
    char DEGREE_CELCIUS -> lY
    char DEGREE_FAHRENHEIT -> lZ
    char BRACKET_LEFT -> ma
    char BRACKET_RIGHT -> mb
    char BRACKET_SHELL_LEFT -> mc
    char BRACKET_SHELL_RIGHT -> md
    char ARROW_LEFT -> me
    char ARROW_UP -> mf
    char ARROW_RIGHT -> mg
    char ARROW_DOWN -> mh
    char ARROW_DOUBLE_LEFT -> mj
    char ARROW_DOUBLE_UP -> mk
    char ARROW_DOUBLE_RIGHT -> ml
    char ARROW_DOUBLE_DOWN -> mm
    char ARROW_LEFT_RIGHT -> mn
    char ARROW_UP_DOWN -> mo
    char ARROW_UP_LEFT -> mp
    char ARROW_UP_RIGHT -> mq
    char ARROW_DOWN_RIGHT -> mr
    char ARROW_DOWN_LEFT -> ms
    char SYMBOL_SNOWFLAKE -> mt
    char SYMBOL_HEART -> mu
    char SYMBOL_COPYRIGHT -> mv
    char SYMBOL_REGISTERED -> mw
    char SYMBOL_WARNING -> mx
    char SYMBOL_DIAMOND -> my
    char SYMBOL_NIB -> mz
    char SYMBOL_CUT -> mA
    char SYMBOL_OHM -> mB
    char SYMBOL_GEAR -> mC
    char SYMBOL_PENCIL -> mD
    char SYMBOL_SMILE -> mE
    char SYMBOL_RADIOACTIVE -> mF
    char SYMBOL_PEACE -> mG
    char SYMBOL_FEMALE -> mH
    char SYMBOL_MALE -> mI
    char SYMBOL_KING -> mJ
    char SYNBOL_QUEEN -> mK
    char SYMBOL_CASTLE -> mL
    char SYMBOL_HORSE -> mM
    char SYMBOL_CLOVER -> mN
    char SYMBOL_FLAG -> mO
    char SYMBOL_VOLTAGE -> mP
    char SYMBOL_EGG -> mQ
    char SHAPE_CIRCLE -> mR
    char SHAPE_SQUARE -> mS
    char SHAPE_TRIANGLE -> mT
    char SHAPE_DIAMOND -> mU
    char SHAPE_PENTAGON -> mV
    char SHAPE_HEXAGON -> mW
    char SHAPE_HEXAGON_HORIZONTAL -> mX
    char SHAPE_ELIPSE -> mY
    void <init>() -> <init>
    void printSymbols(org.bukkit.entity.Player) -> orci
com.volmit.wormholes.util.ScrollDirection -> com.volmit.wormholes.src.q:
    com.volmit.wormholes.util.ScrollDirection UP -> mZ
    com.volmit.wormholes.util.ScrollDirection DOWN -> na
    com.volmit.wormholes.util.ScrollDirection[] $VALUES -> nb
    com.volmit.wormholes.util.ScrollDirection[] values() -> values
    com.volmit.wormholes.util.ScrollDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.ScrollingText -> com.volmit.wormholes.src.r:
    java.lang.String text -> text
    int shift -> nc
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    void shiftLeft(int) -> ultrices
    void shiftRight(int) -> imperdiet
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    int getShift() -> getShift
    void setShift(int) -> turpis
    java.lang.String toString() -> toString
com.volmit.wormholes.util.SelectDialog -> com.volmit.wormholes.src.s:
    com.volmit.wormholes.util.SelectDialog bind(com.volmit.wormholes.util.Element,java.lang.Object) -> Lorem
    void onSelected(java.lang.Object,com.volmit.wormholes.util.Element) -> Lorem
com.volmit.wormholes.util.Sequencer -> com.volmit.wormholes.src.t:
    void add(com.volmit.wormholes.util.Audible,int) -> Lorem
    boolean isPlaying() -> isPlaying
    void setPlayHead(int) -> Nullam
    int getLength() -> getLength
    int getPlayHead() -> aA
com.volmit.wormholes.util.Serializer -> com.volmit.wormholes.src.u:
    void <init>() -> <init>
    byte[] serialize(java.io.Serializable) -> serialize
    java.io.Serializable deserialize(byte[]) -> vulputate
    void serializeToFile(java.io.Serializable,java.io.File) -> Lorem
    java.io.Serializable deserializeFromFile(java.io.File) -> adipiscing
com.volmit.wormholes.util.Shape -> com.volmit.wormholes.src.v:
    org.bukkit.Location location -> sagittis
    org.bukkit.util.Vector offset -> cubilia
    org.bukkit.util.Vector size -> nd
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    void <init>(org.bukkit.Location) -> <init>
    boolean isWithinShape(org.bukkit.Location) -> molestie
    org.bukkit.Location randomLocation() -> aB
    org.bukkit.Location randomSurface() -> aC
    org.bukkit.Location getCenter() -> getCenter
    org.bukkit.Location getLocation() -> getLocation
    org.bukkit.util.Vector getOffset() -> varius
    org.bukkit.util.Vector getSize() -> aD
com.volmit.wormholes.util.ShockEffect -> com.volmit.wormholes.src.w:
    java.lang.Float power -> ne
    void <init>(java.lang.Float) -> <init>
    void play(org.bukkit.Location,org.bukkit.util.Vector) -> ipsum
    com.volmit.wormholes.util.LineParticleManipulator getArm() -> aE
com.volmit.wormholes.util.ShockEffect$1 -> com.volmit.wormholes.src.x:
    com.volmit.wormholes.util.ShockEffect this$0 -> nf
    void <init>(com.volmit.wormholes.util.ShockEffect) -> <init>
    void play(org.bukkit.Location) -> mi
com.volmit.wormholes.util.ShortTag -> com.volmit.wormholes.src.y:
    short value -> value
    void <init>(java.lang.String,short) -> <init>
    java.lang.Short getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.Slot -> com.volmit.wormholes.src.z:
    java.lang.Integer x -> cx
    java.lang.Integer y -> ng
    java.lang.Integer s -> nh
    void <init>(java.lang.Integer,java.lang.Integer) -> <init>
    void <init>(java.lang.Integer) -> <init>
    java.lang.Integer getSlot() -> aF
    java.lang.Integer getX() -> models
    java.lang.Integer getY() -> aG
    int getPosition(int,int) -> Morbi
    void setSlot(java.lang.Integer) -> amet
    void setX(java.lang.Integer) -> ipsum
    void setY(java.lang.Integer) -> consectetur
    java.lang.String toString() -> toString
    com.volmit.wormholes.util.Slot copy() -> aH
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.volmit.wormholes.util.SortedGMap -> com.volmit.wormholes.src.B:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    com.volmit.wormholes.util.GList k() -> users
    com.volmit.wormholes.util.GList v() -> obfuscate
com.volmit.wormholes.util.SphereParticleManipulator -> com.volmit.wormholes.src.C:
    void <init>() -> <init>
    void play(org.bukkit.Location,java.lang.Double,java.lang.Double) -> Lorem
com.volmit.wormholes.util.StringTag -> com.volmit.wormholes.src.D:
    java.lang.String value -> value
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.SubCommand -> com.volmit.wormholes.src.E:
    java.lang.String sub -> ni
    com.volmit.wormholes.util.GList osub -> nj
    java.lang.String description -> description
    void <init>(java.lang.String,java.lang.String,java.lang.String[]) -> <init>
    void cs(org.bukkit.command.CommandSender,java.lang.String[]) -> ipsum
    void cp(org.bukkit.entity.Player,java.lang.String[]) -> Lorem
    java.lang.String getSub() -> aI
    com.volmit.wormholes.util.GList getOsub() -> aJ
    java.lang.String getDescription() -> getDescription
com.volmit.wormholes.util.SubGroup -> com.volmit.wormholes.src.F:
    com.volmit.wormholes.util.GList subCommands -> nk
    java.lang.String root -> nl
    void <init>(java.lang.String) -> <init>
    void add(com.volmit.wormholes.util.SubCommand) -> Lorem
    void showHelp(org.bukkit.command.CommandSender) -> dolor
    void sendLine(org.bukkit.command.CommandSender,com.volmit.wormholes.util.SubCommand) -> Lorem
    void hit(org.bukkit.command.CommandSender,java.lang.String[]) -> dolor
com.volmit.wormholes.util.SystemEffect -> com.volmit.wormholes.src.G:
    com.volmit.wormholes.util.GList effects -> nm
    void <init>() -> <init>
    com.volmit.wormholes.util.GList getEffects() -> unleash
    void play(org.bukkit.Location) -> mi
    void addEffect(com.volmit.wormholes.util.VisualEffect) -> Lorem
com.volmit.wormholes.util.TFColor -> com.volmit.wormholes.src.H:
    com.volmit.wormholes.util.C c -> p
    void <init>(com.volmit.wormholes.util.C) -> <init>
    java.lang.String onFilter(java.lang.String) -> mollis
com.volmit.wormholes.util.TFRemove -> com.volmit.wormholes.src.I:
    java.lang.String grep -> nn
    void <init>(java.lang.String) -> <init>
    java.lang.String onFilter(java.lang.String) -> mollis
com.volmit.wormholes.util.TFReplace -> com.volmit.wormholes.src.J:
    java.lang.String grep -> nn
    java.lang.String rep -> no
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String onFilter(java.lang.String) -> mollis
com.volmit.wormholes.util.TICK -> com.volmit.wormholes.src.K:
    long tick -> np
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.TXT -> com.volmit.wormholes.src.L:
    void <init>() -> <init>
    java.lang.String repeat(java.lang.String,int) -> repeat
    com.volmit.wormholes.util.GList wrap(java.lang.String,int) -> sit
    java.lang.String makeTag(com.volmit.wormholes.util.C,com.volmit.wormholes.util.C,com.volmit.wormholes.util.C,com.volmit.wormholes.util.C,java.lang.String) -> Lorem
    java.lang.String makeTag(com.volmit.wormholes.util.C,com.volmit.wormholes.util.C,com.volmit.wormholes.util.C,java.lang.String) -> Lorem
    java.lang.String line(com.volmit.wormholes.util.C,int) -> Lorem
    java.lang.String underline(com.volmit.wormholes.util.C,int) -> ipsum
    java.lang.String getLine(com.volmit.wormholes.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> Lorem
com.volmit.wormholes.util.TabbedWindow -> com.volmit.wormholes.src.M:
    com.volmit.wormholes.util.GMap elements -> cB
    void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    void bindTab(com.volmit.wormholes.util.Element,java.lang.Integer) -> Lorem
    void setTab(int) -> vehicula
com.volmit.wormholes.util.Tabled -> com.volmit.wormholes.src.N:
    java.lang.String value() -> value
com.volmit.wormholes.util.Tabulator -> com.volmit.wormholes.src.O:
    long serialVersionUID -> serialVersionUID
    int tabSize -> nq
    void <init>(int) -> <init>
    void <init>(java.util.Set,int) -> <init>
    void <init>(java.util.Collection,int) -> <init>
    void <init>(java.util.Iterator,int) -> <init>
    void <init>(java.lang.Object[],int) -> <init>
    void <init>(java.util.List,int) -> <init>
    int getTabCount() -> getTabCount
    int getFirstIndex(int) -> porta
    int getLastIndex(int) -> ultricies
    com.volmit.wormholes.util.GList getTab(int) -> vestibulum
    boolean hasTab(int) -> felis
    int getTabSize() -> getTabSize
    void setTabSize(int) -> setTabSize
com.volmit.wormholes.util.Tag -> com.volmit.wormholes.src.P:
    java.lang.String name -> name
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    java.lang.Object getValue() -> getValue
com.volmit.wormholes.util.TagProvider -> com.volmit.wormholes.src.Q:
    java.lang.String getChatTag() -> aK
    java.lang.String getChatTagHover() -> aL
com.volmit.wormholes.util.Task -> com.volmit.wormholes.src.R:
    int taskx -> nr
    com.volmit.wormholes.util.FinalInteger task -> ns
    java.lang.Boolean running -> nt
    void <init>(int) -> <init>
    void run() -> run
    void cancel() -> cancel
    boolean isRunning() -> isRunning
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Task$1 -> com.volmit.wormholes.src.S:
    com.volmit.wormholes.util.Task this$0 -> nu
    void <init>(com.volmit.wormholes.util.Task) -> <init>
    void run() -> run
com.volmit.wormholes.util.TaskLater -> com.volmit.wormholes.src.T:
    int taskx -> nr
    void <init>() -> <init>
    void <init>(java.lang.Integer) -> <init>
    void run() -> run
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.TaskLater$1 -> com.volmit.wormholes.src.U:
    com.volmit.wormholes.util.TaskLater this$0 -> nv
    void <init>(com.volmit.wormholes.util.TaskLater) -> <init>
    void run() -> run
com.volmit.wormholes.util.TaskManager -> com.volmit.wormholes.src.V:
    void <init>() -> <init>
com.volmit.wormholes.util.TextFilter -> com.volmit.wormholes.src.W:
    java.lang.String onFilter(java.lang.String) -> mollis
com.volmit.wormholes.util.TextFilterer -> com.volmit.wormholes.src.X:
    com.volmit.wormholes.util.GList filters -> nw
    void <init>() -> <init>
    void registerFilter(com.volmit.wormholes.util.TextFilter) -> Lorem
    java.lang.String onFilter(java.lang.String) -> mollis
    java.lang.String filter(java.lang.String) -> convallis
com.volmit.wormholes.util.TextListener -> com.volmit.wormholes.src.Y:
    org.bukkit.entity.Player player -> player
    void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> Lorem
    void onTextEntered(java.lang.String) -> viverra
com.volmit.wormholes.util.TextListener$1 -> com.volmit.wormholes.src.Z:
    org.bukkit.event.player.AsyncPlayerChatEvent val$e -> nx
    com.volmit.wormholes.util.TextListener this$0 -> ny
    void <init>(com.volmit.wormholes.util.TextListener,org.bukkit.event.player.AsyncPlayerChatEvent) -> <init>
    void run() -> run
com.volmit.wormholes.util.ThreadInformation -> com.volmit.wormholes.src.aa:
    double ticksPerSecond -> nz
    int queuedSize -> nA
    boolean processing -> nB
    double utilization -> nC
    com.volmit.wormholes.util.Average ticksPerSecondAverage -> nD
    long tick -> np
    int id -> id
    void <init>(int) -> <init>
    double getTicksPerSecond() -> aM
    void setTicksPerSecond(double) -> purus
    int getQueuedSize() -> aN
    void setQueuedSize(int) -> nec
    boolean isProcessing() -> aO
    void setProcessing(boolean) -> in
    double getUtilization() -> aP
    void setUtilization(double) -> non
    double getTicksPerSecondAverage() -> aQ
    long getTick() -> getTick
    void setTick(long) -> setTick
    long getTickLag() -> aR
    int getId() -> getId
com.volmit.wormholes.util.TickHandle -> com.volmit.wormholes.src.ab:
    com.volmit.wormholes.util.TickHandler value() -> aS
com.volmit.wormholes.util.TickHandler -> com.volmit.wormholes.src.ae:
    com.volmit.wormholes.util.TickHandler SYNCED -> nE
    com.volmit.wormholes.util.TickHandler REALTIME -> nF
    com.volmit.wormholes.util.TickHandler[] $VALUES -> nG
    com.volmit.wormholes.util.TickHandler[] values() -> values
    com.volmit.wormholes.util.TickHandler valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.Ticked -> com.volmit.wormholes.src.af:
    double value() -> value
com.volmit.wormholes.util.Timed -> com.volmit.wormholes.src.ag:
    long time -> time
    java.lang.String id -> id
    com.volmit.wormholes.util.GList timers -> nH
    void <init>(java.lang.String,long) -> <init>
    long getTime() -> getTime
    void setTime(long) -> setTime
    java.lang.String getId() -> getId
    void setId(java.lang.String) -> setId
    com.volmit.wormholes.util.GList getTimers() -> aT
    void setTimers(com.volmit.wormholes.util.GList) -> dictum
    double getTimeMS() -> aU
    double getTotalTimeMS() -> aV
    long getTotalTime() -> getTotalTime
    com.volmit.wormholes.util.GList toLines() -> aW
    com.volmit.wormholes.util.GList toLines(int,int) -> pulvinar
    com.volmit.wormholes.util.GList toLines(int,int,com.volmit.wormholes.util.GList) -> Lorem
    com.volmit.wormholes.util.Timed get(java.lang.String) -> lacus
    void hit(java.lang.String,long) -> sit
    void hit(com.volmit.wormholes.util.Timed) -> Lorem
com.volmit.wormholes.util.Timer -> com.volmit.wormholes.src.ah:
    long tns -> nI
    long cns -> nJ
    void <init>() -> <init>
    void start() -> start
    void stop() -> stop
    long getTime() -> getTime
    long getLastRun() -> aX
com.volmit.wormholes.util.Title -> com.volmit.wormholes.src.ai:
    java.lang.String title -> title
    java.lang.String subTitle -> nK
    java.lang.String action -> action
    java.lang.Integer fadeIn -> nL
    java.lang.Integer fadeOut -> nM
    java.lang.Integer stayTime -> nN
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    void send(org.bukkit.entity.Player) -> ligula
    java.lang.String getTitle() -> getTitle
    com.volmit.wormholes.util.Title setTitle(java.lang.String) -> eu
    java.lang.String getSubTitle() -> aY
    com.volmit.wormholes.util.Title setSubTitle(java.lang.String) -> Phasellus
    java.lang.String getAction() -> getAction
    com.volmit.wormholes.util.Title setAction(java.lang.String) -> accumsan
    java.lang.Integer getFadeIn() -> aZ
    void setFadeIn(java.lang.Integer) -> adipiscing
    java.lang.Integer getFadeOut() -> ba
    void setFadeOut(java.lang.Integer) -> elit
    java.lang.Integer getStayTime() -> bb
    void setStayTime(java.lang.Integer) -> Morbi
    java.lang.Integer totalTime() -> bc
com.volmit.wormholes.util.Transmission -> com.volmit.wormholes.src.aj:
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    java.lang.String getType() -> getType
    java.lang.String getDestination() -> dictumst
    java.lang.String getSource() -> getSource
    void setType(java.lang.String) -> setType
    void setSource(java.lang.String) -> setSource
    void setDestination(java.lang.String) -> ipsum
com.volmit.wormholes.util.VariableBlock -> com.volmit.wormholes.src.ak:
    com.volmit.wormholes.util.GList blocks -> nO
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(com.volmit.wormholes.util.MaterialBlock[]) -> <init>
    void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    void <init>(org.bukkit.Material) -> <init>
    com.volmit.wormholes.util.GList getBlocks() -> erat
    com.volmit.wormholes.util.MaterialBlock random() -> bd
    boolean is(com.volmit.wormholes.util.MaterialBlock) -> ipsum
    void addBlock(com.volmit.wormholes.util.MaterialBlock) -> dolor
    void removeBlock(com.volmit.wormholes.util.MaterialBlock) -> sit
    void fromString(java.lang.String) -> sit
    java.lang.String toString() -> toString
com.volmit.wormholes.util.VectorMath -> com.volmit.wormholes.src.al:
    void <init>() -> <init>
    org.bukkit.util.Vector scaleStatic(com.volmit.wormholes.util.Axis,org.bukkit.util.Vector,double) -> Lorem
    org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> Lorem
    org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> ipsum
    org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> dolor
    org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> consectetur
    boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> ipsum
    org.bukkit.util.Vector rotate(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Direction,org.bukkit.util.Vector) -> ipsum
    org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> adipiscing
    org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> elit
    org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> Morbi
    org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> pulvinar
    org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> vulputate
    org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> dictum
    org.bukkit.util.Vector getAxis(com.volmit.wormholes.util.Direction,com.volmit.wormholes.util.Direction) -> sit
    double round(double,int) -> sit
    org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> Lorem
    org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> Lorem
    com.volmit.wormholes.util.GList split(org.bukkit.block.BlockFace) -> Lorem
    org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> sit
    org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> amet
    org.bukkit.util.Vector toVector(float,float) -> dolor
    void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> Lorem
    void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> Lorem
    org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> Vestibulum
    double getSpeed(org.bukkit.util.Vector) -> in
    com.volmit.wormholes.util.GList shift(org.bukkit.util.Vector,com.volmit.wormholes.util.GList) -> Lorem
    org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> purus
    org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> Lorem
    org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> ipsum
    org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> dolor
    org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> sit
    org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> non
com.volmit.wormholes.util.VectorMath$1 -> com.volmit.wormholes.src.am:
    org.bukkit.util.Vector val$vector -> nP
    void <init>(org.bukkit.util.Vector) -> <init>
    org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> mi
    java.lang.Object onAdapt(java.lang.Object) -> ipsum
com.volmit.wormholes.util.VectorMath$2 -> com.volmit.wormholes.src.an:
    int[] $SwitchMap$com$volmit$wormholes$util$Axis -> Y
    int[] $SwitchMap$org$bukkit$block$BlockFace -> nQ
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.VectorSchematic -> com.volmit.wormholes.src.ao:
    com.volmit.wormholes.util.GMap schematic -> nR
    void <init>() -> <init>
    boolean contains(com.volmit.wormholes.util.MaterialBlock) -> amet
    boolean containsMultiple(com.volmit.wormholes.util.MaterialBlock) -> consectetur
    com.volmit.wormholes.util.GList find(com.volmit.wormholes.util.MaterialBlock) -> adipiscing
    com.volmit.wormholes.util.GMap match(org.bukkit.Location) -> odio
    com.volmit.wormholes.util.GMap getSchematic() -> be
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
com.volmit.wormholes.util.VectorTrace -> com.volmit.wormholes.src.ap:
    org.bukkit.Location hit -> nS
    void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    boolean canHit(org.bukkit.Location) -> a
    org.bukkit.Location getHit() -> bf
com.volmit.wormholes.util.VersionBukkit -> com.volmit.wormholes.src.aq:
    com.volmit.wormholes.util.VersionBukkit VU -> nT
    com.volmit.wormholes.util.VersionBukkit V7 -> nU
    com.volmit.wormholes.util.VersionBukkit V8 -> nV
    com.volmit.wormholes.util.VersionBukkit V9 -> nW
    com.volmit.wormholes.util.VersionBukkit V11 -> nX
    com.volmit.wormholes.util.VersionBukkit V111 -> nY
    com.volmit.wormholes.util.VersionBukkit[] $VALUES -> nZ
    com.volmit.wormholes.util.VersionBukkit[] values() -> values
    com.volmit.wormholes.util.VersionBukkit valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean tc() -> bg
    boolean uc() -> bh
    com.volmit.wormholes.util.VersionBukkit get() -> bi
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.VisualEffect -> com.volmit.wormholes.src.ar:
    com.volmit.wormholes.util.GList getEffects() -> unleash
    void play(org.bukkit.Location) -> mi
    void addEffect(com.volmit.wormholes.util.VisualEffect) -> Lorem
com.volmit.wormholes.util.W -> com.volmit.wormholes.src.as:
    void <init>() -> <init>
    boolean visible(org.bukkit.block.Block) -> ipsum
    org.bukkit.DyeColor getColor(org.bukkit.Location) -> facilisis
    org.bukkit.DyeColor getColor(org.bukkit.block.Block) -> dolor
    void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> Lorem
    org.bukkit.entity.Entity getEntity(int) -> tristique
    int count(org.bukkit.entity.Player,com.volmit.wormholes.util.MaterialBlock) -> Lorem
    boolean has(org.bukkit.entity.Player,com.volmit.wormholes.util.MaterialBlock,int) -> Lorem
    int getChunkX(org.bukkit.block.Block) -> sit
    int getChunkY(org.bukkit.block.Block) -> amet
    void dropXp(org.bukkit.Location,int) -> dolor
    int getChunkZ(org.bukkit.block.Block) -> consectetur
    void take(org.bukkit.entity.Player,com.volmit.wormholes.util.MaterialBlock,int) -> ipsum
    int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> Lorem
    com.volmit.wormholes.util.GList news(org.bukkit.Location) -> In
    int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> Lorem
    com.volmit.wormholes.util.GList getBlocks(org.bukkit.Chunk) -> sit
    com.volmit.wormholes.util.GList getChunklets(org.bukkit.Chunk) -> amet
    org.bukkit.World getSyncWorld(org.bukkit.World) -> ipsum
    com.volmit.wormholes.util.GList getChunklets(com.volmit.wormholes.util.GList) -> Vestibulum
    com.volmit.wormholes.util.MaterialBlock getMaterialBlock(java.lang.String) -> egestas
    org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> Lorem
    void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> Lorem
    void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> Lorem
    void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> Lorem
    void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> Lorem
    void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> Lorem
    void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> Lorem
    int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> Lorem
    com.volmit.wormholes.util.GList chunkFaces(org.bukkit.Chunk) -> consectetur
    com.volmit.wormholes.util.GList blockFaces(org.bukkit.block.Block) -> adipiscing
    org.bukkit.Location simulateFall(org.bukkit.Location) -> hac
    com.volmit.wormholes.util.GList chunkRadius(org.bukkit.Chunk,int) -> Lorem
    com.volmit.wormholes.util.GList blockRadius(org.bukkit.block.Block,int) -> Lorem
    org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> Lorem
    boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> Lorem
    double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> Lorem
    int chunkDistance(org.bukkit.Chunk,org.bukkit.Chunk) -> Lorem
    boolean isColored(org.bukkit.block.Block) -> elit
com.volmit.wormholes.util.W$1 -> com.volmit.wormholes.src.au:
    java.lang.Double val$doff -> hI
    org.bukkit.entity.Entity val$e -> oa
    org.bukkit.entity.Entity[] val$result -> hK
    void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    void onTrace(org.bukkit.Location) -> amet
com.volmit.wormholes.util.Window -> com.volmit.wormholes.src.av:
    com.volmit.wormholes.util.Window open() -> U
    void update() -> update
    com.volmit.wormholes.util.Window close() -> S
    void onClose(com.volmit.wormholes.util.Window,org.bukkit.entity.Player) -> Lorem
    com.volmit.wormholes.util.Window build() -> V
    boolean contains(com.volmit.wormholes.util.Slot) -> ipsum
    boolean contains(com.volmit.wormholes.util.Element) -> ipsum
    com.volmit.wormholes.util.Element getElement(com.volmit.wormholes.util.Slot) -> dolor
    com.volmit.wormholes.util.Window addElement(com.volmit.wormholes.util.Element) -> Lorem
    com.volmit.wormholes.util.Window removeElement(com.volmit.wormholes.util.Element) -> dolor
    java.lang.String getTitle() -> getTitle
    com.volmit.wormholes.util.Window setTitle(java.lang.String) -> commodo
    com.volmit.wormholes.util.GList getElements() -> W
    com.volmit.wormholes.util.Window setElements(com.volmit.wormholes.util.GList) -> vulputate
    org.bukkit.entity.Player getViewer() -> Proin
    org.bukkit.inventory.Inventory getInventory() -> getInventory
    java.util.UUID getId() -> getId
    com.volmit.wormholes.util.Element getBackground() -> X
    com.volmit.wormholes.util.Window setBackground(com.volmit.wormholes.util.Element) -> sit
    java.lang.Integer getViewport() -> Y
    com.volmit.wormholes.util.Window setViewport(java.lang.Integer) -> sit
    com.volmit.wormholes.util.Window setInventory(org.bukkit.inventory.Inventory) -> sit
    boolean onClick(com.volmit.wormholes.util.Element,org.bukkit.entity.Player) -> Lorem
    boolean isOpen() -> isOpen
com.volmit.wormholes.util.WindowBorder -> com.volmit.wormholes.src.aw:
    com.volmit.wormholes.util.GMap directionSet -> ob
    void <init>() -> <init>
    com.volmit.wormholes.util.WindowBorder put(com.volmit.wormholes.util.BorderDirection,int) -> Lorem
    boolean isValid(com.volmit.wormholes.util.Slot) -> sit
com.volmit.wormholes.util.Worlds -> com.volmit.wormholes.src.ax:
    void <init>() -> <init>
    com.volmit.wormholes.util.GList getWorlds() -> bj
    boolean hasWorld(java.lang.String) -> Praesent
    org.bukkit.World getWorld(java.lang.String) -> getWorld
com.volmit.wormholes.util.Wraith -> com.volmit.wormholes.src.ay:
    com.volmit.wormholes.util.ParallelPoolManager poolManager -> oc
    org.bukkit.plugin.Plugin instance -> od
    void <init>() -> <init>
    void registerListener(org.bukkit.event.Listener) -> Lorem
    void callEvent(org.bukkit.event.Event) -> callEvent
    void unregisterListener(org.bukkit.event.Listener) -> ipsum
    int scheduleSyncRepeatingTask(int,int,java.lang.Runnable) -> Lorem
    int scheduleSyncTask(int,java.lang.Runnable) -> Lorem
    void cancelTask(int) -> cancelTask
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperHandshakingClientSetProtocol -> com.volmit.wormholes.src.az:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(int) -> setProtocolVersion
    java.lang.String getServerAddressHostnameOrIp() -> bk
    void setServerAddressHostnameOrIp(java.lang.String) -> eros
    int getServerPort() -> getServerPort
    void setServerPort(int) -> lacinia
    com.comphenix.protocol.PacketType$Protocol getNextState() -> bl
    void setNextState(com.comphenix.protocol.PacketType$Protocol) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperLoginClientEncryptionBegin -> com.volmit.wormholes.src.aA:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    byte[] getSharedSecret() -> getSharedSecret
    void setSharedSecret(byte[]) -> setSharedSecret
    byte[] getVerifyToken() -> getVerifyToken
    void setVerifyToken(byte[]) -> setVerifyToken
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperLoginClientStart -> com.volmit.wormholes.src.aB:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperLoginServerDisconnect -> com.volmit.wormholes.src.aC:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> bm
    com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> bn
    void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> Lorem
    void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperLoginServerEncryptionBegin -> com.volmit.wormholes.src.aD:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getServerId() -> getServerId
    void setServerId(java.lang.String) -> setServerId
    java.security.PublicKey getPublicKey() -> getPublicKey
    void setPublicKey(java.security.PublicKey) -> setPublicKey
    byte[] getVerifyToken() -> getVerifyToken
    void setVerifyToken(byte[]) -> setVerifyToken
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperLoginServerSetCompression -> com.volmit.wormholes.src.aE:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getThreshold() -> getThreshold
    void setThreshold(int) -> setThreshold
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperLoginServerSuccess -> com.volmit.wormholes.src.aF:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedGameProfile getProfile() -> getProfile
    void setProfile(com.comphenix.protocol.wrappers.WrappedGameProfile) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientAbilities -> com.volmit.wormholes.src.aG:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean isInvulnurable() -> bo
    void setInvulnurable(boolean) -> purus
    boolean isFlying() -> isFlying
    void setFlying(boolean) -> setFlying
    boolean canFly() -> bp
    void setCanFly(boolean) -> non
    boolean canInstantlyBuild() -> bq
    void setCanInstantlyBuild(boolean) -> mi
    float getFlyingSpeed() -> br
    void setFlyingSpeed(float) -> consectetur
    float getWalkingSpeed() -> bs
    void setWalkingSpeed(float) -> adipiscing
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientArmAnimation -> com.volmit.wormholes.src.aH:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientBlockDig -> com.volmit.wormholes.src.aI:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$Direction getDirection() -> bu
    void setDirection(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType getStatus() -> bv
    void setStatus(com.comphenix.protocol.wrappers.EnumWrappers$PlayerDigType) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientBlockPlace -> com.volmit.wormholes.src.aJ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Hand getHand() -> bw
    void setHand(com.comphenix.protocol.wrappers.EnumWrappers$Hand) -> Lorem
    long getTimestamp() -> getTimestamp
    void setTimestamp(long) -> euismod
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientBoatMove -> com.volmit.wormholes.src.aK:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean getLeftOar() -> bx
    void setLeftOar(boolean) -> euismod
    boolean getRightOar() -> by
    void setRightOar(boolean) -> Pellentesque
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientChat -> com.volmit.wormholes.src.aL:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientClientCommand -> com.volmit.wormholes.src.aM:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand getAction() -> bz
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$ClientCommand) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientCloseWindow -> com.volmit.wormholes.src.aN:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(int) -> Duis
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientCustomPayload -> com.volmit.wormholes.src.aO:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getChannel() -> getChannel
    void setChannel(java.lang.String) -> et
    io.netty.buffer.ByteBuf getContentsBuffer() -> bB
    byte[] getContents() -> bC
    void setContentsBuffer(io.netty.buffer.ByteBuf) -> Lorem
    void setContents(byte[]) -> dictum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientEnchantItem -> com.volmit.wormholes.src.aP:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(byte) -> elit
    int getEnchantment() -> bD
    void setEnchantment(int) -> tempor
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientEntityAction -> com.volmit.wormholes.src.aQ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction getAction() -> bF
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerAction) -> Lorem
    int getJumpBoost() -> bG
    void setJumpBoost(int) -> semper
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientFlying -> com.volmit.wormholes.src.aR:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientHeldItemSlot -> com.volmit.wormholes.src.aS:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> aliquam
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientKeepAlive -> com.volmit.wormholes.src.aT:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getKeepAliveId() -> bI
    void setKeepAliveId(int) -> lectus
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientLook -> com.volmit.wormholes.src.aU:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientPosition -> com.volmit.wormholes.src.aV:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientPositionLook -> com.volmit.wormholes.src.aW:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientResourcePackStatus -> com.volmit.wormholes.src.aX:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus getResult() -> bJ
    void setResult(com.comphenix.protocol.wrappers.EnumWrappers$ResourcePackStatus) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientSetCreativeSlot -> com.volmit.wormholes.src.aY:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> aliquam
    org.bukkit.inventory.ItemStack getClickedItem() -> bK
    void setClickedItem(org.bukkit.inventory.ItemStack) -> in
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientSettings -> com.volmit.wormholes.src.aZ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getLocale() -> getLocale
    void setLocale(java.lang.String) -> setLocale
    int getViewDistance() -> getViewDistance
    void setViewDistance(byte) -> setViewDistance
    com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility getChatFlags() -> bL
    void setChatFlags(com.comphenix.protocol.wrappers.EnumWrappers$ChatVisibility) -> Lorem
    boolean getChatColours() -> bM
    void setChatColours(boolean) -> setChatColours
    int getDisplayedSkinParts() -> bN
    void setDisplayedSkinParts(int) -> consequat
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientSpectate -> com.volmit.wormholes.src.ba:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.util.UUID getTargetPlayer() -> bO
    void setTargetPlayer(java.util.UUID) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientSteerVehicle -> com.volmit.wormholes.src.bb:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getSideways() -> bP
    void setSideways(float) -> elit
    float getForward() -> bQ
    void setForward(float) -> Morbi
    boolean isJump() -> bR
    void setJump(boolean) -> iaculis
    boolean isUnmount() -> bS
    void setUnmount(boolean) -> urna
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientTabComplete -> com.volmit.wormholes.src.bc:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    com.comphenix.protocol.wrappers.BlockPosition getHasPosition() -> bT
    void setHasPosition(com.comphenix.protocol.wrappers.BlockPosition) -> ipsum
    com.comphenix.protocol.wrappers.BlockPosition getLookedAtBlock() -> bU
    void setLookedAtBlock(com.comphenix.protocol.wrappers.BlockPosition) -> dolor
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientTeleportAccept -> com.volmit.wormholes.src.bd:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getTeleportId() -> bV
    void setTeleportId(int) -> neque
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientTransaction -> com.volmit.wormholes.src.be:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(byte) -> elit
    short getActionNumber() -> bW
    void setActionNumber(short) -> ipsum
    boolean getAccepted() -> bX
    void setAccepted(boolean) -> Proin
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientUpdateSign -> com.volmit.wormholes.src.bf:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    java.lang.String[] getLines() -> getLines
    void setLines(java.lang.String[]) -> in
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientUseEntity -> com.volmit.wormholes.src.bg:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getTargetID() -> bY
    org.bukkit.entity.Entity getTarget(org.bukkit.World) -> sit
    org.bukkit.entity.Entity getTarget(com.comphenix.protocol.events.PacketEvent) -> ipsum
    void setTargetID(int) -> sagittis
    com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction getType() -> bZ
    void setType(com.comphenix.protocol.wrappers.EnumWrappers$EntityUseAction) -> Lorem
    org.bukkit.util.Vector getTargetVector() -> ca
    void setTargetVector(org.bukkit.util.Vector) -> euismod
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientUseItem -> com.volmit.wormholes.src.bh:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$Direction getFace() -> cb
    void setFace(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> ipsum
    com.comphenix.protocol.wrappers.EnumWrappers$Hand getHand() -> bw
    void setHand(com.comphenix.protocol.wrappers.EnumWrappers$Hand) -> Lorem
    float getCursorPositionX() -> cc
    void setCursorPositionX(float) -> pulvinar
    float getCursorPositionY() -> cd
    void setCursorPositionY(float) -> vulputate
    float getCursorPositionZ() -> ce
    void setCursorPositionZ(float) -> dictum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientVehicleMove -> com.volmit.wormholes.src.bi:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientWindowClick -> com.volmit.wormholes.src.bj:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(int) -> Duis
    int getSlot() -> getSlot
    void setSlot(int) -> aliquam
    int getButton() -> getButton
    void setButton(int) -> lorem
    short getActionNumber() -> bW
    void setActionNumber(short) -> ipsum
    org.bukkit.inventory.ItemStack getClickedItem() -> bK
    void setClickedItem(org.bukkit.inventory.ItemStack) -> in
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType getShift() -> cf
    void setShift(com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType -> com.volmit.wormholes.src.bk:
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType PICKUP -> og
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType QUICK_MOVE -> oh
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType SWAP -> oi
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType CLONE -> oj
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType THROW -> ok
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType QUICK_CRAFT -> ol
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType PICKUP_ALL -> om
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType[] $VALUES -> on
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType[] values() -> values
    com.volmit.wormholes.util.WrapperPlayClientWindowClick$InventoryClickType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerAbilities -> com.volmit.wormholes.src.bl:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    boolean isInvulnurable() -> bo
    void setInvulnurable(boolean) -> purus
    boolean isFlying() -> isFlying
    void setFlying(boolean) -> setFlying
    boolean canFly() -> bp
    void setCanFly(boolean) -> non
    boolean canInstantlyBuild() -> bq
    void setCanInstantlyBuild(boolean) -> mi
    float getFlyingSpeed() -> br
    void setFlyingSpeed(float) -> consectetur
    float getWalkingSpeed() -> bs
    void setWalkingSpeed(float) -> adipiscing
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerAnimation -> com.volmit.wormholes.src.bm:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    int getAnimation() -> cg
    void setAnimation(int) -> vel
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerAttachEntity -> com.volmit.wormholes.src.bn:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    int getVehicleId() -> ch
    void setVehicleId(int) -> Quisque
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerBed -> com.volmit.wormholes.src.bo:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerBlockAction -> com.volmit.wormholes.src.bp:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    int getByte1() -> ci
    void setByte1(int) -> congue
    int getByte2() -> cj
    void setByte2(int) -> vitae
    org.bukkit.Material getBlockType() -> ck
    void setBlockType(org.bukkit.Material) -> dolor
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerBlockBreakAnimation -> com.volmit.wormholes.src.bq:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    int getDestroyStage() -> cl
    void setDestroyStage(int) -> ornare
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerBlockChange -> com.volmit.wormholes.src.br:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    org.bukkit.Location getBukkitLocation(org.bukkit.World) -> amet
    com.comphenix.protocol.wrappers.WrappedBlockData getBlockData() -> cm
    void setBlockData(com.comphenix.protocol.wrappers.WrappedBlockData) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerCamera -> com.volmit.wormholes.src.bs:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCameraId() -> cn
    void setCameraId(int) -> Integer
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerChat -> com.volmit.wormholes.src.bt:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getMessage() -> co
    com.comphenix.protocol.wrappers.WrappedChatComponent getJsonData() -> bn
    void setMessage(com.comphenix.protocol.wrappers.WrappedChatComponent) -> dolor
    void setJsonData(com.comphenix.protocol.wrappers.WrappedChatComponent) -> ipsum
    byte getPosition() -> getPosition
    void setPosition(byte) -> setPosition
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerCloseWindow -> com.volmit.wormholes.src.bu:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(int) -> Duis
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerCollect -> com.volmit.wormholes.src.bv:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCollectedEntityId() -> cp
    void setCollectedEntityId(int) -> commodo
    int getCollectorEntityId() -> cq
    void setCollectorEntityId(int) -> ante
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerCombatEvent -> com.volmit.wormholes.src.bw:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType getEvent() -> cr
    void setEvent(com.comphenix.protocol.wrappers.EnumWrappers$CombatEventType) -> Lorem
    int getDuration() -> getDuration
    void setDuration(int) -> setDuration
    int getPlayerID() -> cs
    void setPlayerId(int) -> cursus
    int getEntityID() -> bE
    void setEntityId(int) -> setEntityId
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerCombatEvent$1 -> com.volmit.wormholes.src.bx:
    int[] $SwitchMap$com$comphenix$protocol$wrappers$EnumWrappers$CombatEventType -> oo
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerCustomPayload -> com.volmit.wormholes.src.by:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getChannel() -> getChannel
    void setChannel(java.lang.String) -> et
    io.netty.buffer.ByteBuf getContentsBuffer() -> bB
    byte[] getContents() -> bC
    void setContentsBuffer(io.netty.buffer.ByteBuf) -> Lorem
    void setContents(byte[]) -> dictum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerCustomSoundEffect -> com.volmit.wormholes.src.bz:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getSoundName() -> ct
    void setSoundName(java.lang.String) -> sodales
    com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory getSoundCategory() -> cu
    void setSoundCategory(com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory) -> Lorem
    int getX() -> getX
    void setX(int) -> setX
    int getY() -> getY
    void setY(int) -> setY
    int getZ() -> getZ
    void setZ(int) -> setZ
    float getVolume() -> cv
    void setVolume(float) -> Vestibulum
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntity -> com.volmit.wormholes.src.bA:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityDestroy -> com.volmit.wormholes.src.bB:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCount() -> getCount
    int[] getEntityIDs() -> cw
    void setEntityIds(int[]) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityEffect -> com.volmit.wormholes.src.bC:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    byte getEffectID() -> cx
    void setEffectID(byte) -> Morbi
    byte getAmplifier() -> cy
    void setAmplifier(byte) -> pulvinar
    int getDuration() -> getDuration
    void setDuration(int) -> setDuration
    boolean getHideParticles() -> cz
    void setHideParticles(boolean) -> ac
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityEquipment -> com.volmit.wormholes.src.bD:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$ItemSlot getSlot() -> cA
    void setSlot(com.comphenix.protocol.wrappers.EnumWrappers$ItemSlot) -> Lorem
    org.bukkit.inventory.ItemStack getItem() -> getItem
    void setItem(org.bukkit.inventory.ItemStack) -> setItem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityHeadRotation -> com.volmit.wormholes.src.bE:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    byte getHeadYaw() -> cB
    void setHeadYaw(byte) -> vulputate
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityLook -> com.volmit.wormholes.src.bF:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityMetadata -> com.volmit.wormholes.src.bG:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    java.util.List getMetadata() -> getMetadata
    void setMetadata(java.util.List) -> setMetadata
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityStatus -> com.volmit.wormholes.src.bH:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    byte getEntityStatus() -> cC
    void setEntityStatus(byte) -> dictum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityTeleport -> com.volmit.wormholes.src.bI:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerEntityVelocity -> com.volmit.wormholes.src.bJ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    double getVelocityX() -> cD
    void setVelocityX(double) -> mi
    double getVelocityY() -> cE
    void setVelocityY(double) -> euismod
    double getVelocityZ() -> cF
    void setVelocityZ(double) -> Pellentesque
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerExperience -> com.volmit.wormholes.src.bK:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getExperienceBar() -> cG
    void setExperienceBar(float) -> in
    int getLevel() -> getLevel
    void setLevel(int) -> setLevel
    int getTotalExperience() -> getTotalExperience
    void setTotalExperience(int) -> setTotalExperience
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerExplosion -> com.volmit.wormholes.src.bL:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getRadius() -> getRadius
    void setRadius(float) -> setRadius
    java.util.List getRecors() -> cH
    void setRecords(java.util.List) -> amet
    float getPlayerVelocityX() -> cI
    void setPlayerVelocityX(float) -> purus
    float getPlayerVelocityY() -> cJ
    void setPlayerVelocityY(float) -> non
    float getPlayerVelocityZ() -> cK
    void setPlayerVelocityZ(float) -> mi
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerGameStateChange -> com.volmit.wormholes.src.bM:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getReason() -> getReason
    void setReason(int) -> suscipit
    float getValue() -> getValue
    void setValue(float) -> setValue
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerHeldItemSlot -> com.volmit.wormholes.src.bN:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getSlot() -> getSlot
    void setSlot(int) -> aliquam
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerKeepAlive -> com.volmit.wormholes.src.bO:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getKeepAliveId() -> bI
    void setKeepAliveId(int) -> lectus
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerKickDisconnect -> com.volmit.wormholes.src.bP:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getReason() -> bm
    void setReason(com.comphenix.protocol.wrappers.WrappedChatComponent) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerLogin -> com.volmit.wormholes.src.bQ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> cL
    void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> Lorem
    int getDimension() -> getDimension
    void setDimension(int) -> setDimension
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> cM
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> Lorem
    int getMaxPlayers() -> getMaxPlayers
    void setMaxPlayers(int) -> setMaxPlayers
    org.bukkit.WorldType getLevelType() -> cN
    void setLevelType(org.bukkit.WorldType) -> Lorem
    boolean getReducedDebugInfo() -> cO
    void setReducedDebugInfo(boolean) -> setReducedDebugInfo
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerMap -> com.volmit.wormholes.src.bR:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getItemDamage() -> cP
    void setItemDamage(int) -> Mauris
    byte getScale() -> cQ
    void setScale(byte) -> Vestibulum
    boolean getTrackingPosition() -> cR
    void setTrackingPosition(boolean) -> enim
    java.lang.Object[] getMapIcons() -> cS
    void setMapIcons(java.lang.Object[]) -> dolor
    int getColumns() -> getColumns
    void setColumns(int) -> setColumns
    int getRows() -> getRows
    void setRows(int) -> setRows
    int getX() -> getX
    void setX(int) -> setX
    int getZ() -> getZ
    void setZ(int) -> setZ
    byte[] getData() -> getData
    void setData(byte[]) -> setData
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerMapChunk -> com.volmit.wormholes.src.bS:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getChunkX() -> getChunkX
    void setChunkX(int) -> mollis
    int getChunkZ() -> getChunkZ
    void setChunkZ(int) -> convallis
    java.lang.Object getChunkMap() -> cT
    void setChunkMap(java.lang.Object) -> ac
    boolean getGroundUpContinuous() -> cU
    void setGroundUpContinuous(boolean) -> posuere
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerMount -> com.volmit.wormholes.src.bT:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    void setEntityID(int) -> eget
    int[] getPassengerIds() -> cV
    void setPassengerIds(int[]) -> ipsum
    java.util.List getPassengers(com.comphenix.protocol.events.PacketEvent) -> dolor
    java.util.List getPassengers(org.bukkit.World) -> consectetur
    void setPassengers(java.util.List) -> consectetur
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerMultiBlockChange -> com.volmit.wormholes.src.bU:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.ChunkCoordIntPair getChunk() -> getChunk
    void setChunk(com.comphenix.protocol.wrappers.ChunkCoordIntPair) -> Lorem
    com.comphenix.protocol.wrappers.MultiBlockChangeInfo[] getRecords() -> cW
    void setRecords(com.comphenix.protocol.wrappers.MultiBlockChangeInfo[]) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerNamedEntitySpawn -> com.volmit.wormholes.src.bV:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    java.util.UUID getPlayerUUID() -> cX
    void setPlayerUUID(java.util.UUID) -> ipsum
    org.bukkit.util.Vector getPosition() -> cY
    void setPosition(org.bukkit.util.Vector) -> Pellentesque
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> cZ
    void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerNamedSoundEffect -> com.volmit.wormholes.src.bW:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    org.bukkit.Sound getSoundEffect() -> da
    void setSoundEffect(org.bukkit.Sound) -> ipsum
    com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory getSoundCategory() -> cu
    void setSoundCategory(com.comphenix.protocol.wrappers.EnumWrappers$SoundCategory) -> Lorem
    int getEffectPositionX() -> db
    void setEffectPositionX(int) -> viverra
    int getEffectPositionY() -> dc
    void setEffectPositionY(int) -> lacus
    int getEffectPositionZ() -> dd
    void setEffectPositionZ(int) -> eu
    float getVolume() -> cv
    void setVolume(float) -> Vestibulum
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerOpenSignEditor -> com.volmit.wormholes.src.bX:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerOpenWindow -> com.volmit.wormholes.src.bY:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowID() -> de
    void setWindowID(int) -> Phasellus
    java.lang.String getInventoryType() -> df
    void setInventoryType(java.lang.String) -> scelerisque
    com.comphenix.protocol.wrappers.WrappedChatComponent getWindowTitle() -> dg
    void setWindowTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> sit
    int getNumberOfSlots() -> dh
    void setNumberOfSlots(int) -> accumsan
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerPlayerInfo -> com.volmit.wormholes.src.bZ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction getAction() -> di
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$PlayerInfoAction) -> Lorem
    java.util.List getData() -> dj
    void setData(java.util.List) -> adipiscing
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerPlayerListHeaderFooter -> com.volmit.wormholes.src.ca:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedChatComponent getHeader() -> dk
    void setHeader(com.comphenix.protocol.wrappers.WrappedChatComponent) -> amet
    com.comphenix.protocol.wrappers.WrappedChatComponent getFooter() -> dl
    void setFooter(com.comphenix.protocol.wrappers.WrappedChatComponent) -> consectetur
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerPosition -> com.volmit.wormholes.src.cb:
    com.comphenix.protocol.PacketType TYPE -> oe
    java.lang.Class FLAGS_CLASS -> op
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    com.comphenix.protocol.reflect.StructureModifier getFlagsModifier() -> dm
    java.util.Set getFlags() -> dn
    void setFlags(java.util.Set) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag -> com.volmit.wormholes.src.cc:
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag X -> oq
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag Y -> or
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag Z -> os
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag Y_ROT -> ot
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag X_ROT -> ou
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag[] $VALUES -> ov
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag[] values() -> values
    com.volmit.wormholes.util.WrapperPlayServerPosition$PlayerTeleportFlag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerRelEntityMove -> com.volmit.wormholes.src.cd:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    int getDx() -> do
    void setDx(int) -> egestas
    int getDy() -> dp
    void setDy(int) -> Praesent
    int getDz() -> dq
    void setDz(int) -> eros
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerRelEntityMoveLook -> com.volmit.wormholes.src.ce:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    double getDx() -> dr
    void setDx(double) -> at
    double getDy() -> ds
    void setDy(double) -> iaculis
    double getDz() -> dt
    void setDz(double) -> urna
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    boolean getOnGround() -> bH
    void setOnGround(boolean) -> at
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerRemoveEntityEffect -> com.volmit.wormholes.src.cf:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    org.bukkit.potion.PotionEffectType getEffect() -> du
    void setEffect(org.bukkit.potion.PotionEffectType) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerResourcePackSend -> com.volmit.wormholes.src.cg:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getUrl() -> getUrl
    void setUrl(java.lang.String) -> setUrl
    java.lang.String getHash() -> getHash
    void setHash(java.lang.String) -> velit
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerRespawn -> com.volmit.wormholes.src.ch:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getDimension() -> getDimension
    void setDimension(int) -> setDimension
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> cM
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode getGamemode() -> cL
    void setGamemode(com.comphenix.protocol.wrappers.EnumWrappers$NativeGameMode) -> Lorem
    org.bukkit.WorldType getLevelType() -> cN
    void setLevelType(org.bukkit.WorldType) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerScoreboardDisplayObjective -> com.volmit.wormholes.src.ci:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getPosition() -> getPosition
    void setPosition(int) -> setPosition
    java.lang.String getScoreName() -> getScoreName
    void setScoreName(java.lang.String) -> setScoreName
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective -> com.volmit.wormholes.src.cj:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getDisplayName() -> getDisplayName
    void setDisplayName(java.lang.String) -> setDisplayName
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay getHealthDisplay() -> dv
    void setHealthDisplay(com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay) -> Lorem
    int getMode() -> getMode
    void setMode(int) -> setMode
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay -> com.volmit.wormholes.src.ck:
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay INTEGER -> ow
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay HEARTS -> ox
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay[] $VALUES -> oy
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay[] values() -> values
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$HealthDisplay valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$Mode -> com.volmit.wormholes.src.cl:
    int ADD_OBJECTIVE -> oz
    int REMOVE_OBJECTIVE -> oA
    int UPDATE_VALUE -> oB
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$Mode INSTANCE -> oC
    void <init>() -> <init>
    com.volmit.wormholes.util.WrapperPlayServerScoreboardObjective$Mode getInstance() -> dw
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerScoreboardScore -> com.volmit.wormholes.src.cm:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getScoreName() -> getScoreName
    void setScoreName(java.lang.String) -> setScoreName
    java.lang.String getObjectiveName() -> dx
    void setObjectiveName(java.lang.String) -> Donec
    int getValue() -> getValue
    void setValue(int) -> setValue
    com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction getAction() -> dy
    void setScoreboardAction(com.comphenix.protocol.wrappers.EnumWrappers$ScoreboardAction) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerScoreboardTeam -> com.volmit.wormholes.src.cn:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getDisplayName() -> getDisplayName
    void setDisplayName(java.lang.String) -> setDisplayName
    java.lang.String getPrefix() -> getPrefix
    void setPrefix(java.lang.String) -> setPrefix
    java.lang.String getSuffix() -> getSuffix
    void setSuffix(java.lang.String) -> setSuffix
    java.lang.String getNameTagVisibility() -> getNameTagVisibility
    void setNameTagVisibility(java.lang.String) -> setNameTagVisibility
    int getColor() -> getColor
    void setColor(int) -> setColor
    java.lang.String getCollisionRule() -> getCollisionRule
    void setCollisionRule(java.lang.String) -> setCollisionRule
    java.util.List getPlayers() -> getPlayers
    void setPlayers(java.util.List) -> elit
    int getMode() -> getMode
    void setMode(int) -> setMode
    int getPackOptionData() -> dz
    void setPackOptionData(int) -> et
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerScoreboardTeam$Mode -> com.volmit.wormholes.src.co:
    int TEAM_CREATED -> oD
    int TEAM_REMOVED -> oE
    int TEAM_UPDATED -> oF
    int PLAYERS_ADDED -> oG
    int PLAYERS_REMOVED -> oH
    com.volmit.wormholes.util.WrapperPlayServerScoreboardTeam$Mode INSTANCE -> oI
    void <init>() -> <init>
    com.volmit.wormholes.util.WrapperPlayServerScoreboardTeam$Mode getInstance() -> dA
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerServerDifficulty -> com.volmit.wormholes.src.cp:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Difficulty getDifficulty() -> cM
    void setDifficulty(com.comphenix.protocol.wrappers.EnumWrappers$Difficulty) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSetCooldown -> com.volmit.wormholes.src.cq:
    java.lang.Class ITEM_CLASS -> oJ
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    org.bukkit.Material getItem() -> dB
    void setItem(org.bukkit.Material) -> sit
    int getTicks() -> dC
    void setTicks(int) -> sodales
    java.lang.Class access$100() -> dD
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSetCooldown$1 -> com.volmit.wormholes.src.cr:
com.volmit.wormholes.util.WrapperPlayServerSetCooldown$ItemConverter -> com.volmit.wormholes.src.cs:
    com.comphenix.protocol.reflect.accessors.MethodAccessor getMaterial -> oK
    com.comphenix.protocol.reflect.accessors.MethodAccessor getItem -> oL
    void <init>() -> <init>
    org.bukkit.Material getSpecific(java.lang.Object) -> enim
    java.lang.Object getGeneric(java.lang.Class,org.bukkit.Material) -> Lorem
    java.lang.Class getSpecificType() -> getSpecificType
    java.lang.Object getGeneric(java.lang.Class,java.lang.Object) -> getGeneric
    java.lang.Object getSpecific(java.lang.Object) -> getSpecific
    void <init>(com.volmit.wormholes.util.WrapperPlayServerSetCooldown$1) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSetSlot -> com.volmit.wormholes.src.ct:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(int) -> Duis
    int getSlot() -> getSlot
    void setSlot(int) -> aliquam
    org.bukkit.inventory.ItemStack getSlotData() -> dE
    void setSlotData(org.bukkit.inventory.ItemStack) -> purus
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSpawnEntity -> com.volmit.wormholes.src.cu:
    com.comphenix.protocol.PacketType TYPE -> oe
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> oM
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <init>(org.bukkit.entity.Entity,int,int) -> <init>
    com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity,int,int) -> Lorem
    int getEntityID() -> bE
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    void setEntityID(int) -> eget
    java.util.UUID getUniqueId() -> getUniqueId
    void setUniqueId(java.util.UUID) -> setUniqueId
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    double getOptionalSpeedX() -> dF
    void setOptionalSpeedX(double) -> Proin
    double getOptionalSpeedY() -> dG
    void setOptionalSpeedY(double) -> ac
    double getOptionalSpeedZ() -> dH
    void setOptionalSpeedZ(double) -> enim
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    int getType() -> getType
    void setType(int) -> setType
    int getObjectData() -> dI
    void setObjectData(int) -> scelerisque
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSpawnEntity$ObjectTypes -> com.volmit.wormholes.src.cv:
    int BOAT -> oN
    int ITEM_STACK -> oO
    int AREA_EFFECT_CLOUD -> oP
    int MINECART -> oQ
    int ACTIVATED_TNT -> oR
    int ENDER_CRYSTAL -> oS
    int TIPPED_ARROW_PROJECTILE -> oT
    int SNOWBALL_PROJECTILE -> oU
    int EGG_PROJECTILE -> oV
    int GHAST_FIREBALL -> oW
    int BLAZE_FIREBALL -> oX
    int THROWN_ENDERPEARL -> oY
    int WITHER_SKULL_PROJECTILE -> oZ
    int SHULKER_BULLET -> pa
    int FALLING_BLOCK -> pb
    int ITEM_FRAME -> pc
    int EYE_OF_ENDER -> pd
    int THROWN_POTION -> pe
    int THROWN_EXP_BOTTLE -> pf
    int FIREWORK_ROCKET -> pg
    int LEASH_KNOT -> ph
    int ARMORSTAND -> pi
    int FISHING_FLOAT -> pj
    int SPECTRAL_ARROW -> pk
    int DRAGON_FIREBALL -> pl
    com.volmit.wormholes.util.WrapperPlayServerSpawnEntity$ObjectTypes INSTANCE -> pm
    void <init>() -> <init>
    com.volmit.wormholes.util.WrapperPlayServerSpawnEntity$ObjectTypes getInstance() -> dJ
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSpawnEntityExperienceOrb -> com.volmit.wormholes.src.cw:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    int getCount() -> getCount
    void setCount(int) -> setCount
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSpawnEntityLiving -> com.volmit.wormholes.src.cx:
    com.comphenix.protocol.PacketType TYPE -> oe
    com.comphenix.protocol.injector.PacketConstructor entityConstructor -> oM
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <init>(org.bukkit.entity.Entity) -> <init>
    com.comphenix.protocol.events.PacketContainer fromEntity(org.bukkit.entity.Entity) -> dictum
    int getEntityID() -> bE
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    java.util.UUID getUniqueId() -> getUniqueId
    void setUniqueId(java.util.UUID) -> setUniqueId
    void setEntityID(int) -> eget
    org.bukkit.entity.EntityType getType() -> getType
    void setType(org.bukkit.entity.EntityType) -> ipsum
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    float getHeadPitch() -> dK
    void setHeadPitch(float) -> euismod
    double getVelocityX() -> cD
    void setVelocityX(double) -> mi
    double getVelocityY() -> cE
    void setVelocityY(double) -> euismod
    double getVelocityZ() -> cF
    void setVelocityZ(double) -> Pellentesque
    com.comphenix.protocol.wrappers.WrappedDataWatcher getMetadata() -> cZ
    void setMetadata(com.comphenix.protocol.wrappers.WrappedDataWatcher) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSpawnEntityPainting -> com.volmit.wormholes.src.cy:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    java.lang.String getTitle() -> getTitle
    void setTitle(java.lang.String) -> setTitle
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    com.comphenix.protocol.wrappers.EnumWrappers$Direction getDirection() -> bu
    void setDirection(com.comphenix.protocol.wrappers.EnumWrappers$Direction) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSpawnEntityWeather -> com.volmit.wormholes.src.cz:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    int getType() -> getType
    void setType(int) -> setType
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerSpawnPosition -> com.volmit.wormholes.src.cA:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerStatistic -> com.volmit.wormholes.src.cB:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    java.util.Map getStatistics() -> getStatistics
    void setStatistics(java.util.Map) -> ipsum
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerTabComplete -> com.volmit.wormholes.src.cC:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getCount() -> getCount
    java.lang.String[] getMatches() -> dL
    void setMatches(java.lang.String[]) -> purus
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerTileEntityData -> com.volmit.wormholes.src.cD:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    int getAction() -> getAction
    void setAction(int) -> setAction
    com.comphenix.protocol.wrappers.nbt.NbtBase getNbtData() -> dM
    void setNbtData(com.comphenix.protocol.wrappers.nbt.NbtBase) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerTitle -> com.volmit.wormholes.src.cE:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$TitleAction getAction() -> dN
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$TitleAction) -> Lorem
    com.comphenix.protocol.wrappers.WrappedChatComponent getTitle() -> dO
    void setTitle(com.comphenix.protocol.wrappers.WrappedChatComponent) -> adipiscing
    int getFadeIn() -> getFadeIn
    void setFadeIn(int) -> setFadeIn
    int getStay() -> getStay
    void setStay(int) -> setStay
    int getFadeOut() -> getFadeOut
    void setFadeOut(int) -> setFadeOut
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerTransaction -> com.volmit.wormholes.src.cF:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(int) -> Duis
    short getActionNumber() -> bW
    void setActionNumber(short) -> ipsum
    boolean getAccepted() -> bX
    void setAccepted(boolean) -> Proin
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerUnloadChunk -> com.volmit.wormholes.src.cG:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getChunkX() -> getChunkX
    void setChunkX(int) -> mollis
    int getChunkZ() -> getChunkZ
    void setChunkZ(int) -> convallis
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerUpdateAttributes -> com.volmit.wormholes.src.cH:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEntityID() -> bE
    void setEntityID(int) -> eget
    org.bukkit.entity.Entity getEntity(org.bukkit.World) -> dolor
    org.bukkit.entity.Entity getEntity(com.comphenix.protocol.events.PacketEvent) -> Lorem
    java.util.List getAttributes() -> getAttributes
    void setAttributes(java.util.List) -> setAttributes
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerUpdateHealth -> com.volmit.wormholes.src.cI:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    float getHealth() -> getHealth
    void setHealth(float) -> setHealth
    int getFood() -> dP
    void setFood(int) -> velit
    float getFoodSaturation() -> dQ
    void setFoodSaturation(float) -> Pellentesque
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerUpdateTime -> com.volmit.wormholes.src.cJ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    long getAgeOfTheWorld() -> dR
    void setAgeOfTheWorld(long) -> Pellentesque
    long getTimeOfDay() -> getTimeOfDay
    void setTimeOfDay(long) -> setTimeOfDay
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerVehicleMove -> com.volmit.wormholes.src.cK:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    double getX() -> getX
    void setX(double) -> setX
    double getY() -> getY
    void setY(double) -> setY
    double getZ() -> getZ
    void setZ(double) -> setZ
    float getYaw() -> getYaw
    void setYaw(float) -> setYaw
    float getPitch() -> getPitch
    void setPitch(float) -> setPitch
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerWindowData -> com.volmit.wormholes.src.cL:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(int) -> Duis
    int getProperty() -> dS
    void setProperty(int) -> Donec
    int getValue() -> getValue
    void setValue(int) -> setValue
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerWindowItems -> com.volmit.wormholes.src.cM:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getWindowId() -> bA
    void setWindowId(int) -> Duis
    java.util.List getSlotData() -> dT
    void setSlotData(java.util.List) -> Morbi
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerWorldBorder -> com.volmit.wormholes.src.cN:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction getAction() -> dU
    void setAction(com.comphenix.protocol.wrappers.EnumWrappers$WorldBorderAction) -> Lorem
    int getPortalTeleportBoundary() -> dV
    void setPortalTeleportBoundary(int) -> quam
    double getCenterX() -> getCenterX
    void setCenterX(double) -> posuere
    double getCenterZ() -> getCenterZ
    void setCenterZ(double) -> molestie
    double getOldRadius() -> dW
    void setOldRadius(double) -> odio
    double getRadius() -> dX
    void setRadius(double) -> a
    long getSpeed() -> dY
    void setSpeed(long) -> at
    int getWarningTime() -> getWarningTime
    void setWarningTime(int) -> setWarningTime
    int getWarningDistance() -> getWarningDistance
    void setWarningDistance(int) -> setWarningDistance
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerWorldEvent -> com.volmit.wormholes.src.cO:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    int getEffectId() -> getEffectId
    void setEffectId(int) -> malesuada
    com.comphenix.protocol.wrappers.BlockPosition getLocation() -> bt
    void setLocation(com.comphenix.protocol.wrappers.BlockPosition) -> Lorem
    int getData() -> getData
    void setData(int) -> setData
    boolean getDisableRelativeVolume() -> dZ
    void setDisableRelativeVolume(boolean) -> molestie
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperPlayServerWorldParticles -> com.volmit.wormholes.src.cP:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.EnumWrappers$Particle getParticleType() -> ea
    void setParticleType(com.comphenix.protocol.wrappers.EnumWrappers$Particle) -> Lorem
    float getX() -> getX
    void setX(float) -> at
    float getY() -> getY
    void setY(float) -> iaculis
    float getZ() -> getZ
    void setZ(float) -> urna
    float getOffsetX() -> eb
    void setOffsetX(float) -> Proin
    float getOffsetY() -> ec
    void setOffsetY(float) -> ac
    float getOffsetZ() -> ed
    void setOffsetZ(float) -> enim
    float getParticleData() -> ee
    void setParticleData(float) -> posuere
    int getNumberOfParticles() -> ef
    void setNumberOfParticles(int) -> quis
    boolean getLongDistance() -> eg
    void setLongDistance(boolean) -> odio
    int[] getData() -> getData
    void setData(int[]) -> dolor
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperStatusClientPing -> com.volmit.wormholes.src.cQ:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    long getTime() -> getTime
    void setTime(long) -> setTime
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperStatusClientStart -> com.volmit.wormholes.src.cR:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperStatusServerPong -> com.volmit.wormholes.src.cS:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    long getTime() -> getTime
    void setTime(long) -> setTime
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.WrapperStatusServerServerInfo -> com.volmit.wormholes.src.cT:
    com.comphenix.protocol.PacketType TYPE -> oe
    void <init>() -> <init>
    void <init>(com.comphenix.protocol.events.PacketContainer) -> <init>
    com.comphenix.protocol.wrappers.WrappedServerPing getJsonResponse() -> eh
    void setJsonResponse(com.comphenix.protocol.wrappers.WrappedServerPing) -> Lorem
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.XML -> com.volmit.wormholes.src.cU:
    java.lang.Character AMP -> pn
    java.lang.Character APOS -> po
    java.lang.Character BANG -> pp
    java.lang.Character EQ -> pq
    java.lang.Character GT -> pr
    java.lang.Character LT -> ps
    java.lang.Character QUEST -> pt
    java.lang.Character QUOT -> pu
    java.lang.Character SLASH -> pv
    void <init>() -> <init>
    java.lang.String escape(java.lang.String) -> escape
    void noSpace(java.lang.String) -> quam
    boolean parse(com.volmit.wormholes.util.XMLTokener,com.volmit.wormholes.util.JSONObject,java.lang.String) -> Lorem
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    com.volmit.wormholes.util.JSONObject toJSONObject(java.lang.String) -> tempus
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.XMLTokener -> com.volmit.wormholes.src.cV:
    java.util.HashMap entity -> pw
    void <init>(java.lang.String) -> <init>
    java.lang.String nextCDATA() -> ei
    java.lang.Object nextContent() -> ej
    java.lang.Object nextEntity(char) -> pulvinar
    java.lang.Object nextMeta() -> ek
    java.lang.Object nextToken() -> el
    boolean skipPast(java.lang.String) -> malesuada
    void <clinit>() -> <clinit>
com.volmit.wormholes.util.YAMLDataInput -> com.volmit.wormholes.src.cW:
    void <init>() -> <init>
    void load(com.volmit.wormholes.util.DataCluster,java.io.File) -> ipsum
com.volmit.wormholes.util.YAMLDataOutput -> com.volmit.wormholes.src.cX:
    void <init>() -> <init>
    void save(com.volmit.wormholes.util.DataCluster,java.io.File) -> Lorem
com.volmit.wormholes.util.ZipArchive -> com.volmit.wormholes.src.cY:
    com.volmit.wormholes.util.GMap fileSet -> px
    void <init>() -> <init>
    void add(java.io.File,java.io.File) -> Lorem
    void remove(java.io.File) -> remove
    void compress(java.io.File) -> ipsum
    com.volmit.wormholes.util.ArchiveType getType() -> magnis
com.volmit.wormholes.util.package-info -> com.volmit.wormholes.src.cZ:
com.volmit.wormholes.wormhole.BaseWormhole -> com.volmit.wormholes.src.da:
    com.volmit.wormholes.portal.LocalPortal source -> py
    com.volmit.wormholes.portal.Portal destination -> pz
    com.volmit.wormholes.util.GList filters -> nw
    void <init>(com.volmit.wormholes.portal.LocalPortal,com.volmit.wormholes.portal.Portal) -> <init>
    com.volmit.wormholes.portal.LocalPortal getSource() -> em
    com.volmit.wormholes.portal.Portal getDestination() -> en
    com.volmit.wormholes.util.GList getFilters() -> eo
    void push(org.bukkit.entity.Entity) -> Vestibulum
    void onPush(org.bukkit.entity.Entity) -> in
com.volmit.wormholes.wormhole.FilterMode -> com.volmit.wormholes.src.db:
    com.volmit.wormholes.wormhole.FilterMode WHITELIST -> pA
    com.volmit.wormholes.wormhole.FilterMode BLACKLIST -> pB
    com.volmit.wormholes.wormhole.FilterMode[] $VALUES -> pC
    com.volmit.wormholes.wormhole.FilterMode[] values() -> values
    com.volmit.wormholes.wormhole.FilterMode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.wormhole.FilterPolicy -> com.volmit.wormholes.src.dc:
    com.volmit.wormholes.wormhole.FilterPolicy MUTEX -> pD
    com.volmit.wormholes.wormhole.FilterPolicy LOCAL -> pE
    com.volmit.wormholes.wormhole.FilterPolicy BOTH -> pF
    com.volmit.wormholes.wormhole.FilterPolicy[] $VALUES -> pG
    com.volmit.wormholes.wormhole.FilterPolicy[] values() -> values
    com.volmit.wormholes.wormhole.FilterPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.volmit.wormholes.wormhole.LocalWormhole -> com.volmit.wormholes.src.dd:
    void <init>(com.volmit.wormholes.portal.LocalPortal,com.volmit.wormholes.portal.Portal) -> <init>
    void onPush(org.bukkit.entity.Entity) -> in
com.volmit.wormholes.wormhole.MutexWormhole -> com.volmit.wormholes.src.de:
    void <init>(com.volmit.wormholes.portal.LocalPortal,com.volmit.wormholes.portal.Portal) -> <init>
    void onPush(org.bukkit.entity.Entity) -> in
com.volmit.wormholes.wormhole.Wormhole -> com.volmit.wormholes.src.df:
    com.volmit.wormholes.portal.LocalPortal getSource() -> em
    com.volmit.wormholes.portal.Portal getDestination() -> en
    void push(org.bukkit.entity.Entity) -> Vestibulum
    com.volmit.wormholes.util.GList getFilters() -> eo
com.volmit.wormholes.wormhole.WormholeEntityFilter -> com.volmit.wormholes.src.dg:
    com.volmit.wormholes.wormhole.FilterPolicy policy -> pH
    com.volmit.wormholes.wormhole.FilterMode mode -> pI
    com.volmit.wormholes.util.GList entities -> bi
    void <init>(com.volmit.wormholes.wormhole.FilterPolicy,com.volmit.wormholes.wormhole.FilterMode,com.volmit.wormholes.util.GList) -> <init>
    void <init>(com.volmit.wormholes.wormhole.FilterPolicy,com.volmit.wormholes.wormhole.FilterMode,org.bukkit.entity.EntityType[]) -> <init>
    boolean onFilter(com.volmit.wormholes.wormhole.Wormhole,org.bukkit.entity.Entity) -> Lorem
    com.volmit.wormholes.wormhole.FilterPolicy getFilterPolicy() -> ep
    com.volmit.wormholes.wormhole.FilterMode getFilterMode() -> eq
    com.volmit.wormholes.wormhole.FilterPolicy getPolicy() -> er
    com.volmit.wormholes.wormhole.FilterMode getMode() -> es
    com.volmit.wormholes.util.GList getEntities() -> Aenean
com.volmit.wormholes.wormhole.WormholeEntityFilter$1 -> com.volmit.wormholes.src.dh:
    int[] $SwitchMap$com$volmit$wormholes$wormhole$FilterMode -> pJ
    int[] $SwitchMap$com$volmit$wormholes$wormhole$FilterPolicy -> pK
    void <clinit>() -> <clinit>
com.volmit.wormholes.wormhole.WormholeFilter -> com.volmit.wormholes.src.di:
    boolean onFilter(com.volmit.wormholes.wormhole.Wormhole,org.bukkit.entity.Entity) -> Lorem
    com.volmit.wormholes.wormhole.FilterPolicy getFilterPolicy() -> ep
    com.volmit.wormholes.wormhole.FilterMode getFilterMode() -> eq
